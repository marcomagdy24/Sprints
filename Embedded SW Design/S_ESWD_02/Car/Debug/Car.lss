
Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00002294  00002328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800088  00800088  00002350  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  000023bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043d7  00000000  00000000  0000276c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001760  00000000  00000000  00006b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002df8  00000000  00000000  000082a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000878  00000000  00000000  0000b09c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ec0  00000000  00000000  0000b914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002939  00000000  00000000  0000c7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000f10d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
       c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_3>
      10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      14:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_5>
      18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      24:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__vector_9>
      28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      2c:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__vector_11>
      30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      40:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      4c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      50:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      54:	ec 06       	cpc	r14, r28
      56:	a1 07       	cpc	r26, r17
      58:	a1 07       	cpc	r26, r17
      5a:	a1 07       	cpc	r26, r17
      5c:	f9 06       	cpc	r15, r25
      5e:	06 07       	cpc	r16, r22
      60:	a1 07       	cpc	r26, r17
      62:	13 07       	cpc	r17, r19
      64:	7b 07       	cpc	r23, r27
      66:	20 07       	cpc	r18, r16
      68:	2d 07       	cpc	r18, r29
      6a:	3a 07       	cpc	r19, r26
      6c:	47 07       	cpc	r20, r23
      6e:	54 07       	cpc	r21, r20
      70:	61 07       	cpc	r22, r17
      72:	6e 07       	cpc	r22, r30
      74:	88 07       	cpc	r24, r24
      76:	95 07       	cpc	r25, r21
      78:	32 08       	sbc	r3, r2
      7a:	3d 08       	sbc	r3, r13
      7c:	48 08       	sbc	r4, r8
      7e:	53 08       	sbc	r5, r3
      80:	5e 08       	sbc	r5, r14
      82:	69 08       	sbc	r6, r9
      84:	74 08       	sbc	r7, r4
      86:	96 08       	sbc	r9, r6
      88:	99 08       	sbc	r9, r9
      8a:	9d 08       	sbc	r9, r13
      8c:	ca 08       	sbc	r12, r10
      8e:	ca 08       	sbc	r12, r10
      90:	a0 08       	sbc	r10, r0
      92:	a3 08       	sbc	r10, r3
      94:	a6 08       	sbc	r10, r6
      96:	aa 08       	sbc	r10, r10
      98:	ad 08       	sbc	r10, r13
      9a:	b0 08       	sbc	r11, r0
      9c:	b4 08       	sbc	r11, r4
      9e:	b7 08       	sbc	r11, r7
      a0:	ba 08       	sbc	r11, r10
      a2:	be 08       	sbc	r11, r14
      a4:	c1 08       	sbc	r12, r1
      a6:	c4 08       	sbc	r12, r4
      a8:	c7 08       	sbc	r12, r7
      aa:	07 63       	ori	r16, 0x37	; 55
      ac:	42 36       	cpi	r20, 0x62	; 98
      ae:	b7 9b       	sbis	0x16, 7	; 22
      b0:	d8 a7       	std	Y+40, r29	; 0x28
      b2:	1a 39       	cpi	r17, 0x9A	; 154
      b4:	68 56       	subi	r22, 0x68	; 104
      b6:	18 ae       	std	Y+56, r1	; 0x38
      b8:	ba ab       	std	Y+50, r27	; 0x32
      ba:	55 8c       	ldd	r5, Z+29	; 0x1d
      bc:	1d 3c       	cpi	r17, 0xCD	; 205
      be:	b7 cc       	rjmp	.-1682   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
      c0:	57 63       	ori	r21, 0x37	; 55
      c2:	bd 6d       	ori	r27, 0xDD	; 221
      c4:	ed fd       	.word	0xfded	; ????
      c6:	75 3e       	cpi	r23, 0xE5	; 229
      c8:	f6 17       	cp	r31, r22
      ca:	72 31       	cpi	r23, 0x12	; 18
      cc:	bf 00       	.word	0x00bf	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240
      d2:	08 00       	.word	0x0008	; ????
      d4:	00 00       	nop
      d6:	be 92       	st	-X, r11
      d8:	24 49       	sbci	r18, 0x94	; 148
      da:	12 3e       	cpi	r17, 0xE2	; 226
      dc:	ab aa       	std	Y+51, r10	; 0x33
      de:	aa 2a       	or	r10, r26
      e0:	be cd       	rjmp	.-1156   	; 0xfffffc5e <__eeprom_end+0xff7efc5e>
      e2:	cc cc       	rjmp	.-1640   	; 0xfffffa7c <__eeprom_end+0xff7efa7c>
      e4:	4c 3e       	cpi	r20, 0xEC	; 236
      e6:	00 00       	nop
      e8:	00 80       	ld	r0, Z
      ea:	be ab       	std	Y+54, r27	; 0x36
      ec:	aa aa       	std	Y+50, r10	; 0x32
      ee:	aa 3e       	cpi	r26, 0xEA	; 234
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	bf 00       	.word	0x00bf	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240
      fa:	00 00       	nop
      fc:	00 00       	nop
      fe:	00 08       	sbc	r0, r0
     100:	41 78       	andi	r20, 0x81	; 129
     102:	d3 bb       	out	0x13, r29	; 19
     104:	43 87       	std	Z+11, r20	; 0x0b
     106:	d1 13       	cpse	r29, r17
     108:	3d 19       	sub	r19, r13
     10a:	0e 3c       	cpi	r16, 0xCE	; 206
     10c:	c3 bd       	out	0x23, r28	; 35
     10e:	42 82       	std	Z+2, r4	; 0x02
     110:	ad 2b       	or	r26, r29
     112:	3e 68       	ori	r19, 0x8E	; 142
     114:	ec 82       	std	Y+4, r14	; 0x04
     116:	76 be       	out	0x36, r7	; 54
     118:	d9 8f       	std	Y+25, r29	; 0x19
     11a:	e1 a9       	ldd	r30, Z+49	; 0x31
     11c:	3e 4c       	sbci	r19, 0xCE	; 206
     11e:	80 ef       	ldi	r24, 0xF0	; 240
     120:	ff be       	out	0x3f, r15	; 63
     122:	01 c4       	rjmp	.+2050   	; 0x926 <LCD_WRITE_NUMBER+0x1c>
     124:	ff 7f       	andi	r31, 0xFF	; 255
     126:	3f 00       	.word	0x003f	; ????
     128:	00 00       	nop
	...

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf e5       	ldi	r28, 0x5F	; 95
     132:	d8 e0       	ldi	r29, 0x08	; 8
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	a0 e6       	ldi	r26, 0x60	; 96
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	e4 e9       	ldi	r30, 0x94	; 148
     140:	f2 e2       	ldi	r31, 0x22	; 34
     142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	a8 38       	cpi	r26, 0x88	; 136
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
     14e:	20 e0       	ldi	r18, 0x00	; 0
     150:	a8 e8       	ldi	r26, 0x88	; 136
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	ad 3b       	cpi	r26, 0xBD	; 189
     15a:	b2 07       	cpc	r27, r18
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <main>
     162:	0c 94 48 11 	jmp	0x2290	; 0x2290 <_exit>

00000166 <__bad_interrupt>:
     166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <APP_INIT>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
uint8_t APP_INIT()
{
	GIE_voidEnable();
     16a:	0e 94 48 06 	call	0xc90	; 0xc90 <GIE_voidEnable>
	
	/* Replace with your application code */
	return E_OK;
}
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	08 95       	ret

00000172 <APP_UPDATE>:

uint8_t APP_UPDATE()
{
	Displaying_MainFunction();
     172:	0e 94 4d 01 	call	0x29a	; 0x29a <Displaying_MainFunction>
	Sensing_MainFunction();
     176:	0e 94 b7 01 	call	0x36e	; 0x36e <Sensing_MainFunction>
	Crashing_MainFunction();
     17a:	0e 94 ed 00 	call	0x1da	; 0x1da <Crashing_MainFunction>
	Steering_MainFunction();
     17e:	0e 94 2d 02 	call	0x45a	; 0x45a <Steering_MainFunction>
	return E_OK;

     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	08 95       	ret

00000186 <CrashingModule_GetDirection>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
E_STATUS CrashingModule_GetDirection(ptr_uint8_t MotorDirection)
{
	if (NULL_PTR == MotorDirection)
     186:	00 97       	sbiw	r24, 0x00	; 0
     188:	19 f4       	brne	.+6      	; 0x190 <CrashingModule_GetDirection+0xa>
	{
		gu8_RetValMotorDirection = E_NOK;
     18a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <gu8_RetValMotorDirection>
     18e:	0d c0       	rjmp	.+26     	; 0x1aa <CrashingModule_GetDirection+0x24>
	}
	else if ((*MotorDirection >= STATE_MOTOR_STOP) && (*MotorDirection <= STATE_MOTOR_LEFT) )
     190:	fc 01       	movw	r30, r24
     192:	20 81       	ld	r18, Z
     194:	25 30       	cpi	r18, 0x05	; 5
     196:	38 f4       	brcc	.+14     	; 0x1a6 <CrashingModule_GetDirection+0x20>
	{
		*MotorDirection = gu8o_MotorDirection;
     198:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <gu8o_MotorDirection>
     19c:	20 83       	st	Z, r18
		gu8_RetValMotorDirection = E_OK;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <gu8_RetValMotorDirection>
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <CrashingModule_GetDirection+0x24>
	}
	else
	{
		gu8_RetValMotorDirection = E_NOK;
     1a6:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <gu8_RetValMotorDirection>
	}
	return gu8_RetValMotorDirection;
     1aa:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <gu8_RetValMotorDirection>
}
     1ae:	08 95       	ret

000001b0 <CrashingModule_GetSpeed>:



E_STATUS CrashingModule_GetSpeed(ptr_uint8_t Speed)
{
	if (NULL_PTR == Speed)
     1b0:	00 97       	sbiw	r24, 0x00	; 0
     1b2:	19 f4       	brne	.+6      	; 0x1ba <CrashingModule_GetSpeed+0xa>
	{
		gu8_RetValMotorDirection = E_NOK;
     1b4:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <gu8_RetValMotorDirection>
     1b8:	0d c0       	rjmp	.+26     	; 0x1d4 <CrashingModule_GetSpeed+0x24>
	}
	else if ((*Speed >= MOTOR_MIN_SPEED) && (*Speed <= MOTOR_MAX_SPEED) )
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 81       	ld	r18, Z
     1be:	25 36       	cpi	r18, 0x65	; 101
     1c0:	38 f4       	brcc	.+14     	; 0x1d0 <CrashingModule_GetSpeed+0x20>
	{
		*Speed = gu8o_MotorSpeed;
     1c2:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <gu8o_MotorSpeed>
     1c6:	20 83       	st	Z, r18
		gu8_RetValMotorDirection = E_OK;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <gu8_RetValMotorDirection>
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <CrashingModule_GetSpeed+0x24>
	}
	else
	{
		gu8_RetValMotorDirection = E_NOK;
     1d0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <gu8_RetValMotorDirection>
	}
	
	return gu8_RetValMotorDirection;
     1d4:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <gu8_RetValMotorDirection>
}
     1d8:	08 95       	ret

000001da <Crashing_MainFunction>:
float32_t gf32i_SensorDistance;
extern volatile uint8_t gu8o_MotorSpeed;
extern volatile uint8_t gu8o_MotorDirection;

void Crashing_MainFunction()
{
     1da:	cf 92       	push	r12
     1dc:	df 92       	push	r13
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
	SensingGetDistance(&gf32i_SensorDistance);
     1e2:	88 ea       	ldi	r24, 0xA8	; 168
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 95 01 	call	0x32a	; 0x32a <SensingGetDistance>
	if(gf32i_SensorDistance > MAX_DISTANCE)
     1ea:	c0 90 a8 00 	lds	r12, 0x00A8	; 0x8000a8 <gf32i_SensorDistance>
     1ee:	d0 90 a9 00 	lds	r13, 0x00A9	; 0x8000a9 <gf32i_SensorDistance+0x1>
     1f2:	e0 90 aa 00 	lds	r14, 0x00AA	; 0x8000aa <gf32i_SensorDistance+0x2>
     1f6:	f0 90 ab 00 	lds	r15, 0x00AB	; 0x8000ab <gf32i_SensorDistance+0x3>
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	48 e5       	ldi	r20, 0x58	; 88
     200:	52 e4       	ldi	r21, 0x42	; 66
     202:	c7 01       	movw	r24, r14
     204:	b6 01       	movw	r22, r12
     206:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__gesf2>
     20a:	18 16       	cp	r1, r24
     20c:	3c f4       	brge	.+14     	; 0x21c <Crashing_MainFunction+0x42>
	{
		gu8o_MotorSpeed = MIN_SPEED;
     20e:	86 e4       	ldi	r24, 0x46	; 70
     210:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <gu8o_MotorSpeed>
		gu8o_MotorDirection = STATE_MOTOR_FORWARD;
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <gu8o_MotorDirection>
     21a:	3a c0       	rjmp	.+116    	; 0x290 <Crashing_MainFunction+0xb6>
	}
	else if((gf32i_SensorDistance >= RANGE_DISTANCE) && (gf32i_SensorDistance <= MAX_DISTANCE))
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	4c e3       	ldi	r20, 0x3C	; 60
     222:	52 e4       	ldi	r21, 0x42	; 66
     224:	c7 01       	movw	r24, r14
     226:	b6 01       	movw	r22, r12
     228:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__gesf2>
     22c:	88 23       	and	r24, r24
     22e:	8c f0       	brlt	.+34     	; 0x252 <Crashing_MainFunction+0x78>
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	48 e5       	ldi	r20, 0x58	; 88
     236:	52 e4       	ldi	r21, 0x42	; 66
     238:	c7 01       	movw	r24, r14
     23a:	b6 01       	movw	r22, r12
     23c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__cmpsf2>
     240:	18 16       	cp	r1, r24
     242:	3c f0       	brlt	.+14     	; 0x252 <Crashing_MainFunction+0x78>
	{
		gu8o_MotorSpeed = MAX_SPEED;
     244:	8f e5       	ldi	r24, 0x5F	; 95
     246:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <gu8o_MotorSpeed>
		gu8o_MotorDirection = STATE_MOTOR_RIGHT;
     24a:	83 e0       	ldi	r24, 0x03	; 3
     24c:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <gu8o_MotorDirection>
     250:	1f c0       	rjmp	.+62     	; 0x290 <Crashing_MainFunction+0xb6>
	}
	else if ((gf32i_SensorDistance < RANGE_DISTANCE) &&(gf32i_SensorDistance >= MIN_DISTANCE))
     252:	20 e0       	ldi	r18, 0x00	; 0
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	4c e3       	ldi	r20, 0x3C	; 60
     258:	52 e4       	ldi	r21, 0x42	; 66
     25a:	c7 01       	movw	r24, r14
     25c:	b6 01       	movw	r22, r12
     25e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__cmpsf2>
     262:	88 23       	and	r24, r24
     264:	8c f4       	brge	.+34     	; 0x288 <Crashing_MainFunction+0xae>
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	40 e0       	ldi	r20, 0x00	; 0
     26c:	50 e4       	ldi	r21, 0x40	; 64
     26e:	c7 01       	movw	r24, r14
     270:	b6 01       	movw	r22, r12
     272:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__gesf2>
     276:	88 23       	and	r24, r24
     278:	3c f0       	brlt	.+14     	; 0x288 <Crashing_MainFunction+0xae>
	{
		gu8o_MotorSpeed = MIN_SPEED;
     27a:	86 e4       	ldi	r24, 0x46	; 70
     27c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <gu8o_MotorSpeed>
		gu8o_MotorDirection = STATE_MOTOR_FORWARD;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <gu8o_MotorDirection>
     286:	04 c0       	rjmp	.+8      	; 0x290 <Crashing_MainFunction+0xb6>
	}
	else
	{
		gu8o_MotorSpeed = ZERO;
     288:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <gu8o_MotorSpeed>
		gu8o_MotorDirection = STATE_MOTOR_STOP;
     28c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <gu8o_MotorDirection>
	}
     290:	ff 90       	pop	r15
     292:	ef 90       	pop	r14
     294:	df 90       	pop	r13
     296:	cf 90       	pop	r12
     298:	08 95       	ret

0000029a <Displaying_MainFunction>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
void Displaying_MainFunction()
{
	if (u8_isInitStarted && u8_isInitFinished)
     29a:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <u8_isInitStarted>
     29e:	88 23       	and	r24, r24
     2a0:	f9 f0       	breq	.+62     	; 0x2e0 <Displaying_MainFunction+0x46>
     2a2:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <__data_end>
     2a6:	99 23       	and	r25, r25
     2a8:	d9 f0       	breq	.+54     	; 0x2e0 <Displaying_MainFunction+0x46>
	{
		SensingGetDistance(&gf32i_SensorDistance);
     2aa:	88 ea       	ldi	r24, 0xA8	; 168
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 95 01 	call	0x32a	; 0x32a <SensingGetDistance>
		LCD_GOTO_XY(FIRST_ROW, 10);
     2b2:	6a e0       	ldi	r22, 0x0A	; 10
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_GOTO_XY>
		LCD_WRITE_STRING((ptr_uint8_t)"   ");
     2ba:	86 e7       	ldi	r24, 0x76	; 118
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_WRITE_STRING>
		LCD_GOTO_XY(FIRST_ROW, 10);
     2c2:	6a e0       	ldi	r22, 0x0A	; 10
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_GOTO_XY>
		LCD_WRITE_NUMBER(gf32i_SensorDistance);
     2ca:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <gf32i_SensorDistance>
     2ce:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <gf32i_SensorDistance+0x1>
     2d2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <gf32i_SensorDistance+0x2>
     2d6:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <gf32i_SensorDistance+0x3>
     2da:	0e 94 85 04 	call	0x90a	; 0x90a <LCD_WRITE_NUMBER>
     2de:	08 95       	ret
	}
	else if (!(u8_isInitStarted) && !(u8_isInitFinished))
     2e0:	81 11       	cpse	r24, r1
     2e2:	0a c0       	rjmp	.+20     	; 0x2f8 <Displaying_MainFunction+0x5e>
     2e4:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <__data_end>
     2e8:	91 11       	cpse	r25, r1
     2ea:	06 c0       	rjmp	.+12     	; 0x2f8 <Displaying_MainFunction+0x5e>
	{
		LCD_INIT();
     2ec:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_INIT>
		u8_isInitStarted = TRUE;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <u8_isInitStarted>
     2f6:	08 95       	ret
	}
	else if ((u8_isInitStarted) && !(u8_isInitFinished))
     2f8:	88 23       	and	r24, r24
     2fa:	b1 f0       	breq	.+44     	; 0x328 <Displaying_MainFunction+0x8e>
     2fc:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
     300:	81 11       	cpse	r24, r1
     302:	12 c0       	rjmp	.+36     	; 0x328 <Displaying_MainFunction+0x8e>
	{
		while (OPERATION_SUCCESS != LCD_INIT());
     304:	0e 94 1c 03 	call	0x638	; 0x638 <LCD_INIT>
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	e1 f7       	brne	.-8      	; 0x304 <Displaying_MainFunction+0x6a>
		u8_isInitFinished = E_OK;
     30c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
		LCD_WRITE_STRING(STRING_DISTANCE);
     310:	8a e7       	ldi	r24, 0x7A	; 122
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_WRITE_STRING>
		LCD_GOTO_XY(FIRST_ROW, 14);
     318:	6e e0       	ldi	r22, 0x0E	; 14
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_GOTO_XY>
		LCD_WRITE_STRING(STRING_CM);
     320:	85 e8       	ldi	r24, 0x85	; 133
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_WRITE_STRING>
     328:	08 95       	ret

0000032a <SensingGetDistance>:
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
E_STATUS SensingGetDistance(ptr_float32_t Sensor_distance)
{
	
	if (Sensor_distance == NULL_PTR)
     32a:	00 97       	sbiw	r24, 0x00	; 0
     32c:	79 f0       	breq	.+30     	; 0x34c <SensingGetDistance+0x22>
	{
		return E_NOK;
	}
	(*Sensor_distance)=gf32o_SensorDistance;
     32e:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <gf32o_SensorDistance>
     332:	50 91 ad 00 	lds	r21, 0x00AD	; 0x8000ad <gf32o_SensorDistance+0x1>
     336:	60 91 ae 00 	lds	r22, 0x00AE	; 0x8000ae <gf32o_SensorDistance+0x2>
     33a:	70 91 af 00 	lds	r23, 0x00AF	; 0x8000af <gf32o_SensorDistance+0x3>
     33e:	fc 01       	movw	r30, r24
     340:	40 83       	st	Z, r20
     342:	51 83       	std	Z+1, r21	; 0x01
     344:	62 83       	std	Z+2, r22	; 0x02
     346:	73 83       	std	Z+3, r23	; 0x03
	return E_OK;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	08 95       	ret
E_STATUS SensingGetDistance(ptr_float32_t Sensor_distance)
{
	
	if (Sensor_distance == NULL_PTR)
	{
		return E_NOK;
     34c:	80 e0       	ldi	r24, 0x00	; 0
	}
	(*Sensor_distance)=gf32o_SensorDistance;
	return E_OK;
}
     34e:	08 95       	ret

00000350 <Sensing_Init>:

/******************************************************************************
*                         LOCAL FUNCTIONS IMPLEMENTATION					  *
*******************************************************************************/
E_STATUS Sensing_Init(void)
{
     350:	cf 93       	push	r28
	uint8_t count = ZERO;
     352:	c0 e0       	ldi	r28, 0x00	; 0
	E_STATUS retVal = E_NOK;
	while (count != 3)
     354:	05 c0       	rjmp	.+10     	; 0x360 <Sensing_Init+0x10>
	{
		if (E_NOK == ULTRASONIC_INIT())
     356:	0e 94 87 05 	call	0xb0e	; 0xb0e <ULTRASONIC_INIT>
     35a:	81 11       	cpse	r24, r1
     35c:	05 c0       	rjmp	.+10     	; 0x368 <Sensing_Init+0x18>
		{
			count++;
     35e:	cf 5f       	subi	r28, 0xFF	; 255
*******************************************************************************/
E_STATUS Sensing_Init(void)
{
	uint8_t count = ZERO;
	E_STATUS retVal = E_NOK;
	while (count != 3)
     360:	c3 30       	cpi	r28, 0x03	; 3
     362:	c9 f7       	brne	.-14     	; 0x356 <Sensing_Init+0x6>
*                         LOCAL FUNCTIONS IMPLEMENTATION					  *
*******************************************************************************/
E_STATUS Sensing_Init(void)
{
	uint8_t count = ZERO;
	E_STATUS retVal = E_NOK;
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	01 c0       	rjmp	.+2      	; 0x36a <Sensing_Init+0x1a>
		{
			count++;
		}
		else
		{
			retVal = E_OK;
     368:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	return retVal;
}
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <Sensing_MainFunction>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
void Sensing_MainFunction(void)
{
	if (E_NOK == u8_SensorInit) 
     36e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <u8_SensorInit>
     372:	81 11       	cpse	r24, r1
     374:	16 c0       	rjmp	.+44     	; 0x3a2 <Sensing_MainFunction+0x34>
	{
		if (E_OK == Sensing_Init())
     376:	0e 94 a8 01 	call	0x350	; 0x350 <Sensing_Init>
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	19 f4       	brne	.+6      	; 0x384 <Sensing_MainFunction+0x16>
		{
			u8_SensorInit = E_OK;
     37e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <u8_SensorInit>
     382:	08 95       	ret
		}
		else
		{
			u8_SensorInit = E_NOK;
     384:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <u8_SensorInit>
			gf32o_SensorDistance = ONE;
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	a0 e8       	ldi	r26, 0x80	; 128
     38e:	bf e3       	ldi	r27, 0x3F	; 63
     390:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <gf32o_SensorDistance>
     394:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <gf32o_SensorDistance+0x1>
     398:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <gf32o_SensorDistance+0x2>
     39c:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <gf32o_SensorDistance+0x3>
     3a0:	08 95       	ret
		}
	}
	else
	{
		ULTRASONIC_GetDist(&gf32o_SensorDistance);
     3a2:	8c ea       	ldi	r24, 0xAC	; 172
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <ULTRASONIC_GetDist>
     3aa:	08 95       	ret

000003ac <Steering_SetDirection>:

/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
E_STATUS Steering_SetDirection(ptr_uint8_t MotorDirection)
{
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	8c 01       	movw	r16, r24
	uint8_t state;
	CrashingModule_GetDirection(&state);
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	0e 94 c3 00 	call	0x186	; 0x186 <CrashingModule_GetDirection>
	if ((state >= STATE_MOTOR_STOP) && (state <= STATE_MOTOR_LEFT) )
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	85 30       	cpi	r24, 0x05	; 5
     3c8:	30 f4       	brcc	.+12     	; 0x3d6 <Steering_SetDirection+0x2a>
	{
		*MotorDirection = state;
     3ca:	f8 01       	movw	r30, r16
     3cc:	80 83       	st	Z, r24
		gu8i_RetValMotorDirection = E_OK;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <gu8i_RetValMotorDirection>
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <Steering_SetDirection+0x2e>
	}
	else
	{
		gu8i_RetValMotorDirection = E_NOK;
     3d6:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <gu8i_RetValMotorDirection>
	}
	
	return gu8i_RetValMotorDirection;
     3da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <gu8i_RetValMotorDirection>
}
     3de:	0f 90       	pop	r0
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	08 95       	ret

000003ea <Steering_SetSpeed>:

E_STATUS Steering_SetSpeed(ptr_uint8_t MotorSpeed)
{
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	1f 92       	push	r1
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	8c 01       	movw	r16, r24
	uint8_t state;
	CrashingModule_GetSpeed(&state);
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <CrashingModule_GetSpeed>
	if (!((state >= MOTOR_MIN_SPEED)  && (state <= MOTOR_MAX_SPEED)))
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	85 36       	cpi	r24, 0x65	; 101
     406:	18 f0       	brcs	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		gu8i_RetValMotorDirection = E_NOK;
     408:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <gu8i_RetValMotorDirection>
     40c:	05 c0       	rjmp	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	}
	else
	{
		*MotorSpeed = state;
     40e:	f8 01       	movw	r30, r16
     410:	80 83       	st	Z, r24
		gu8i_RetValMotorDirection = E_OK;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <gu8i_RetValMotorDirection>
	}
	
	return gu8i_RetValMotorDirection;
     418:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <gu8i_RetValMotorDirection>
}
     41c:	0f 90       	pop	r0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	08 95       	ret

00000428 <Steering_InitFunction>:
/******************************************************************************
*                         LOCAL FUNCTIONS IMPLEMENTATION					  *
*******************************************************************************/
E_STATUS Steering_InitFunction()
{
	DC_MotorInit(Motor_LEFT);
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <DC_MotorInit>
	DC_MotorInit(Motor_RIGHT);
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <DC_MotorInit>
	return E_OK;
}
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	08 95       	ret

00000438 <Steering_InitData>:

E_STATUS Steering_InitData()
{
	uint8_t u8_retval = E_NOK;
	if ((E_OK == Steering_SetDirection(&gu8i_MotorDirection)) && (E_OK == Steering_SetSpeed(&gu8i_MotorSpeed)))
     438:	82 eb       	ldi	r24, 0xB2	; 178
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <Steering_SetDirection>
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	39 f4       	brne	.+14     	; 0x452 <Steering_InitData+0x1a>
     444:	81 eb       	ldi	r24, 0xB1	; 177
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Steering_SetSpeed>
     44c:	81 30       	cpi	r24, 0x01	; 1
     44e:	19 f4       	brne	.+6      	; 0x456 <Steering_InitData+0x1e>
     450:	08 95       	ret
	{
		u8_retval = E_OK;
	}
	else
	{
		u8_retval = E_NOK;
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	08 95       	ret
     456:	80 e0       	ldi	r24, 0x00	; 0
	}
	return u8_retval;
}
     458:	08 95       	ret

0000045a <Steering_MainFunction>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
void Steering_MainFunction(void)
{
	if (E_NOK == gu8_MotorInit)
     45a:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <gu8_MotorInit>
     45e:	81 11       	cpse	r24, r1
     460:	06 c0       	rjmp	.+12     	; 0x46e <Steering_MainFunction+0x14>
	{
		Steering_InitFunction();
     462:	0e 94 14 02 	call	0x428	; 0x428 <Steering_InitFunction>
		gu8_MotorInit = E_OK;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <gu8_MotorInit>
     46c:	08 95       	ret
	}
	else
	{
		if (Steering_InitData())
     46e:	0e 94 1c 02 	call	0x438	; 0x438 <Steering_InitData>
     472:	88 23       	and	r24, r24
     474:	09 f4       	brne	.+2      	; 0x478 <Steering_MainFunction+0x1e>
     476:	49 c0       	rjmp	.+146    	; 0x50a <Steering_MainFunction+0xb0>
		{
			switch (gu8i_MotorDirection)
     478:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <gu8i_MotorDirection>
     47c:	82 30       	cpi	r24, 0x02	; 2
     47e:	c1 f0       	breq	.+48     	; 0x4b0 <Steering_MainFunction+0x56>
     480:	28 f4       	brcc	.+10     	; 0x48c <Steering_MainFunction+0x32>
     482:	88 23       	and	r24, r24
     484:	e1 f1       	breq	.+120    	; 0x4fe <Steering_MainFunction+0xa4>
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	31 f0       	breq	.+12     	; 0x496 <Steering_MainFunction+0x3c>
     48a:	08 95       	ret
     48c:	83 30       	cpi	r24, 0x03	; 3
     48e:	e9 f0       	breq	.+58     	; 0x4ca <Steering_MainFunction+0x70>
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	41 f1       	breq	.+80     	; 0x4e4 <Steering_MainFunction+0x8a>
     494:	08 95       	ret
			{
				case (STATE_MOTOR_FORWARD):
				{
					DC_MotorStart(Motor_RIGHT, gu8i_MotorSpeed, Motor_FORWARD);
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <gu8i_MotorSpeed>
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 0c 05 	call	0xa18	; 0xa18 <DC_MotorStart>
					DC_MotorStart(Motor_LEFT, gu8i_MotorSpeed, Motor_FORWARD);
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <gu8i_MotorSpeed>
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	0e 94 0c 05 	call	0xa18	; 0xa18 <DC_MotorStart>
					break;
     4ae:	08 95       	ret
				}
				case (STATE_MOTOR_BACKWARD):
				{
					DC_MotorStart(Motor_RIGHT, gu8i_MotorSpeed, Motor_BACKWARD);
     4b0:	41 e0       	ldi	r20, 0x01	; 1
     4b2:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <gu8i_MotorSpeed>
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 0c 05 	call	0xa18	; 0xa18 <DC_MotorStart>
					DC_MotorStart(Motor_LEFT, gu8i_MotorSpeed, Motor_BACKWARD);
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <gu8i_MotorSpeed>
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	0e 94 0c 05 	call	0xa18	; 0xa18 <DC_MotorStart>
					break;
     4c8:	08 95       	ret
				}
				case (STATE_MOTOR_RIGHT):
				{
					DC_MotorStart(Motor_RIGHT, gu8i_MotorSpeed, Motor_BACKWARD);
     4ca:	41 e0       	ldi	r20, 0x01	; 1
     4cc:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <gu8i_MotorSpeed>
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	0e 94 0c 05 	call	0xa18	; 0xa18 <DC_MotorStart>
					DC_MotorStart(Motor_LEFT, gu8i_MotorSpeed, Motor_FORWARD);
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <gu8i_MotorSpeed>
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	0e 94 0c 05 	call	0xa18	; 0xa18 <DC_MotorStart>
					break;
     4e2:	08 95       	ret
				}
				case (STATE_MOTOR_LEFT):
				{
					DC_MotorStart(Motor_RIGHT, gu8i_MotorSpeed, Motor_FORWARD);
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <gu8i_MotorSpeed>
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 0c 05 	call	0xa18	; 0xa18 <DC_MotorStart>
					DC_MotorStart(Motor_LEFT, gu8i_MotorSpeed, Motor_BACKWARD);
     4f0:	41 e0       	ldi	r20, 0x01	; 1
     4f2:	60 91 b1 00 	lds	r22, 0x00B1	; 0x8000b1 <gu8i_MotorSpeed>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	0e 94 0c 05 	call	0xa18	; 0xa18 <DC_MotorStart>
					break;
     4fc:	08 95       	ret
				}
				case (STATE_MOTOR_STOP):
				{
					DC_MotorStop(Motor_RIGHT);
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	0e 94 64 05 	call	0xac8	; 0xac8 <DC_MotorStop>
					DC_MotorStop(Motor_LEFT);
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	0e 94 64 05 	call	0xac8	; 0xac8 <DC_MotorStop>
     50a:	08 95       	ret

0000050c <WRITE_ZERO>:
/******************************************************************************
*                         LOCAL FUNCTIONS IMPLEMENTATION					  *
*******************************************************************************/
void WRITE_ZERO(uint8_t PIN)
{
	DIO_WritePIN(gext_LCDConfig[PIN].port, gext_LCDConfig[PIN].pin, LOW);
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	fc 01       	movw	r30, r24
     510:	ee 0f       	add	r30, r30
     512:	ff 1f       	adc	r31, r31
     514:	8e 0f       	add	r24, r30
     516:	9f 1f       	adc	r25, r31
     518:	fc 01       	movw	r30, r24
     51a:	e0 5a       	subi	r30, 0xA0	; 160
     51c:	ff 4f       	sbci	r31, 0xFF	; 255
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	61 81       	ldd	r22, Z+1	; 0x01
     522:	80 81       	ld	r24, Z
     524:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
     528:	08 95       	ret

0000052a <WRITE_ONE>:
}

void WRITE_ONE(uint8_t PIN)
{
	DIO_WritePIN(gext_LCDConfig[PIN].port, gext_LCDConfig[PIN].pin, HIGH);
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	fc 01       	movw	r30, r24
     52e:	ee 0f       	add	r30, r30
     530:	ff 1f       	adc	r31, r31
     532:	8e 0f       	add	r24, r30
     534:	9f 1f       	adc	r25, r31
     536:	fc 01       	movw	r30, r24
     538:	e0 5a       	subi	r30, 0xA0	; 160
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	61 81       	ldd	r22, Z+1	; 0x01
     540:	80 81       	ld	r24, Z
     542:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
     546:	08 95       	ret

00000548 <LCD_KICK>:
}

void LCD_KICK(){
	WRITE_ZERO(EN_SWITCH);
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	0e 94 86 02 	call	0x50c	; 0x50c <WRITE_ZERO>
static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));


void _delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     54e:	85 e3       	ldi	r24, 0x35	; 53
     550:	8a 95       	dec	r24
     552:	f1 f7       	brne	.-4      	; 0x550 <LCD_KICK+0x8>
	#if !TEST
	_delay_us(20);
	#endif
	WRITE_ONE(EN_SWITCH);
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	0e 94 95 02 	call	0x52a	; 0x52a <WRITE_ONE>
     55a:	08 95       	ret

0000055c <LCD_WRITE_COMMAND>:
	return E_OK;
}


E_STATUS LCD_WRITE_COMMAND(uint8_t command)
{
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	18 2f       	mov	r17, r24
	#if !TEST
	_delay_us(1);
	#endif
	LCD_KICK ();
	#elif LCD_MODE == FOUR_BIT_MODE
	DIO_WritePIN(gext_LCDConfig[DATA_4].port,gext_LCDConfig[DATA_4].pin,BIT_GET(command,4));
     564:	c0 e6       	ldi	r28, 0x60	; 96
     566:	d0 e0       	ldi	r29, 0x00	; 0
     568:	84 fb       	bst	r24, 4
     56a:	44 27       	eor	r20, r20
     56c:	40 f9       	bld	r20, 0
     56e:	6a 85       	ldd	r22, Y+10	; 0x0a
     570:	89 85       	ldd	r24, Y+9	; 0x09
     572:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_5].port,gext_LCDConfig[DATA_5].pin,BIT_GET(command,5));
     576:	15 fb       	bst	r17, 5
     578:	44 27       	eor	r20, r20
     57a:	40 f9       	bld	r20, 0
     57c:	6d 85       	ldd	r22, Y+13	; 0x0d
     57e:	8c 85       	ldd	r24, Y+12	; 0x0c
     580:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_6].port,gext_LCDConfig[DATA_6].pin,BIT_GET(command,6));
     584:	16 fb       	bst	r17, 6
     586:	44 27       	eor	r20, r20
     588:	40 f9       	bld	r20, 0
     58a:	68 89       	ldd	r22, Y+16	; 0x10
     58c:	8f 85       	ldd	r24, Y+15	; 0x0f
     58e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_7].port,gext_LCDConfig[DATA_7].pin,BIT_GET(command,7));
     592:	41 2f       	mov	r20, r17
     594:	44 1f       	adc	r20, r20
     596:	44 27       	eor	r20, r20
     598:	44 1f       	adc	r20, r20
     59a:	6b 89       	ldd	r22, Y+19	; 0x13
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	WRITE_ZERO(RS_SWITCH);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 86 02 	call	0x50c	; 0x50c <WRITE_ZERO>
	WRITE_ZERO(RW_SWITCH);
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 86 02 	call	0x50c	; 0x50c <WRITE_ZERO>
	LCD_KICK ();
     5ae:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_KICK>
	DIO_WritePIN(gext_LCDConfig[DATA_4].port,gext_LCDConfig[DATA_4].pin,BIT_GET(command,0));
     5b2:	41 2f       	mov	r20, r17
     5b4:	41 70       	andi	r20, 0x01	; 1
     5b6:	6a 85       	ldd	r22, Y+10	; 0x0a
     5b8:	89 85       	ldd	r24, Y+9	; 0x09
     5ba:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_5].port,gext_LCDConfig[DATA_5].pin,BIT_GET(command,1));
     5be:	11 fb       	bst	r17, 1
     5c0:	44 27       	eor	r20, r20
     5c2:	40 f9       	bld	r20, 0
     5c4:	6d 85       	ldd	r22, Y+13	; 0x0d
     5c6:	8c 85       	ldd	r24, Y+12	; 0x0c
     5c8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_6].port,gext_LCDConfig[DATA_6].pin,BIT_GET(command,2));
     5cc:	12 fb       	bst	r17, 2
     5ce:	44 27       	eor	r20, r20
     5d0:	40 f9       	bld	r20, 0
     5d2:	68 89       	ldd	r22, Y+16	; 0x10
     5d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5d6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_7].port,gext_LCDConfig[DATA_7].pin,BIT_GET(command,3));
     5da:	13 fb       	bst	r17, 3
     5dc:	44 27       	eor	r20, r20
     5de:	40 f9       	bld	r20, 0
     5e0:	6b 89       	ldd	r22, Y+19	; 0x13
     5e2:	8a 89       	ldd	r24, Y+18	; 0x12
     5e4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	WRITE_ZERO(RS_SWITCH);
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	0e 94 86 02 	call	0x50c	; 0x50c <WRITE_ZERO>
	WRITE_ZERO(RW_SWITCH);
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	0e 94 86 02 	call	0x50c	; 0x50c <WRITE_ZERO>
	LCD_KICK ();
     5f4:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_KICK>
	#endif
	return E_OK;

}
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	08 95       	ret

00000602 <LCD_clear_screen>:
	return u8_retval;
}

E_STATUS LCD_clear_screen ()
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN); // clear the screen
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_WRITE_COMMAND>
	return E_OK;
}
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	08 95       	ret

0000060c <LCD_GOTO_XY>:

E_STATUS LCD_GOTO_XY(uint8_t line, uint8_t position)
{
	if ((position < LCD_END) && (position >=LCD_BEGIN))
     60c:	60 31       	cpi	r22, 0x10	; 16
     60e:	80 f4       	brcc	.+32     	; 0x630 <LCD_GOTO_XY+0x24>
	{
		if(line == FIRST_ROW)
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	31 f4       	brne	.+12     	; 0x620 <LCD_GOTO_XY+0x14>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
     614:	80 e8       	ldi	r24, 0x80	; 128
     616:	86 0f       	add	r24, r22
     618:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_WRITE_COMMAND>
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	08 95       	ret
	{
		if(line == FIRST_ROW)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
		}
		else if(line == SECOND_ROW)
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	41 f4       	brne	.+16     	; 0x634 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
     624:	80 ec       	ldi	r24, 0xC0	; 192
     626:	86 0f       	add	r24, r22
     628:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_WRITE_COMMAND>
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	08 95       	ret
			return E_NOK;
		}
	}
	else
	{
		return E_NOK;
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	08 95       	ret
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
		}
		else
		{
			return E_NOK;
     634:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		return E_NOK;
	}
	return E_OK;
}
     636:	08 95       	ret

00000638 <LCD_INIT>:

/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
E_STATUS LCD_INIT(void)
{
     638:	cf 93       	push	r28
	switch (au8_status)
     63a:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <au8_status>
     63e:	83 30       	cpi	r24, 0x03	; 3
     640:	09 f4       	brne	.+2      	; 0x644 <LCD_INIT+0xc>
     642:	7c c0       	rjmp	.+248    	; 0x73c <LCD_INIT+0x104>
     644:	30 f4       	brcc	.+12     	; 0x652 <LCD_INIT+0x1a>
     646:	88 23       	and	r24, r24
     648:	59 f0       	breq	.+22     	; 0x660 <LCD_INIT+0x28>
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	09 f4       	brne	.+2      	; 0x650 <LCD_INIT+0x18>
     64e:	4b c0       	rjmp	.+150    	; 0x6e6 <LCD_INIT+0xae>
     650:	d5 c0       	rjmp	.+426    	; 0x7fc <LCD_INIT+0x1c4>
     652:	84 30       	cpi	r24, 0x04	; 4
     654:	09 f4       	brne	.+2      	; 0x658 <LCD_INIT+0x20>
     656:	9c c0       	rjmp	.+312    	; 0x790 <LCD_INIT+0x158>
     658:	85 30       	cpi	r24, 0x05	; 5
     65a:	09 f4       	brne	.+2      	; 0x65e <LCD_INIT+0x26>
     65c:	a7 c0       	rjmp	.+334    	; 0x7ac <LCD_INIT+0x174>
     65e:	ce c0       	rjmp	.+412    	; 0x7fc <LCD_INIT+0x1c4>
	{
		case OPERATION_STARTED:
		{
			u8_TimerRetval = Timer_NonBlockingdelay(TMR2_CHOICE, 2000, OPERATION_STARTED);
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	40 ed       	ldi	r20, 0xD0	; 208
     664:	57 e0       	ldi	r21, 0x07	; 7
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	0e 94 0f 0a 	call	0x141e	; 0x141e <Timer_NonBlockingdelay>
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	a0 e0       	ldi	r26, 0x00	; 0
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8_TimerRetval>
     67a:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <u8_TimerRetval+0x1>
     67e:	a0 93 8f 00 	sts	0x008F, r26	; 0x80008f <u8_TimerRetval+0x2>
     682:	b0 93 90 00 	sts	0x0090, r27	; 0x800090 <u8_TimerRetval+0x3>
			if(SUCCESS == u8_TimerRetval)
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	91 05       	cpc	r25, r1
     68a:	a1 05       	cpc	r26, r1
     68c:	b1 05       	cpc	r27, r1
     68e:	11 f5       	brne	.+68     	; 0x6d4 <LCD_INIT+0x9c>
     690:	1a c0       	rjmp	.+52     	; 0x6c6 <LCD_INIT+0x8e>
			{
				for(uint8_t au8_IterationNo = ZERO; au8_IterationNo < LCD_PINS_NUMBER; au8_IterationNo++)
				{
					configs.port = gext_LCDConfig[au8_IterationNo].port;
     692:	ec 2f       	mov	r30, r28
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	cf 01       	movw	r24, r30
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	e8 0f       	add	r30, r24
     69e:	f9 1f       	adc	r31, r25
     6a0:	e0 5a       	subi	r30, 0xA0	; 160
     6a2:	ff 4f       	sbci	r31, 0xFF	; 255
     6a4:	80 81       	ld	r24, Z
     6a6:	a2 ea       	ldi	r26, 0xA2	; 162
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	8c 93       	st	X, r24
					configs.pin	 = gext_LCDConfig[au8_IterationNo].pin;
     6ac:	81 81       	ldd	r24, Z+1	; 0x01
     6ae:	11 96       	adiw	r26, 0x01	; 1
     6b0:	8c 93       	st	X, r24
     6b2:	11 97       	sbiw	r26, 0x01	; 1
					configs.dir  = gext_LCDConfig[au8_IterationNo].dir;
     6b4:	82 81       	ldd	r24, Z+2	; 0x02
     6b6:	12 96       	adiw	r26, 0x02	; 2
     6b8:	8c 93       	st	X, r24
     6ba:	12 97       	sbiw	r26, 0x02	; 2
					DIO_Init(&configs);
     6bc:	cd 01       	movw	r24, r26
     6be:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
		case OPERATION_STARTED:
		{
			u8_TimerRetval = Timer_NonBlockingdelay(TMR2_CHOICE, 2000, OPERATION_STARTED);
			if(SUCCESS == u8_TimerRetval)
			{
				for(uint8_t au8_IterationNo = ZERO; au8_IterationNo < LCD_PINS_NUMBER; au8_IterationNo++)
     6c2:	cf 5f       	subi	r28, 0xFF	; 255
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <LCD_INIT+0x90>
     6c6:	c0 e0       	ldi	r28, 0x00	; 0
     6c8:	c7 30       	cpi	r28, 0x07	; 7
     6ca:	18 f3       	brcs	.-58     	; 0x692 <LCD_INIT+0x5a>
					configs.port = gext_LCDConfig[au8_IterationNo].port;
					configs.pin	 = gext_LCDConfig[au8_IterationNo].pin;
					configs.dir  = gext_LCDConfig[au8_IterationNo].dir;
					DIO_Init(&configs);
				}
				au8_status = STATE_LCD_PIN_INITIALIZATIED;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <au8_status>
     6d2:	97 c0       	rjmp	.+302    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			}
			else if(PENDING == u8_TimerRetval)
     6d4:	89 2b       	or	r24, r25
     6d6:	8a 2b       	or	r24, r26
     6d8:	8b 2b       	or	r24, r27
     6da:	09 f0       	breq	.+2      	; 0x6de <LCD_INIT+0xa6>
     6dc:	92 c0       	rjmp	.+292    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			{
				u8_retval = OPERATION_RUNNING;	
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <u8_retval>
     6e4:	8e c0       	rjmp	.+284    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			}
			break;
		}
		case STATE_LCD_PIN_INITIALIZATIED:
		{
			u8_TimerRetval = Timer_NonBlockingdelay(TMR2_CHOICE, 100, STATE_LCD_PIN_INITIALIZATIED);
     6e6:	21 e0       	ldi	r18, 0x01	; 1
     6e8:	44 e6       	ldi	r20, 0x64	; 100
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	0e 94 0f 0a 	call	0x141e	; 0x141e <Timer_NonBlockingdelay>
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8_TimerRetval>
     700:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <u8_TimerRetval+0x1>
     704:	a0 93 8f 00 	sts	0x008F, r26	; 0x80008f <u8_TimerRetval+0x2>
     708:	b0 93 90 00 	sts	0x0090, r27	; 0x800090 <u8_TimerRetval+0x3>
			if(SUCCESS == u8_TimerRetval)
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	91 05       	cpc	r25, r1
     710:	a1 05       	cpc	r26, r1
     712:	b1 05       	cpc	r27, r1
     714:	51 f4       	brne	.+20     	; 0x72a <LCD_INIT+0xf2>
				#if LCD_MODE == EIGHT_BIT_MODE
				DIO_WritePORT(DataDir_LCD_PORT, 0xFF);
				LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
				
				#elif LCD_MODE == FOUR_BIT_MODE
				LCD_WRITE_COMMAND(0x02);
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_WRITE_COMMAND>
				LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
     71c:	88 e2       	ldi	r24, 0x28	; 40
     71e:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_WRITE_COMMAND>
				#endif
				au8_status = STATE_FIRST_COMMAND;
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <au8_status>
     728:	6c c0       	rjmp	.+216    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			}
			else if(PENDING == u8_TimerRetval)
     72a:	89 2b       	or	r24, r25
     72c:	8a 2b       	or	r24, r26
     72e:	8b 2b       	or	r24, r27
     730:	09 f0       	breq	.+2      	; 0x734 <LCD_INIT+0xfc>
     732:	67 c0       	rjmp	.+206    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			{
				u8_retval = OPERATION_RUNNING;
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <u8_retval>
     73a:	63 c0       	rjmp	.+198    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			}
			break;
		}
		case STATE_FIRST_COMMAND:
		{
			u8_TimerRetval = Timer_NonBlockingdelay(TMR2_CHOICE, 100, STATE_FIRST_COMMAND);
     73c:	23 e0       	ldi	r18, 0x03	; 3
     73e:	44 e6       	ldi	r20, 0x64	; 100
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	0e 94 0f 0a 	call	0x141e	; 0x141e <Timer_NonBlockingdelay>
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	a0 e0       	ldi	r26, 0x00	; 0
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8_TimerRetval>
     756:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <u8_TimerRetval+0x1>
     75a:	a0 93 8f 00 	sts	0x008F, r26	; 0x80008f <u8_TimerRetval+0x2>
     75e:	b0 93 90 00 	sts	0x0090, r27	; 0x800090 <u8_TimerRetval+0x3>
			if(SUCCESS == u8_TimerRetval)
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	91 05       	cpc	r25, r1
     766:	a1 05       	cpc	r26, r1
     768:	b1 05       	cpc	r27, r1
     76a:	51 f4       	brne	.+20     	; 0x780 <LCD_INIT+0x148>
				#if LCD_MODE == EIGHT_BIT_MODE
				DIO_WritePORT(DataDir_LCD_PORT, 0xFF);
				LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
				
				#elif LCD_MODE == FOUR_BIT_MODE
				LCD_WRITE_COMMAND(0x02);
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_WRITE_COMMAND>
				LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
     772:	88 e2       	ldi	r24, 0x28	; 40
     774:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_WRITE_COMMAND>
				#endif
				au8_status = STATE_SECOND_COMMAND;
     778:	84 e0       	ldi	r24, 0x04	; 4
     77a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <au8_status>
     77e:	41 c0       	rjmp	.+130    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			}
			else if(PENDING == u8_TimerRetval)
     780:	89 2b       	or	r24, r25
     782:	8a 2b       	or	r24, r26
     784:	8b 2b       	or	r24, r27
     786:	e9 f5       	brne	.+122    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			{
				u8_retval = OPERATION_RUNNING;
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <u8_retval>
     78e:	39 c0       	rjmp	.+114    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			}
			break;
		}
		case STATE_SECOND_COMMAND:
		{
			LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
     790:	86 e0       	ldi	r24, 0x06	; 6
     792:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_WRITE_COMMAND>
			LCD_GOTO_XY(FIRST_ROW, 0);
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_GOTO_XY>
			LCD_WRITE_COMMAND(LCD_DISP_ON);
     79e:	8c e0       	ldi	r24, 0x0C	; 12
     7a0:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_WRITE_COMMAND>
			au8_status = STATE_THIRD_COMMAND;
     7a4:	85 e0       	ldi	r24, 0x05	; 5
     7a6:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <au8_status>
			break;
     7aa:	2b c0       	rjmp	.+86     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		}
		case STATE_THIRD_COMMAND:
		{
			u8_TimerRetval = Timer_NonBlockingdelay(TMR2_CHOICE, 100, STATE_THIRD_COMMAND);
     7ac:	25 e0       	ldi	r18, 0x05	; 5
     7ae:	44 e6       	ldi	r20, 0x64	; 100
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	0e 94 0f 0a 	call	0x141e	; 0x141e <Timer_NonBlockingdelay>
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	a0 e0       	ldi	r26, 0x00	; 0
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8_TimerRetval>
     7c6:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <u8_TimerRetval+0x1>
     7ca:	a0 93 8f 00 	sts	0x008F, r26	; 0x80008f <u8_TimerRetval+0x2>
     7ce:	b0 93 90 00 	sts	0x0090, r27	; 0x800090 <u8_TimerRetval+0x3>
			if(SUCCESS == u8_TimerRetval)
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	91 05       	cpc	r25, r1
     7d6:	a1 05       	cpc	r26, r1
     7d8:	b1 05       	cpc	r27, r1
     7da:	41 f4       	brne	.+16     	; 0x7ec <LCD_INIT+0x1b4>
			{
				LCD_clear_screen();
     7dc:	0e 94 01 03 	call	0x602	; 0x602 <LCD_clear_screen>
				au8_status = OPERATION_SUCCESS;
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <au8_status>
				u8_retval = OPERATION_SUCCESS;
     7e6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <u8_retval>
     7ea:	0b c0       	rjmp	.+22     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			}
			else if(PENDING == u8_TimerRetval)
     7ec:	89 2b       	or	r24, r25
     7ee:	8a 2b       	or	r24, r26
     7f0:	8b 2b       	or	r24, r27
     7f2:	39 f4       	brne	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			{
				
				u8_retval = OPERATION_RUNNING;
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <u8_retval>
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			}
			break;
		}
		default:
		{
			u8_retval = OPERATION_FAIL;
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <u8_retval>
		}
	}
	return u8_retval;
}
     802:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <u8_retval>
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <LCD_WRITE_CHAR>:
	return E_OK;

}

E_STATUS LCD_WRITE_CHAR(uint8_t data)
{
     80a:	1f 93       	push	r17
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	18 2f       	mov	r17, r24
	#if !TEST
	_delay_us(1);
	#endif
	LCD_KICK ();
	#elif LCD_MODE == FOUR_BIT_MODE
	DIO_WritePIN(gext_LCDConfig[DATA_4].port,gext_LCDConfig[DATA_4].pin,BIT_GET(data,4));
     812:	c0 e6       	ldi	r28, 0x60	; 96
     814:	d0 e0       	ldi	r29, 0x00	; 0
     816:	84 fb       	bst	r24, 4
     818:	44 27       	eor	r20, r20
     81a:	40 f9       	bld	r20, 0
     81c:	6a 85       	ldd	r22, Y+10	; 0x0a
     81e:	89 85       	ldd	r24, Y+9	; 0x09
     820:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_5].port,gext_LCDConfig[DATA_5].pin,BIT_GET(data,5));
     824:	15 fb       	bst	r17, 5
     826:	44 27       	eor	r20, r20
     828:	40 f9       	bld	r20, 0
     82a:	6d 85       	ldd	r22, Y+13	; 0x0d
     82c:	8c 85       	ldd	r24, Y+12	; 0x0c
     82e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_6].port,gext_LCDConfig[DATA_6].pin,BIT_GET(data,6));
     832:	16 fb       	bst	r17, 6
     834:	44 27       	eor	r20, r20
     836:	40 f9       	bld	r20, 0
     838:	68 89       	ldd	r22, Y+16	; 0x10
     83a:	8f 85       	ldd	r24, Y+15	; 0x0f
     83c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_7].port,gext_LCDConfig[DATA_7].pin,BIT_GET(data,7));
     840:	41 2f       	mov	r20, r17
     842:	44 1f       	adc	r20, r20
     844:	44 27       	eor	r20, r20
     846:	44 1f       	adc	r20, r20
     848:	6b 89       	ldd	r22, Y+19	; 0x13
     84a:	8a 89       	ldd	r24, Y+18	; 0x12
     84c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	//turn RS ON for Data mode.
	WRITE_ONE(RS_SWITCH);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 95 02 	call	0x52a	; 0x52a <WRITE_ONE>
	//turn RW off so you can write.
	WRITE_ZERO(RW_SWITCH);
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	0e 94 86 02 	call	0x50c	; 0x50c <WRITE_ZERO>
	LCD_KICK ();
     85c:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_KICK>
	DIO_WritePIN(gext_LCDConfig[DATA_4].port,gext_LCDConfig[DATA_4].pin,BIT_GET(data,0));
     860:	41 2f       	mov	r20, r17
     862:	41 70       	andi	r20, 0x01	; 1
     864:	6a 85       	ldd	r22, Y+10	; 0x0a
     866:	89 85       	ldd	r24, Y+9	; 0x09
     868:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_5].port,gext_LCDConfig[DATA_5].pin,BIT_GET(data,1));
     86c:	11 fb       	bst	r17, 1
     86e:	44 27       	eor	r20, r20
     870:	40 f9       	bld	r20, 0
     872:	6d 85       	ldd	r22, Y+13	; 0x0d
     874:	8c 85       	ldd	r24, Y+12	; 0x0c
     876:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_6].port,gext_LCDConfig[DATA_6].pin,BIT_GET(data,2));
     87a:	12 fb       	bst	r17, 2
     87c:	44 27       	eor	r20, r20
     87e:	40 f9       	bld	r20, 0
     880:	68 89       	ldd	r22, Y+16	; 0x10
     882:	8f 85       	ldd	r24, Y+15	; 0x0f
     884:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_7].port,gext_LCDConfig[DATA_7].pin,BIT_GET(data,3));
     888:	13 fb       	bst	r17, 3
     88a:	44 27       	eor	r20, r20
     88c:	40 f9       	bld	r20, 0
     88e:	6b 89       	ldd	r22, Y+19	; 0x13
     890:	8a 89       	ldd	r24, Y+18	; 0x12
     892:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	//turn RS ON for Data mode.
	WRITE_ONE(RS_SWITCH);
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 95 02 	call	0x52a	; 0x52a <WRITE_ONE>
	//turn RW off so you can write.
	WRITE_ZERO(RW_SWITCH);
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	0e 94 86 02 	call	0x50c	; 0x50c <WRITE_ZERO>
	LCD_KICK ();
     8a2:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_KICK>
	#endif

	return E_OK;
}
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	08 95       	ret

000008b0 <LCD_WRITE_STRING>:

E_STATUS LCD_WRITE_STRING(uint8_t *data)
{
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	8c 01       	movw	r16, r24
	if (NULL_PTR == data)
     8ba:	89 2b       	or	r24, r25
     8bc:	01 f1       	breq	.+64     	; 0x8fe <LCD_WRITE_STRING+0x4e>
     8be:	c0 e0       	ldi	r28, 0x00	; 0
     8c0:	18 c0       	rjmp	.+48     	; 0x8f2 <LCD_WRITE_STRING+0x42>

	/* To count how much char on the line (it should be 16 char only) */
	uint8_t count = LCD_BEGIN;
	while((*data > LCD_BEGIN))
	{
		count++;
     8c2:	d1 e0       	ldi	r29, 0x01	; 1
     8c4:	dc 0f       	add	r29, r28
		LCD_WRITE_CHAR(*data++);
     8c6:	0f 5f       	subi	r16, 0xFF	; 255
     8c8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ca:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_WRITE_CHAR>
		if (count == FIRST_ROW_LIMIT) // go to the second line
     8ce:	d0 31       	cpi	r29, 0x10	; 16
     8d0:	29 f4       	brne	.+10     	; 0x8dc <LCD_WRITE_STRING+0x2c>
		{
			LCD_GOTO_XY(SECOND_ROW, LCD_BEGIN); //Second line position zero
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_GOTO_XY>
     8da:	0a c0       	rjmp	.+20     	; 0x8f0 <LCD_WRITE_STRING+0x40>
		}
		else if ((count == SECOND_ROW_LIMIT) || (count == SECOND_ROW_LIMIT + 1)) // clear screen and show again
     8dc:	cf 51       	subi	r28, 0x1F	; 31
     8de:	c2 30       	cpi	r28, 0x02	; 2
     8e0:	38 f4       	brcc	.+14     	; 0x8f0 <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
     8e2:	0e 94 01 03 	call	0x602	; 0x602 <LCD_clear_screen>
			LCD_GOTO_XY(FIRST_ROW,LCD_BEGIN); //First Line position zero
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	0e 94 06 03 	call	0x60c	; 0x60c <LCD_GOTO_XY>
			count = LCD_BEGIN ;
     8ee:	d0 e0       	ldi	r29, 0x00	; 0
     8f0:	cd 2f       	mov	r28, r29
		return E_NOK;
	}

	/* To count how much char on the line (it should be 16 char only) */
	uint8_t count = LCD_BEGIN;
	while((*data > LCD_BEGIN))
     8f2:	f8 01       	movw	r30, r16
     8f4:	80 81       	ld	r24, Z
     8f6:	81 11       	cpse	r24, r1
     8f8:	e4 cf       	rjmp	.-56     	; 0x8c2 <LCD_WRITE_STRING+0x12>
			LCD_clear_screen();
			LCD_GOTO_XY(FIRST_ROW,LCD_BEGIN); //First Line position zero
			count = LCD_BEGIN ;
		}
	}
	return E_OK;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <LCD_WRITE_STRING+0x50>

E_STATUS LCD_WRITE_STRING(uint8_t *data)
{
	if (NULL_PTR == data)
	{
		return E_NOK;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
			LCD_GOTO_XY(FIRST_ROW,LCD_BEGIN); //First Line position zero
			count = LCD_BEGIN ;
		}
	}
	return E_OK;
}
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <LCD_WRITE_NUMBER>:

E_STATUS LCD_WRITE_NUMBER(float32_t data)
{
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	2a 97       	sbiw	r28, 0x0a	; 10
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	6b 01       	movw	r12, r22
     928:	7c 01       	movw	r14, r24
	if (ZERO == data)
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	a9 01       	movw	r20, r18
     930:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__cmpsf2>
     934:	81 11       	cpse	r24, r1
     936:	05 c0       	rjmp	.+10     	; 0x942 <LCD_WRITE_NUMBER+0x38>
	{
		LCD_WRITE_CHAR(0x30);
     938:	80 e3       	ldi	r24, 0x30	; 48
     93a:	0e 94 05 04 	call	0x80a	; 0x80a <LCD_WRITE_CHAR>
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	24 c0       	rjmp	.+72     	; 0x98a <LCD_WRITE_NUMBER+0x80>
{
	if (ZERO == data)
	{
		LCD_WRITE_CHAR(0x30);
	}
	else if ((data < 3.402823E+38) && (data > 0))
     942:	2d ef       	ldi	r18, 0xFD	; 253
     944:	3f ef       	ldi	r19, 0xFF	; 255
     946:	4f e7       	ldi	r20, 0x7F	; 127
     948:	5f e7       	ldi	r21, 0x7F	; 127
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__cmpsf2>
     952:	88 23       	and	r24, r24
     954:	bc f4       	brge	.+46     	; 0x984 <LCD_WRITE_NUMBER+0x7a>
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	a9 01       	movw	r20, r18
     95c:	c7 01       	movw	r24, r14
     95e:	b6 01       	movw	r22, r12
     960:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__gesf2>
     964:	18 16       	cp	r1, r24
     966:	84 f4       	brge	.+32     	; 0x988 <LCD_WRITE_NUMBER+0x7e>
	{
		uint8_t lcd_display[MAX_CHAR_INT];
		ftos(data, lcd_display, 0);
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	ae 01       	movw	r20, r28
     96c:	4f 5f       	subi	r20, 0xFF	; 255
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	c7 01       	movw	r24, r14
     972:	b6 01       	movw	r22, r12
     974:	0e 94 1b 0b 	call	0x1636	; 0x1636 <ftos>
		LCD_WRITE_STRING(lcd_display);
     978:	ce 01       	movw	r24, r28
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_WRITE_STRING>
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     980:	81 e0       	ldi	r24, 0x01	; 1
	if (ZERO == data)
	{
		LCD_WRITE_CHAR(0x30);
	}
	else if ((data < 3.402823E+38) && (data > 0))
	{
     982:	03 c0       	rjmp	.+6      	; 0x98a <LCD_WRITE_NUMBER+0x80>
		ftos(data, lcd_display, 0);
		LCD_WRITE_STRING(lcd_display);
	}
	else
	{
		return E_NOK;
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	01 c0       	rjmp	.+2      	; 0x98a <LCD_WRITE_NUMBER+0x80>
     988:	80 e0       	ldi	r24, 0x00	; 0
	}
	return E_OK;
}
     98a:	2a 96       	adiw	r28, 0x0a	; 10
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	de bf       	out	0x3e, r29	; 62
     992:	0f be       	out	0x3f, r0	; 63
     994:	cd bf       	out	0x3d, r28	; 61
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	08 95       	ret

000009a4 <DC_MotorInit>:
*  Author: Ayman
*/

#include "DC_Motor.h"
Motor_ERROR_state_t DC_MotorInit(uint8_t Motor)
{
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
	if(!((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT)))
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	60 f5       	brcc	.+88     	; 0xa08 <DC_MotorInit+0x64>
	{
		return E_NOK;
	}
	else
	{
		switch (Motor)
     9b0:	88 23       	and	r24, r24
     9b2:	19 f0       	breq	.+6      	; 0x9ba <DC_MotorInit+0x16>
     9b4:	81 30       	cpi	r24, 0x01	; 1
     9b6:	a1 f0       	breq	.+40     	; 0x9e0 <DC_MotorInit+0x3c>
     9b8:	29 c0       	rjmp	.+82     	; 0xa0c <DC_MotorInit+0x68>
		{
			case Motor_RIGHT:
			configs.port = Motor_RIGHT_FORWARD_PORT;
     9ba:	c2 ea       	ldi	r28, 0xA2	; 162
     9bc:	d0 e0       	ldi	r29, 0x00	; 0
     9be:	13 e0       	ldi	r17, 0x03	; 3
     9c0:	18 83       	st	Y, r17
			configs.pin = Motor_RIGHT_FORWARD_PIN;
     9c2:	19 83       	std	Y+1, r17	; 0x01
			configs.dir = OUTPUT;
     9c4:	01 e0       	ldi	r16, 0x01	; 1
     9c6:	0a 83       	std	Y+2, r16	; 0x02
			DIO_Init(&configs);
     9c8:	ce 01       	movw	r24, r28
     9ca:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
			configs.port = Motor_RIGHT_BACKWARD_PORT;
     9ce:	18 83       	st	Y, r17
			configs.pin = Motor_RIGHT_BACKWARD_PIN;
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	89 83       	std	Y+1, r24	; 0x01
			configs.dir = OUTPUT;
     9d4:	0a 83       	std	Y+2, r16	; 0x02
			DIO_Init(&configs);
     9d6:	ce 01       	movw	r24, r28
     9d8:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
			DIO_Init(&configs);
			break;
		}
	}
	
	return E_OK;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
			DIO_Init(&configs);
			configs.port = Motor_RIGHT_BACKWARD_PORT;
			configs.pin = Motor_RIGHT_BACKWARD_PIN;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
     9de:	17 c0       	rjmp	.+46     	; 0xa0e <DC_MotorInit+0x6a>
			case Motor_LEFT:
			configs.port = Motor_LEFT_FORWARD_PORT;
     9e0:	c2 ea       	ldi	r28, 0xA2	; 162
     9e2:	d0 e0       	ldi	r29, 0x00	; 0
     9e4:	03 e0       	ldi	r16, 0x03	; 3
     9e6:	08 83       	st	Y, r16
			configs.pin = Motor_LEFT_FORWARD_PIN;
     9e8:	87 e0       	ldi	r24, 0x07	; 7
     9ea:	89 83       	std	Y+1, r24	; 0x01
			configs.dir = OUTPUT;
     9ec:	11 e0       	ldi	r17, 0x01	; 1
     9ee:	1a 83       	std	Y+2, r17	; 0x02
			DIO_Init(&configs);
     9f0:	ce 01       	movw	r24, r28
     9f2:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
			configs.port = Motor_LEFT_BACKWARD_PORT;
     9f6:	08 83       	st	Y, r16
			configs.pin = Motor_LEFT_BACKWARD_PIN;
     9f8:	86 e0       	ldi	r24, 0x06	; 6
     9fa:	89 83       	std	Y+1, r24	; 0x01
			configs.dir = OUTPUT;
     9fc:	1a 83       	std	Y+2, r17	; 0x02
			DIO_Init(&configs);
     9fe:	ce 01       	movw	r24, r28
     a00:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
			break;
		}
	}
	
	return E_OK;
     a04:	81 e0       	ldi	r24, 0x01	; 1
			DIO_Init(&configs);
			configs.port = Motor_LEFT_BACKWARD_PORT;
			configs.pin = Motor_LEFT_BACKWARD_PIN;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
     a06:	03 c0       	rjmp	.+6      	; 0xa0e <DC_MotorInit+0x6a>
#include "DC_Motor.h"
Motor_ERROR_state_t DC_MotorInit(uint8_t Motor)
{
	if(!((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT)))
	{
		return E_NOK;
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <DC_MotorInit+0x6a>
			DIO_Init(&configs);
			break;
		}
	}
	
	return E_OK;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <DC_MotorStart>:
Motor_ERROR_state_t DC_MotorStart(uint8_t Motor,uint8_t Motor_speed,uint8_t Motor_Direction)
{
     a18:	cf 93       	push	r28
	
	if(!(((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT))&&((Motor_speed>=Motor_MIN_SPEED)&&(Motor_speed<=Motor_MAX_SPEED))
     a1a:	82 30       	cpi	r24, 0x02	; 2
     a1c:	08 f0       	brcs	.+2      	; 0xa20 <DC_MotorStart+0x8>
     a1e:	49 c0       	rjmp	.+146    	; 0xab2 <DC_MotorStart+0x9a>
     a20:	65 36       	cpi	r22, 0x65	; 101
     a22:	08 f0       	brcs	.+2      	; 0xa26 <DC_MotorStart+0xe>
     a24:	48 c0       	rjmp	.+144    	; 0xab6 <DC_MotorStart+0x9e>
     a26:	42 30       	cpi	r20, 0x02	; 2
     a28:	08 f0       	brcs	.+2      	; 0xa2c <DC_MotorStart+0x14>
     a2a:	47 c0       	rjmp	.+142    	; 0xaba <DC_MotorStart+0xa2>
     a2c:	c6 2f       	mov	r28, r22
	{
		return E_NOK;
	}
	else
	{
		switch (Motor)
     a2e:	88 23       	and	r24, r24
     a30:	19 f0       	breq	.+6      	; 0xa38 <DC_MotorStart+0x20>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	09 f1       	breq	.+66     	; 0xa78 <DC_MotorStart+0x60>
     a36:	43 c0       	rjmp	.+134    	; 0xabe <DC_MotorStart+0xa6>
		{
			case Motor_RIGHT:
			switch (Motor_Direction)
     a38:	44 23       	and	r20, r20
     a3a:	19 f0       	breq	.+6      	; 0xa42 <DC_MotorStart+0x2a>
     a3c:	41 30       	cpi	r20, 0x01	; 1
     a3e:	61 f0       	breq	.+24     	; 0xa58 <DC_MotorStart+0x40>
     a40:	15 c0       	rjmp	.+42     	; 0xa6c <DC_MotorStart+0x54>
			{
				case Motor_FORWARD:
				DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, LOW);
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	62 e0       	ldi	r22, 0x02	; 2
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
				DIO_WritePIN(Motor_RIGHT_FORWARD_PORT, Motor_RIGHT_FORWARD_PIN, HIGH);
     a4c:	41 e0       	ldi	r20, 0x01	; 1
     a4e:	63 e0       	ldi	r22, 0x03	; 3
     a50:	83 e0       	ldi	r24, 0x03	; 3
     a52:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
				break;
     a56:	0a c0       	rjmp	.+20     	; 0xa6c <DC_MotorStart+0x54>
				case Motor_BACKWARD:
				DIO_WritePIN(Motor_RIGHT_FORWARD_PORT, Motor_RIGHT_FORWARD_PIN, LOW);
     a58:	40 e0       	ldi	r20, 0x00	; 0
     a5a:	63 e0       	ldi	r22, 0x03	; 3
     a5c:	83 e0       	ldi	r24, 0x03	; 3
     a5e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
				DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, HIGH);
     a62:	41 e0       	ldi	r20, 0x01	; 1
     a64:	62 e0       	ldi	r22, 0x02	; 2
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
				break;
			}
			PWM_START(PWM_TIMER0, Motor_speed);
     a6c:	6c 2f       	mov	r22, r28
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <PWM_START>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE Motor LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     a74:	81 e0       	ldi	r24, 0x01	; 1
				DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, HIGH);
				break;
			}
			PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE Motor RIGHT PWM REQUIRED SPEED
			break;
     a76:	26 c0       	rjmp	.+76     	; 0xac4 <DC_MotorStart+0xac>
			case Motor_LEFT:
			switch (Motor_Direction)
     a78:	44 23       	and	r20, r20
     a7a:	19 f0       	breq	.+6      	; 0xa82 <DC_MotorStart+0x6a>
     a7c:	41 30       	cpi	r20, 0x01	; 1
     a7e:	69 f0       	breq	.+26     	; 0xa9a <DC_MotorStart+0x82>
     a80:	20 c0       	rjmp	.+64     	; 0xac2 <DC_MotorStart+0xaa>
			{
				case Motor_FORWARD:
				DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	66 e0       	ldi	r22, 0x06	; 6
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
				DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, HIGH);
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	67 e0       	ldi	r22, 0x07	; 7
     a90:	83 e0       	ldi	r24, 0x03	; 3
     a92:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE Motor LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     a96:	81 e0       	ldi	r24, 0x01	; 1
			switch (Motor_Direction)
			{
				case Motor_FORWARD:
				DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
				DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, HIGH);
				break;
     a98:	15 c0       	rjmp	.+42     	; 0xac4 <DC_MotorStart+0xac>
				case Motor_BACKWARD:
				DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	67 e0       	ldi	r22, 0x07	; 7
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
				DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, HIGH);
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	66 e0       	ldi	r22, 0x06	; 6
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE Motor LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     aae:	81 e0       	ldi	r24, 0x01	; 1
				DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, HIGH);
				break;
				case Motor_BACKWARD:
				DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
				DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, HIGH);
				break;
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <DC_MotorStart+0xac>
{
	
	if(!(((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT))&&((Motor_speed>=Motor_MIN_SPEED)&&(Motor_speed<=Motor_MAX_SPEED))
	&&((Motor_Direction>=Motor_FORWARD)&&(Motor_Direction<=Motor_BACKWARD))))
	{
		return E_NOK;
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <DC_MotorStart+0xac>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <DC_MotorStart+0xac>
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <DC_MotorStart+0xac>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE Motor LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <DC_MotorStart+0xac>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
}
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <DC_MotorStop>:
Motor_ERROR_state_t DC_MotorStop(uint8_t Motor)
{
	
	if(!((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT)))
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	e8 f4       	brcc	.+58     	; 0xb06 <DC_MotorStop+0x3e>
	{
		return E_NOK;
	}
	else
	{
		switch (Motor)
     acc:	88 23       	and	r24, r24
     ace:	19 f0       	breq	.+6      	; 0xad6 <DC_MotorStop+0xe>
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	69 f0       	breq	.+26     	; 0xaee <DC_MotorStop+0x26>
     ad4:	1a c0       	rjmp	.+52     	; 0xb0a <DC_MotorStop+0x42>
		{
			case Motor_RIGHT:
			DIO_WritePIN(Motor_RIGHT_FORWARD_PORT, Motor_RIGHT_FORWARD_PIN, LOW);
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	63 e0       	ldi	r22, 0x03	; 3
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
			DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, LOW);
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	62 e0       	ldi	r22, 0x02	; 2
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
			DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
			DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
			break;
		}
	}
	return E_OK;
     aea:	81 e0       	ldi	r24, 0x01	; 1
		switch (Motor)
		{
			case Motor_RIGHT:
			DIO_WritePIN(Motor_RIGHT_FORWARD_PORT, Motor_RIGHT_FORWARD_PIN, LOW);
			DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, LOW);
			break;
     aec:	08 95       	ret
			case Motor_LEFT:
			DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	67 e0       	ldi	r22, 0x07	; 7
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
			DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	66 e0       	ldi	r22, 0x06	; 6
     afc:	83 e0       	ldi	r24, 0x03	; 3
     afe:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
			break;
		}
	}
	return E_OK;
     b02:	81 e0       	ldi	r24, 0x01	; 1
			DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, LOW);
			break;
			case Motor_LEFT:
			DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
			DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
			break;
     b04:	08 95       	ret
Motor_ERROR_state_t DC_MotorStop(uint8_t Motor)
{
	
	if(!((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT)))
	{
		return E_NOK;
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	08 95       	ret
			DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
			DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
			break;
		}
	}
	return E_OK;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	08 95       	ret

00000b0e <ULTRASONIC_INIT>:
uint16_t g_timer1=0;
uint8_t g_tick=0;


E_STATUS ULTRASONIC_INIT(void)
{
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
	if(((ULTRASONIC_Trigger_PORT >= DIO_PORTA) && (ULTRASONIC_Trigger_PORT <= DIO_PORTD))
	&&((ULTRASONIC_Trigger_PIN>=PIN_0)&&(ULTRASONIC_Trigger_PIN<=PIN_7)))
	{
		configs.port = ULTRASONIC_Trigger_PORT;
     b14:	c2 ea       	ldi	r28, 0xA2	; 162
     b16:	d0 e0       	ldi	r29, 0x00	; 0
     b18:	11 e0       	ldi	r17, 0x01	; 1
     b1a:	18 83       	st	Y, r17
		configs.pin = ULTRASONIC_Trigger_PIN;
     b1c:	19 82       	std	Y+1, r1	; 0x01
		configs.dir = OUTPUT;
     b1e:	1a 83       	std	Y+2, r17	; 0x02
		DIO_Init(&configs);
     b20:	ce 01       	movw	r24, r28
     b22:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
		configs.port = ULTRASONIC_ECHO_PORT;
     b26:	18 83       	st	Y, r17
		configs.pin = ULTRASONIC_ECHO_PIN;
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	89 83       	std	Y+1, r24	; 0x01
		configs.dir = INPUT;
     b2c:	1a 82       	std	Y+2, r1	; 0x02
		DIO_Init(&configs);
     b2e:	ce 01       	movw	r24, r28
     b30:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
		external_interrupt_init(interrupt2,rising_edge);
     b34:	63 e0       	ldi	r22, 0x03	; 3
     b36:	82 e0       	ldi	r24, 0x02	; 2
     b38:	0e 94 9c 0c 	call	0x1938	; 0x1938 <external_interrupt_init>
	}
	else
	{
		return E_NOK;
	}
}
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ULTRASONIC_GetDist>:


E_STATUS ULTRASONIC_GetDist(ptr_float32_t distance)
{
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	ec 01       	movw	r28, r24
	
	DIO_WritePIN(ULTRASONIC_Trigger_PORT, ULTRASONIC_Trigger_PIN, LOW);
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	60 e0       	ldi	r22, 0x00	; 0
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));


void _delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	8a 95       	dec	r24
     b62:	f1 f7       	brne	.-4      	; 0xb60 <ULTRASONIC_GetDist+0x1a>
	_delay_us(2);
	DIO_WritePIN(ULTRASONIC_Trigger_PORT, ULTRASONIC_Trigger_PIN, HIGH);
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
     b6e:	8a e1       	ldi	r24, 0x1A	; 26
     b70:	8a 95       	dec	r24
     b72:	f1 f7       	brne	.-4      	; 0xb70 <ULTRASONIC_GetDist+0x2a>
	_delay_us(10);
	DIO_WritePIN(ULTRASONIC_Trigger_PORT, ULTRASONIC_Trigger_PIN, LOW);
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <DIO_WritePIN>
	/*(registerReading*time of tick*speed of sound)/2*/
	/*time of tick =1024/8000000=128*10^-6 S = 128Ms*/
	/*dist = (Reading * 128 * 0.034)/2*/
	*distance=g_timer1*2.176;
     b7e:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <g_timer1>
     b82:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <g_timer1+0x1>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__floatunsisf>
     b8e:	26 e9       	ldi	r18, 0x96	; 150
     b90:	33 e4       	ldi	r19, 0x43	; 67
     b92:	4b e0       	ldi	r20, 0x0B	; 11
     b94:	50 e4       	ldi	r21, 0x40	; 64
     b96:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__mulsf3>
     b9a:	6b 01       	movw	r12, r22
     b9c:	7c 01       	movw	r14, r24
     b9e:	68 83       	st	Y, r22
     ba0:	79 83       	std	Y+1, r23	; 0x01
     ba2:	8a 83       	std	Y+2, r24	; 0x02
     ba4:	9b 83       	std	Y+3, r25	; 0x03
	if (*distance >= 400)
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	48 ec       	ldi	r20, 0xC8	; 200
     bac:	53 e4       	ldi	r21, 0x43	; 67
     bae:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__gesf2>
     bb2:	88 23       	and	r24, r24
     bb4:	4c f0       	brlt	.+18     	; 0xbc8 <ULTRASONIC_GetDist+0x82>
	{
		*distance = 400;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	a8 ec       	ldi	r26, 0xC8	; 200
     bbc:	b3 e4       	ldi	r27, 0x43	; 67
     bbe:	88 83       	st	Y, r24
     bc0:	99 83       	std	Y+1, r25	; 0x01
     bc2:	aa 83       	std	Y+2, r26	; 0x02
     bc4:	bb 83       	std	Y+3, r27	; 0x03
     bc6:	12 c0       	rjmp	.+36     	; 0xbec <ULTRASONIC_GetDist+0xa6>
	}
	else if (*distance <= 2)
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e4       	ldi	r21, 0x40	; 64
     bd0:	c7 01       	movw	r24, r14
     bd2:	b6 01       	movw	r22, r12
     bd4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__cmpsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	44 f0       	brlt	.+16     	; 0xbec <ULTRASONIC_GetDist+0xa6>
	{
		*distance = ONE;
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a0 e8       	ldi	r26, 0x80	; 128
     be2:	bf e3       	ldi	r27, 0x3F	; 63
     be4:	88 83       	st	Y, r24
     be6:	99 83       	std	Y+1, r25	; 0x01
     be8:	aa 83       	std	Y+2, r26	; 0x02
     bea:	bb 83       	std	Y+3, r27	; 0x03
	}
	return E_OK;
	
}
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	08 95       	ret

00000bfc <__vector_3>:

ISR(INT2_vect)
{
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	2f 93       	push	r18
     c08:	3f 93       	push	r19
     c0a:	4f 93       	push	r20
     c0c:	5f 93       	push	r21
     c0e:	6f 93       	push	r22
     c10:	7f 93       	push	r23
     c12:	8f 93       	push	r24
     c14:	9f 93       	push	r25
     c16:	af 93       	push	r26
     c18:	bf 93       	push	r27
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
	g_tick++;
     c1e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <g_tick>
     c22:	8f 5f       	subi	r24, 0xFF	; 255
     c24:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <g_tick>
	if(g_tick==1)
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	89 f4       	brne	.+34     	; 0xc4e <__vector_3+0x52>
	{
		Timer_sint8_tSetTMRValue(TMR1_CHOICE, 0);
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	0e 94 8d 08 	call	0x111a	; 0x111a <Timer_sint8_tSetTMRValue>
		Timer_sint8_tInit(TMR1_CHOICE, NORMAL, PRS1024);
     c34:	26 e0       	ldi	r18, 0x06	; 6
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	0e 94 4c 06 	call	0xc98	; 0xc98 <Timer_sint8_tInit>
		external_interrupt_init(interrupt2,falling_edge);
     c44:	62 e0       	ldi	r22, 0x02	; 2
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	0e 94 9c 0c 	call	0x1938	; 0x1938 <external_interrupt_init>
     c4c:	10 c0       	rjmp	.+32     	; 0xc6e <__vector_3+0x72>
	}
	else if(g_tick==2)
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	71 f4       	brne	.+28     	; 0xc6e <__vector_3+0x72>
	{
		Timer_sint32_tTMRValue(TMR1_CHOICE, &g_timer1);
     c52:	63 e9       	ldi	r22, 0x93	; 147
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	0e 94 17 09 	call	0x122e	; 0x122e <Timer_sint32_tTMRValue>
		external_interrupt_init(interrupt2,rising_edge);
     c5c:	63 e0       	ldi	r22, 0x03	; 3
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	0e 94 9c 0c 	call	0x1938	; 0x1938 <external_interrupt_init>
		Timer_sint8_tStop(TMR1_CHOICE);
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	0e 94 34 09 	call	0x1268	; 0x1268 <Timer_sint8_tStop>
		g_tick=0;
     c6a:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <g_tick>
	}
	else
	{
		
	}
}
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <GIE_voidEnable>:
#include "GIE_int.h"

/* Description : Enable global interrupt	*/
void GIE_voidEnable(void)
{
	SET_BIT(SREG,GIE_uint8_t_BIT_INDEX);
     c90:	8f b7       	in	r24, 0x3f	; 63
     c92:	80 68       	ori	r24, 0x80	; 128
     c94:	8f bf       	out	0x3f, r24	; 63
     c96:	08 95       	ret

00000c98 <Timer_sint8_tInit>:
			break;
		}
		break;
	}
	return E_NOK;
}
     c98:	83 30       	cpi	r24, 0x03	; 3
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <Timer_sint8_tInit+0x6>
     c9c:	30 c2       	rjmp	.+1120   	; 0x10fe <Timer_sint8_tInit+0x466>
     c9e:	62 31       	cpi	r22, 0x12	; 18
     ca0:	08 f0       	brcs	.+2      	; 0xca4 <Timer_sint8_tInit+0xc>
     ca2:	2f c2       	rjmp	.+1118   	; 0x1102 <Timer_sint8_tInit+0x46a>
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	09 f4       	brne	.+2      	; 0xcaa <Timer_sint8_tInit+0x12>
     ca8:	8c c0       	rjmp	.+280    	; 0xdc2 <Timer_sint8_tInit+0x12a>
     caa:	20 f0       	brcs	.+8      	; 0xcb4 <Timer_sint8_tInit+0x1c>
     cac:	82 30       	cpi	r24, 0x02	; 2
     cae:	09 f4       	brne	.+2      	; 0xcb2 <Timer_sint8_tInit+0x1a>
     cb0:	ac c1       	rjmp	.+856    	; 0x100a <Timer_sint8_tInit+0x372>
     cb2:	29 c2       	rjmp	.+1106   	; 0x1106 <Timer_sint8_tInit+0x46e>
     cb4:	61 30       	cpi	r22, 0x01	; 1
     cb6:	69 f0       	breq	.+26     	; 0xcd2 <Timer_sint8_tInit+0x3a>
     cb8:	28 f0       	brcs	.+10     	; 0xcc4 <Timer_sint8_tInit+0x2c>
     cba:	62 30       	cpi	r22, 0x02	; 2
     cbc:	89 f0       	breq	.+34     	; 0xce0 <Timer_sint8_tInit+0x48>
     cbe:	63 30       	cpi	r22, 0x03	; 3
     cc0:	b1 f0       	breq	.+44     	; 0xcee <Timer_sint8_tInit+0x56>
     cc2:	23 c2       	rjmp	.+1094   	; 0x110a <Timer_sint8_tInit+0x472>
     cc4:	83 b7       	in	r24, 0x33	; 51
     cc6:	87 7f       	andi	r24, 0xF7	; 247
     cc8:	83 bf       	out	0x33, r24	; 51
     cca:	83 b7       	in	r24, 0x33	; 51
     ccc:	8f 7b       	andi	r24, 0xBF	; 191
     cce:	83 bf       	out	0x33, r24	; 51
     cd0:	14 c0       	rjmp	.+40     	; 0xcfa <Timer_sint8_tInit+0x62>
     cd2:	83 b7       	in	r24, 0x33	; 51
     cd4:	87 7f       	andi	r24, 0xF7	; 247
     cd6:	83 bf       	out	0x33, r24	; 51
     cd8:	83 b7       	in	r24, 0x33	; 51
     cda:	80 64       	ori	r24, 0x40	; 64
     cdc:	83 bf       	out	0x33, r24	; 51
     cde:	0d c0       	rjmp	.+26     	; 0xcfa <Timer_sint8_tInit+0x62>
     ce0:	83 b7       	in	r24, 0x33	; 51
     ce2:	88 60       	ori	r24, 0x08	; 8
     ce4:	83 bf       	out	0x33, r24	; 51
     ce6:	83 b7       	in	r24, 0x33	; 51
     ce8:	8f 7b       	andi	r24, 0xBF	; 191
     cea:	83 bf       	out	0x33, r24	; 51
     cec:	06 c0       	rjmp	.+12     	; 0xcfa <Timer_sint8_tInit+0x62>
     cee:	83 b7       	in	r24, 0x33	; 51
     cf0:	88 60       	ori	r24, 0x08	; 8
     cf2:	83 bf       	out	0x33, r24	; 51
     cf4:	83 b7       	in	r24, 0x33	; 51
     cf6:	80 64       	ori	r24, 0x40	; 64
     cf8:	83 bf       	out	0x33, r24	; 51
     cfa:	23 30       	cpi	r18, 0x03	; 3
     cfc:	31 05       	cpc	r19, r1
     cfe:	41 05       	cpc	r20, r1
     d00:	51 05       	cpc	r21, r1
     d02:	99 f1       	breq	.+102    	; 0xd6a <Timer_sint8_tInit+0xd2>
     d04:	58 f4       	brcc	.+22     	; 0xd1c <Timer_sint8_tInit+0x84>
     d06:	21 15       	cp	r18, r1
     d08:	31 05       	cpc	r19, r1
     d0a:	41 05       	cpc	r20, r1
     d0c:	51 05       	cpc	r21, r1
     d0e:	b9 f0       	breq	.+46     	; 0xd3e <Timer_sint8_tInit+0xa6>
     d10:	21 30       	cpi	r18, 0x01	; 1
     d12:	31 05       	cpc	r19, r1
     d14:	41 05       	cpc	r20, r1
     d16:	51 05       	cpc	r21, r1
     d18:	e9 f0       	breq	.+58     	; 0xd54 <Timer_sint8_tInit+0xbc>
     d1a:	f9 c1       	rjmp	.+1010   	; 0x110e <Timer_sint8_tInit+0x476>
     d1c:	26 30       	cpi	r18, 0x06	; 6
     d1e:	31 05       	cpc	r19, r1
     d20:	41 05       	cpc	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	c1 f1       	breq	.+112    	; 0xd96 <Timer_sint8_tInit+0xfe>
     d26:	27 30       	cpi	r18, 0x07	; 7
     d28:	31 05       	cpc	r19, r1
     d2a:	41 05       	cpc	r20, r1
     d2c:	51 05       	cpc	r21, r1
     d2e:	f1 f1       	breq	.+124    	; 0xdac <Timer_sint8_tInit+0x114>
     d30:	25 30       	cpi	r18, 0x05	; 5
     d32:	31 05       	cpc	r19, r1
     d34:	41 05       	cpc	r20, r1
     d36:	51 05       	cpc	r21, r1
     d38:	09 f0       	breq	.+2      	; 0xd3c <Timer_sint8_tInit+0xa4>
     d3a:	e9 c1       	rjmp	.+978    	; 0x110e <Timer_sint8_tInit+0x476>
     d3c:	21 c0       	rjmp	.+66     	; 0xd80 <Timer_sint8_tInit+0xe8>
     d3e:	83 b7       	in	r24, 0x33	; 51
     d40:	81 60       	ori	r24, 0x01	; 1
     d42:	83 bf       	out	0x33, r24	; 51
     d44:	83 b7       	in	r24, 0x33	; 51
     d46:	8d 7f       	andi	r24, 0xFD	; 253
     d48:	83 bf       	out	0x33, r24	; 51
     d4a:	83 b7       	in	r24, 0x33	; 51
     d4c:	8b 7f       	andi	r24, 0xFB	; 251
     d4e:	83 bf       	out	0x33, r24	; 51
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	08 95       	ret
     d54:	83 b7       	in	r24, 0x33	; 51
     d56:	8e 7f       	andi	r24, 0xFE	; 254
     d58:	83 bf       	out	0x33, r24	; 51
     d5a:	83 b7       	in	r24, 0x33	; 51
     d5c:	82 60       	ori	r24, 0x02	; 2
     d5e:	83 bf       	out	0x33, r24	; 51
     d60:	83 b7       	in	r24, 0x33	; 51
     d62:	8b 7f       	andi	r24, 0xFB	; 251
     d64:	83 bf       	out	0x33, r24	; 51
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	08 95       	ret
     d6a:	83 b7       	in	r24, 0x33	; 51
     d6c:	8e 7f       	andi	r24, 0xFE	; 254
     d6e:	83 bf       	out	0x33, r24	; 51
     d70:	83 b7       	in	r24, 0x33	; 51
     d72:	82 60       	ori	r24, 0x02	; 2
     d74:	83 bf       	out	0x33, r24	; 51
     d76:	83 b7       	in	r24, 0x33	; 51
     d78:	84 60       	ori	r24, 0x04	; 4
     d7a:	83 bf       	out	0x33, r24	; 51
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	08 95       	ret
     d80:	83 b7       	in	r24, 0x33	; 51
     d82:	8e 7f       	andi	r24, 0xFE	; 254
     d84:	83 bf       	out	0x33, r24	; 51
     d86:	83 b7       	in	r24, 0x33	; 51
     d88:	8d 7f       	andi	r24, 0xFD	; 253
     d8a:	83 bf       	out	0x33, r24	; 51
     d8c:	83 b7       	in	r24, 0x33	; 51
     d8e:	84 60       	ori	r24, 0x04	; 4
     d90:	83 bf       	out	0x33, r24	; 51
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	08 95       	ret
     d96:	83 b7       	in	r24, 0x33	; 51
     d98:	81 60       	ori	r24, 0x01	; 1
     d9a:	83 bf       	out	0x33, r24	; 51
     d9c:	83 b7       	in	r24, 0x33	; 51
     d9e:	8d 7f       	andi	r24, 0xFD	; 253
     da0:	83 bf       	out	0x33, r24	; 51
     da2:	83 b7       	in	r24, 0x33	; 51
     da4:	84 60       	ori	r24, 0x04	; 4
     da6:	83 bf       	out	0x33, r24	; 51
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	08 95       	ret
     dac:	83 b7       	in	r24, 0x33	; 51
     dae:	8e 7f       	andi	r24, 0xFE	; 254
     db0:	83 bf       	out	0x33, r24	; 51
     db2:	83 b7       	in	r24, 0x33	; 51
     db4:	8d 7f       	andi	r24, 0xFD	; 253
     db6:	83 bf       	out	0x33, r24	; 51
     db8:	83 b7       	in	r24, 0x33	; 51
     dba:	8b 7f       	andi	r24, 0xFB	; 251
     dbc:	83 bf       	out	0x33, r24	; 51
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	08 95       	ret
     dc2:	86 2f       	mov	r24, r22
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	82 31       	cpi	r24, 0x12	; 18
     dc8:	91 05       	cpc	r25, r1
     dca:	08 f0       	brcs	.+2      	; 0xdce <Timer_sint8_tInit+0x136>
     dcc:	ba c0       	rjmp	.+372    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     dce:	fc 01       	movw	r30, r24
     dd0:	e6 5d       	subi	r30, 0xD6	; 214
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__tablejump2__>
     dd8:	8f b5       	in	r24, 0x2f	; 47
     dda:	8e 7f       	andi	r24, 0xFE	; 254
     ddc:	8f bd       	out	0x2f, r24	; 47
     dde:	8f b5       	in	r24, 0x2f	; 47
     de0:	8d 7f       	andi	r24, 0xFD	; 253
     de2:	8f bd       	out	0x2f, r24	; 47
     de4:	8e b5       	in	r24, 0x2e	; 46
     de6:	87 7f       	andi	r24, 0xF7	; 247
     de8:	8e bd       	out	0x2e, r24	; 46
     dea:	8e b5       	in	r24, 0x2e	; 46
     dec:	8f 7e       	andi	r24, 0xEF	; 239
     dee:	8e bd       	out	0x2e, r24	; 46
     df0:	a8 c0       	rjmp	.+336    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     df2:	8f b5       	in	r24, 0x2f	; 47
     df4:	81 60       	ori	r24, 0x01	; 1
     df6:	8f bd       	out	0x2f, r24	; 47
     df8:	8f b5       	in	r24, 0x2f	; 47
     dfa:	8d 7f       	andi	r24, 0xFD	; 253
     dfc:	8f bd       	out	0x2f, r24	; 47
     dfe:	8e b5       	in	r24, 0x2e	; 46
     e00:	87 7f       	andi	r24, 0xF7	; 247
     e02:	8e bd       	out	0x2e, r24	; 46
     e04:	8e b5       	in	r24, 0x2e	; 46
     e06:	8f 7e       	andi	r24, 0xEF	; 239
     e08:	8e bd       	out	0x2e, r24	; 46
     e0a:	9b c0       	rjmp	.+310    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     e0c:	8f b5       	in	r24, 0x2f	; 47
     e0e:	8e 7f       	andi	r24, 0xFE	; 254
     e10:	8f bd       	out	0x2f, r24	; 47
     e12:	8f b5       	in	r24, 0x2f	; 47
     e14:	82 60       	ori	r24, 0x02	; 2
     e16:	8f bd       	out	0x2f, r24	; 47
     e18:	8e b5       	in	r24, 0x2e	; 46
     e1a:	87 7f       	andi	r24, 0xF7	; 247
     e1c:	8e bd       	out	0x2e, r24	; 46
     e1e:	8e b5       	in	r24, 0x2e	; 46
     e20:	8f 7e       	andi	r24, 0xEF	; 239
     e22:	8e bd       	out	0x2e, r24	; 46
     e24:	8e c0       	rjmp	.+284    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     e26:	8f b5       	in	r24, 0x2f	; 47
     e28:	81 60       	ori	r24, 0x01	; 1
     e2a:	8f bd       	out	0x2f, r24	; 47
     e2c:	8f b5       	in	r24, 0x2f	; 47
     e2e:	82 60       	ori	r24, 0x02	; 2
     e30:	8f bd       	out	0x2f, r24	; 47
     e32:	8e b5       	in	r24, 0x2e	; 46
     e34:	87 7f       	andi	r24, 0xF7	; 247
     e36:	8e bd       	out	0x2e, r24	; 46
     e38:	8e b5       	in	r24, 0x2e	; 46
     e3a:	8f 7e       	andi	r24, 0xEF	; 239
     e3c:	8e bd       	out	0x2e, r24	; 46
     e3e:	81 c0       	rjmp	.+258    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     e40:	8f b5       	in	r24, 0x2f	; 47
     e42:	8e 7f       	andi	r24, 0xFE	; 254
     e44:	8f bd       	out	0x2f, r24	; 47
     e46:	8f b5       	in	r24, 0x2f	; 47
     e48:	8d 7f       	andi	r24, 0xFD	; 253
     e4a:	8f bd       	out	0x2f, r24	; 47
     e4c:	8e b5       	in	r24, 0x2e	; 46
     e4e:	88 60       	ori	r24, 0x08	; 8
     e50:	8e bd       	out	0x2e, r24	; 46
     e52:	8e b5       	in	r24, 0x2e	; 46
     e54:	8f 7e       	andi	r24, 0xEF	; 239
     e56:	8e bd       	out	0x2e, r24	; 46
     e58:	74 c0       	rjmp	.+232    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     e5a:	8f b5       	in	r24, 0x2f	; 47
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	8f bd       	out	0x2f, r24	; 47
     e60:	8f b5       	in	r24, 0x2f	; 47
     e62:	8d 7f       	andi	r24, 0xFD	; 253
     e64:	8f bd       	out	0x2f, r24	; 47
     e66:	8e b5       	in	r24, 0x2e	; 46
     e68:	88 60       	ori	r24, 0x08	; 8
     e6a:	8e bd       	out	0x2e, r24	; 46
     e6c:	8e b5       	in	r24, 0x2e	; 46
     e6e:	8f 7e       	andi	r24, 0xEF	; 239
     e70:	8e bd       	out	0x2e, r24	; 46
     e72:	67 c0       	rjmp	.+206    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     e74:	8f b5       	in	r24, 0x2f	; 47
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	8f bd       	out	0x2f, r24	; 47
     e7a:	8f b5       	in	r24, 0x2f	; 47
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	8f bd       	out	0x2f, r24	; 47
     e80:	8e b5       	in	r24, 0x2e	; 46
     e82:	88 60       	ori	r24, 0x08	; 8
     e84:	8e bd       	out	0x2e, r24	; 46
     e86:	8e b5       	in	r24, 0x2e	; 46
     e88:	8f 7e       	andi	r24, 0xEF	; 239
     e8a:	8e bd       	out	0x2e, r24	; 46
     e8c:	5a c0       	rjmp	.+180    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     e8e:	8f b5       	in	r24, 0x2f	; 47
     e90:	81 60       	ori	r24, 0x01	; 1
     e92:	8f bd       	out	0x2f, r24	; 47
     e94:	8f b5       	in	r24, 0x2f	; 47
     e96:	82 60       	ori	r24, 0x02	; 2
     e98:	8f bd       	out	0x2f, r24	; 47
     e9a:	8e b5       	in	r24, 0x2e	; 46
     e9c:	88 60       	ori	r24, 0x08	; 8
     e9e:	8e bd       	out	0x2e, r24	; 46
     ea0:	8e b5       	in	r24, 0x2e	; 46
     ea2:	8f 7e       	andi	r24, 0xEF	; 239
     ea4:	8e bd       	out	0x2e, r24	; 46
     ea6:	4d c0       	rjmp	.+154    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     ea8:	8f b5       	in	r24, 0x2f	; 47
     eaa:	8e 7f       	andi	r24, 0xFE	; 254
     eac:	8f bd       	out	0x2f, r24	; 47
     eae:	8f b5       	in	r24, 0x2f	; 47
     eb0:	8d 7f       	andi	r24, 0xFD	; 253
     eb2:	8f bd       	out	0x2f, r24	; 47
     eb4:	8e b5       	in	r24, 0x2e	; 46
     eb6:	87 7f       	andi	r24, 0xF7	; 247
     eb8:	8e bd       	out	0x2e, r24	; 46
     eba:	8e b5       	in	r24, 0x2e	; 46
     ebc:	80 61       	ori	r24, 0x10	; 16
     ebe:	8e bd       	out	0x2e, r24	; 46
     ec0:	40 c0       	rjmp	.+128    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     ec2:	8f b5       	in	r24, 0x2f	; 47
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	8f bd       	out	0x2f, r24	; 47
     ec8:	8f b5       	in	r24, 0x2f	; 47
     eca:	8d 7f       	andi	r24, 0xFD	; 253
     ecc:	8f bd       	out	0x2f, r24	; 47
     ece:	8e b5       	in	r24, 0x2e	; 46
     ed0:	87 7f       	andi	r24, 0xF7	; 247
     ed2:	8e bd       	out	0x2e, r24	; 46
     ed4:	8e b5       	in	r24, 0x2e	; 46
     ed6:	80 61       	ori	r24, 0x10	; 16
     ed8:	8e bd       	out	0x2e, r24	; 46
     eda:	33 c0       	rjmp	.+102    	; 0xf42 <Timer_sint8_tInit+0x2aa>
     edc:	8f b5       	in	r24, 0x2f	; 47
     ede:	81 60       	ori	r24, 0x01	; 1
     ee0:	8f bd       	out	0x2f, r24	; 47
     ee2:	8f b5       	in	r24, 0x2f	; 47
     ee4:	82 60       	ori	r24, 0x02	; 2
     ee6:	8f bd       	out	0x2f, r24	; 47
     ee8:	8e b5       	in	r24, 0x2e	; 46
     eea:	87 7f       	andi	r24, 0xF7	; 247
     eec:	8e bd       	out	0x2e, r24	; 46
     eee:	8e b5       	in	r24, 0x2e	; 46
     ef0:	80 61       	ori	r24, 0x10	; 16
     ef2:	8e bd       	out	0x2e, r24	; 46
     ef4:	26 c0       	rjmp	.+76     	; 0xf42 <Timer_sint8_tInit+0x2aa>
     ef6:	8f b5       	in	r24, 0x2f	; 47
     ef8:	8e 7f       	andi	r24, 0xFE	; 254
     efa:	8f bd       	out	0x2f, r24	; 47
     efc:	8f b5       	in	r24, 0x2f	; 47
     efe:	8d 7f       	andi	r24, 0xFD	; 253
     f00:	8f bd       	out	0x2f, r24	; 47
     f02:	8e b5       	in	r24, 0x2e	; 46
     f04:	88 60       	ori	r24, 0x08	; 8
     f06:	8e bd       	out	0x2e, r24	; 46
     f08:	8e b5       	in	r24, 0x2e	; 46
     f0a:	80 61       	ori	r24, 0x10	; 16
     f0c:	8e bd       	out	0x2e, r24	; 46
     f0e:	19 c0       	rjmp	.+50     	; 0xf42 <Timer_sint8_tInit+0x2aa>
     f10:	8f b5       	in	r24, 0x2f	; 47
     f12:	8e 7f       	andi	r24, 0xFE	; 254
     f14:	8f bd       	out	0x2f, r24	; 47
     f16:	8f b5       	in	r24, 0x2f	; 47
     f18:	82 60       	ori	r24, 0x02	; 2
     f1a:	8f bd       	out	0x2f, r24	; 47
     f1c:	8e b5       	in	r24, 0x2e	; 46
     f1e:	88 60       	ori	r24, 0x08	; 8
     f20:	8e bd       	out	0x2e, r24	; 46
     f22:	8e b5       	in	r24, 0x2e	; 46
     f24:	80 61       	ori	r24, 0x10	; 16
     f26:	8e bd       	out	0x2e, r24	; 46
     f28:	0c c0       	rjmp	.+24     	; 0xf42 <Timer_sint8_tInit+0x2aa>
     f2a:	8f b5       	in	r24, 0x2f	; 47
     f2c:	81 60       	ori	r24, 0x01	; 1
     f2e:	8f bd       	out	0x2f, r24	; 47
     f30:	8f b5       	in	r24, 0x2f	; 47
     f32:	82 60       	ori	r24, 0x02	; 2
     f34:	8f bd       	out	0x2f, r24	; 47
     f36:	8e b5       	in	r24, 0x2e	; 46
     f38:	88 60       	ori	r24, 0x08	; 8
     f3a:	8e bd       	out	0x2e, r24	; 46
     f3c:	8e b5       	in	r24, 0x2e	; 46
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	8e bd       	out	0x2e, r24	; 46
     f42:	23 30       	cpi	r18, 0x03	; 3
     f44:	31 05       	cpc	r19, r1
     f46:	41 05       	cpc	r20, r1
     f48:	51 05       	cpc	r21, r1
     f4a:	99 f1       	breq	.+102    	; 0xfb2 <Timer_sint8_tInit+0x31a>
     f4c:	58 f4       	brcc	.+22     	; 0xf64 <Timer_sint8_tInit+0x2cc>
     f4e:	21 15       	cp	r18, r1
     f50:	31 05       	cpc	r19, r1
     f52:	41 05       	cpc	r20, r1
     f54:	51 05       	cpc	r21, r1
     f56:	b9 f0       	breq	.+46     	; 0xf86 <Timer_sint8_tInit+0x2ee>
     f58:	21 30       	cpi	r18, 0x01	; 1
     f5a:	31 05       	cpc	r19, r1
     f5c:	41 05       	cpc	r20, r1
     f5e:	51 05       	cpc	r21, r1
     f60:	e9 f0       	breq	.+58     	; 0xf9c <Timer_sint8_tInit+0x304>
     f62:	d7 c0       	rjmp	.+430    	; 0x1112 <Timer_sint8_tInit+0x47a>
     f64:	26 30       	cpi	r18, 0x06	; 6
     f66:	31 05       	cpc	r19, r1
     f68:	41 05       	cpc	r20, r1
     f6a:	51 05       	cpc	r21, r1
     f6c:	c1 f1       	breq	.+112    	; 0xfde <Timer_sint8_tInit+0x346>
     f6e:	27 30       	cpi	r18, 0x07	; 7
     f70:	31 05       	cpc	r19, r1
     f72:	41 05       	cpc	r20, r1
     f74:	51 05       	cpc	r21, r1
     f76:	f1 f1       	breq	.+124    	; 0xff4 <Timer_sint8_tInit+0x35c>
     f78:	25 30       	cpi	r18, 0x05	; 5
     f7a:	31 05       	cpc	r19, r1
     f7c:	41 05       	cpc	r20, r1
     f7e:	51 05       	cpc	r21, r1
     f80:	09 f0       	breq	.+2      	; 0xf84 <Timer_sint8_tInit+0x2ec>
     f82:	c7 c0       	rjmp	.+398    	; 0x1112 <Timer_sint8_tInit+0x47a>
     f84:	21 c0       	rjmp	.+66     	; 0xfc8 <Timer_sint8_tInit+0x330>
     f86:	8e b5       	in	r24, 0x2e	; 46
     f88:	81 60       	ori	r24, 0x01	; 1
     f8a:	8e bd       	out	0x2e, r24	; 46
     f8c:	8e b5       	in	r24, 0x2e	; 46
     f8e:	8d 7f       	andi	r24, 0xFD	; 253
     f90:	8e bd       	out	0x2e, r24	; 46
     f92:	8e b5       	in	r24, 0x2e	; 46
     f94:	8b 7f       	andi	r24, 0xFB	; 251
     f96:	8e bd       	out	0x2e, r24	; 46
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	08 95       	ret
     f9c:	8e b5       	in	r24, 0x2e	; 46
     f9e:	8e 7f       	andi	r24, 0xFE	; 254
     fa0:	8e bd       	out	0x2e, r24	; 46
     fa2:	8e b5       	in	r24, 0x2e	; 46
     fa4:	82 60       	ori	r24, 0x02	; 2
     fa6:	8e bd       	out	0x2e, r24	; 46
     fa8:	8e b5       	in	r24, 0x2e	; 46
     faa:	8b 7f       	andi	r24, 0xFB	; 251
     fac:	8e bd       	out	0x2e, r24	; 46
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	08 95       	ret
     fb2:	8e b5       	in	r24, 0x2e	; 46
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	8e bd       	out	0x2e, r24	; 46
     fb8:	8e b5       	in	r24, 0x2e	; 46
     fba:	82 60       	ori	r24, 0x02	; 2
     fbc:	8e bd       	out	0x2e, r24	; 46
     fbe:	8e b5       	in	r24, 0x2e	; 46
     fc0:	8b 7f       	andi	r24, 0xFB	; 251
     fc2:	8e bd       	out	0x2e, r24	; 46
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	08 95       	ret
     fc8:	8e b5       	in	r24, 0x2e	; 46
     fca:	8e 7f       	andi	r24, 0xFE	; 254
     fcc:	8e bd       	out	0x2e, r24	; 46
     fce:	8e b5       	in	r24, 0x2e	; 46
     fd0:	8d 7f       	andi	r24, 0xFD	; 253
     fd2:	8e bd       	out	0x2e, r24	; 46
     fd4:	8e b5       	in	r24, 0x2e	; 46
     fd6:	84 60       	ori	r24, 0x04	; 4
     fd8:	8e bd       	out	0x2e, r24	; 46
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	08 95       	ret
     fde:	8e b5       	in	r24, 0x2e	; 46
     fe0:	81 60       	ori	r24, 0x01	; 1
     fe2:	8e bd       	out	0x2e, r24	; 46
     fe4:	8e b5       	in	r24, 0x2e	; 46
     fe6:	8d 7f       	andi	r24, 0xFD	; 253
     fe8:	8e bd       	out	0x2e, r24	; 46
     fea:	8e b5       	in	r24, 0x2e	; 46
     fec:	84 60       	ori	r24, 0x04	; 4
     fee:	8e bd       	out	0x2e, r24	; 46
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	08 95       	ret
     ff4:	8e b5       	in	r24, 0x2e	; 46
     ff6:	8e 7f       	andi	r24, 0xFE	; 254
     ff8:	8e bd       	out	0x2e, r24	; 46
     ffa:	8e b5       	in	r24, 0x2e	; 46
     ffc:	8d 7f       	andi	r24, 0xFD	; 253
     ffe:	8e bd       	out	0x2e, r24	; 46
    1000:	8e b5       	in	r24, 0x2e	; 46
    1002:	8b 7f       	andi	r24, 0xFB	; 251
    1004:	8e bd       	out	0x2e, r24	; 46
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	08 95       	ret
    100a:	61 30       	cpi	r22, 0x01	; 1
    100c:	69 f0       	breq	.+26     	; 0x1028 <Timer_sint8_tInit+0x390>
    100e:	28 f0       	brcs	.+10     	; 0x101a <Timer_sint8_tInit+0x382>
    1010:	62 30       	cpi	r22, 0x02	; 2
    1012:	89 f0       	breq	.+34     	; 0x1036 <Timer_sint8_tInit+0x39e>
    1014:	63 30       	cpi	r22, 0x03	; 3
    1016:	b1 f0       	breq	.+44     	; 0x1044 <Timer_sint8_tInit+0x3ac>
    1018:	1b c0       	rjmp	.+54     	; 0x1050 <Timer_sint8_tInit+0x3b8>
    101a:	85 b5       	in	r24, 0x25	; 37
    101c:	87 7f       	andi	r24, 0xF7	; 247
    101e:	85 bd       	out	0x25, r24	; 37
    1020:	85 b5       	in	r24, 0x25	; 37
    1022:	8f 7b       	andi	r24, 0xBF	; 191
    1024:	85 bd       	out	0x25, r24	; 37
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <Timer_sint8_tInit+0x3b8>
    1028:	85 b5       	in	r24, 0x25	; 37
    102a:	87 7f       	andi	r24, 0xF7	; 247
    102c:	85 bd       	out	0x25, r24	; 37
    102e:	85 b5       	in	r24, 0x25	; 37
    1030:	80 64       	ori	r24, 0x40	; 64
    1032:	85 bd       	out	0x25, r24	; 37
    1034:	0d c0       	rjmp	.+26     	; 0x1050 <Timer_sint8_tInit+0x3b8>
    1036:	85 b5       	in	r24, 0x25	; 37
    1038:	88 60       	ori	r24, 0x08	; 8
    103a:	85 bd       	out	0x25, r24	; 37
    103c:	85 b5       	in	r24, 0x25	; 37
    103e:	8f 7b       	andi	r24, 0xBF	; 191
    1040:	85 bd       	out	0x25, r24	; 37
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <Timer_sint8_tInit+0x3b8>
    1044:	85 b5       	in	r24, 0x25	; 37
    1046:	88 60       	ori	r24, 0x08	; 8
    1048:	85 bd       	out	0x25, r24	; 37
    104a:	85 b5       	in	r24, 0x25	; 37
    104c:	80 64       	ori	r24, 0x40	; 64
    104e:	85 bd       	out	0x25, r24	; 37
    1050:	f9 01       	movw	r30, r18
    1052:	31 97       	sbiw	r30, 0x01	; 1
    1054:	e7 30       	cpi	r30, 0x07	; 7
    1056:	f1 05       	cpc	r31, r1
    1058:	08 f0       	brcs	.+2      	; 0x105c <Timer_sint8_tInit+0x3c4>
    105a:	5d c0       	rjmp	.+186    	; 0x1116 <Timer_sint8_tInit+0x47e>
    105c:	e4 5c       	subi	r30, 0xC4	; 196
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__tablejump2__>
    1064:	85 b5       	in	r24, 0x25	; 37
    1066:	8e 7f       	andi	r24, 0xFE	; 254
    1068:	85 bd       	out	0x25, r24	; 37
    106a:	85 b5       	in	r24, 0x25	; 37
    106c:	82 60       	ori	r24, 0x02	; 2
    106e:	85 bd       	out	0x25, r24	; 37
    1070:	85 b5       	in	r24, 0x25	; 37
    1072:	8b 7f       	andi	r24, 0xFB	; 251
    1074:	85 bd       	out	0x25, r24	; 37
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	08 95       	ret
    107a:	85 b5       	in	r24, 0x25	; 37
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	85 bd       	out	0x25, r24	; 37
    1080:	85 b5       	in	r24, 0x25	; 37
    1082:	82 60       	ori	r24, 0x02	; 2
    1084:	85 bd       	out	0x25, r24	; 37
    1086:	85 b5       	in	r24, 0x25	; 37
    1088:	8b 7f       	andi	r24, 0xFB	; 251
    108a:	85 bd       	out	0x25, r24	; 37
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	08 95       	ret
    1090:	85 b5       	in	r24, 0x25	; 37
    1092:	8e 7f       	andi	r24, 0xFE	; 254
    1094:	85 bd       	out	0x25, r24	; 37
    1096:	85 b5       	in	r24, 0x25	; 37
    1098:	8d 7f       	andi	r24, 0xFD	; 253
    109a:	85 bd       	out	0x25, r24	; 37
    109c:	85 b5       	in	r24, 0x25	; 37
    109e:	84 60       	ori	r24, 0x04	; 4
    10a0:	85 bd       	out	0x25, r24	; 37
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	08 95       	ret
    10a6:	85 b5       	in	r24, 0x25	; 37
    10a8:	81 60       	ori	r24, 0x01	; 1
    10aa:	85 bd       	out	0x25, r24	; 37
    10ac:	85 b5       	in	r24, 0x25	; 37
    10ae:	8d 7f       	andi	r24, 0xFD	; 253
    10b0:	85 bd       	out	0x25, r24	; 37
    10b2:	85 b5       	in	r24, 0x25	; 37
    10b4:	84 60       	ori	r24, 0x04	; 4
    10b6:	85 bd       	out	0x25, r24	; 37
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	08 95       	ret
    10bc:	85 b5       	in	r24, 0x25	; 37
    10be:	8e 7f       	andi	r24, 0xFE	; 254
    10c0:	85 bd       	out	0x25, r24	; 37
    10c2:	85 b5       	in	r24, 0x25	; 37
    10c4:	82 60       	ori	r24, 0x02	; 2
    10c6:	85 bd       	out	0x25, r24	; 37
    10c8:	85 b5       	in	r24, 0x25	; 37
    10ca:	84 60       	ori	r24, 0x04	; 4
    10cc:	85 bd       	out	0x25, r24	; 37
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret
    10d2:	85 b5       	in	r24, 0x25	; 37
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	85 bd       	out	0x25, r24	; 37
    10d8:	85 b5       	in	r24, 0x25	; 37
    10da:	82 60       	ori	r24, 0x02	; 2
    10dc:	85 bd       	out	0x25, r24	; 37
    10de:	85 b5       	in	r24, 0x25	; 37
    10e0:	84 60       	ori	r24, 0x04	; 4
    10e2:	85 bd       	out	0x25, r24	; 37
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	08 95       	ret
    10e8:	85 b5       	in	r24, 0x25	; 37
    10ea:	8e 7f       	andi	r24, 0xFE	; 254
    10ec:	85 bd       	out	0x25, r24	; 37
    10ee:	85 b5       	in	r24, 0x25	; 37
    10f0:	8d 7f       	andi	r24, 0xFD	; 253
    10f2:	85 bd       	out	0x25, r24	; 37
    10f4:	85 b5       	in	r24, 0x25	; 37
    10f6:	8b 7f       	andi	r24, 0xFB	; 251
    10f8:	85 bd       	out	0x25, r24	; 37
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	08 95       	ret
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	08 95       	ret
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	08 95       	ret
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	08 95       	ret
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	08 95       	ret
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	08 95       	ret
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	08 95       	ret
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	08 95       	ret

0000111a <Timer_sint8_tSetTMRValue>:
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	82 31       	cpi	r24, 0x12	; 18
    111e:	91 05       	cpc	r25, r1
    1120:	c8 f5       	brcc	.+114    	; 0x1194 <Timer_sint8_tSetTMRValue+0x7a>
    1122:	fc 01       	movw	r30, r24
    1124:	ed 5b       	subi	r30, 0xBD	; 189
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	0c 94 42 11 	jmp	0x2284	; 0x2284 <__tablejump2__>
    112c:	62 bf       	out	0x32, r22	; 50
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	08 95       	ret
    1132:	7d bd       	out	0x2d, r23	; 45
    1134:	6c bd       	out	0x2c, r22	; 44
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	08 95       	ret
    113a:	64 bd       	out	0x24, r22	; 36
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	08 95       	ret
    1140:	6d bd       	out	0x2d, r22	; 45
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	08 95       	ret
    1146:	6c bd       	out	0x2c, r22	; 44
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	08 95       	ret
    114c:	7b bd       	out	0x2b, r23	; 43
    114e:	6a bd       	out	0x2a, r22	; 42
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	08 95       	ret
    1154:	6b bd       	out	0x2b, r22	; 43
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	08 95       	ret
    115a:	6a bd       	out	0x2a, r22	; 42
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	08 95       	ret
    1160:	79 bd       	out	0x29, r23	; 41
    1162:	68 bd       	out	0x28, r22	; 40
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	08 95       	ret
    1168:	69 bd       	out	0x29, r22	; 41
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	08 95       	ret
    116e:	68 bd       	out	0x28, r22	; 40
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	08 95       	ret
    1174:	77 bd       	out	0x27, r23	; 39
    1176:	66 bd       	out	0x26, r22	; 38
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	08 95       	ret
    117c:	67 bd       	out	0x27, r22	; 39
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	08 95       	ret
    1182:	66 bd       	out	0x26, r22	; 38
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	08 95       	ret
    1188:	63 bd       	out	0x23, r22	; 35
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	08 95       	ret
    118e:	6c bf       	out	0x3c, r22	; 60
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	08 95       	ret
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	08 95       	ret

00001198 <Timer_sint8_tInterruptEnable>:
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	99 f0       	breq	.+38     	; 0x11c2 <Timer_sint8_tInterruptEnable+0x2a>
    119c:	18 f0       	brcs	.+6      	; 0x11a4 <Timer_sint8_tInterruptEnable+0xc>
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	79 f1       	breq	.+94     	; 0x1200 <Timer_sint8_tInterruptEnable+0x68>
    11a2:	3d c0       	rjmp	.+122    	; 0x121e <Timer_sint8_tInterruptEnable+0x86>
    11a4:	66 23       	and	r22, r22
    11a6:	19 f0       	breq	.+6      	; 0x11ae <Timer_sint8_tInterruptEnable+0x16>
    11a8:	61 30       	cpi	r22, 0x01	; 1
    11aa:	31 f0       	breq	.+12     	; 0x11b8 <Timer_sint8_tInterruptEnable+0x20>
    11ac:	3a c0       	rjmp	.+116    	; 0x1222 <Timer_sint8_tInterruptEnable+0x8a>
    11ae:	89 b7       	in	r24, 0x39	; 57
    11b0:	81 60       	ori	r24, 0x01	; 1
    11b2:	89 bf       	out	0x39, r24	; 57
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	08 95       	ret
    11b8:	89 b7       	in	r24, 0x39	; 57
    11ba:	82 60       	ori	r24, 0x02	; 2
    11bc:	89 bf       	out	0x39, r24	; 57
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	08 95       	ret
    11c2:	62 30       	cpi	r22, 0x02	; 2
    11c4:	99 f0       	breq	.+38     	; 0x11ec <Timer_sint8_tInterruptEnable+0x54>
    11c6:	18 f4       	brcc	.+6      	; 0x11ce <Timer_sint8_tInterruptEnable+0x36>
    11c8:	66 23       	and	r22, r22
    11ca:	31 f0       	breq	.+12     	; 0x11d8 <Timer_sint8_tInterruptEnable+0x40>
    11cc:	2c c0       	rjmp	.+88     	; 0x1226 <Timer_sint8_tInterruptEnable+0x8e>
    11ce:	63 30       	cpi	r22, 0x03	; 3
    11d0:	41 f0       	breq	.+16     	; 0x11e2 <Timer_sint8_tInterruptEnable+0x4a>
    11d2:	64 30       	cpi	r22, 0x04	; 4
    11d4:	81 f0       	breq	.+32     	; 0x11f6 <Timer_sint8_tInterruptEnable+0x5e>
    11d6:	27 c0       	rjmp	.+78     	; 0x1226 <Timer_sint8_tInterruptEnable+0x8e>
    11d8:	89 b7       	in	r24, 0x39	; 57
    11da:	84 60       	ori	r24, 0x04	; 4
    11dc:	89 bf       	out	0x39, r24	; 57
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	08 95       	ret
    11e2:	89 b7       	in	r24, 0x39	; 57
    11e4:	88 60       	ori	r24, 0x08	; 8
    11e6:	89 bf       	out	0x39, r24	; 57
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	08 95       	ret
    11ec:	89 b7       	in	r24, 0x39	; 57
    11ee:	80 61       	ori	r24, 0x10	; 16
    11f0:	89 bf       	out	0x39, r24	; 57
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	08 95       	ret
    11f6:	89 b7       	in	r24, 0x39	; 57
    11f8:	80 62       	ori	r24, 0x20	; 32
    11fa:	89 bf       	out	0x39, r24	; 57
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	08 95       	ret
    1200:	66 23       	and	r22, r22
    1202:	19 f0       	breq	.+6      	; 0x120a <Timer_sint8_tInterruptEnable+0x72>
    1204:	61 30       	cpi	r22, 0x01	; 1
    1206:	31 f0       	breq	.+12     	; 0x1214 <Timer_sint8_tInterruptEnable+0x7c>
    1208:	10 c0       	rjmp	.+32     	; 0x122a <Timer_sint8_tInterruptEnable+0x92>
    120a:	89 b7       	in	r24, 0x39	; 57
    120c:	80 64       	ori	r24, 0x40	; 64
    120e:	89 bf       	out	0x39, r24	; 57
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	08 95       	ret
    1214:	89 b7       	in	r24, 0x39	; 57
    1216:	80 68       	ori	r24, 0x80	; 128
    1218:	89 bf       	out	0x39, r24	; 57
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	08 95       	ret
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	08 95       	ret
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	08 95       	ret
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	08 95       	ret
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	08 95       	ret

0000122e <Timer_sint32_tTMRValue>:
uint8_t Timer_sint32_tTMRValue(uint8_t timer,uint16_t*TimerCountsValue)
{
	switch(timer)
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	59 f0       	breq	.+22     	; 0x1248 <Timer_sint32_tTMRValue+0x1a>
    1232:	18 f0       	brcs	.+6      	; 0x123a <Timer_sint32_tTMRValue+0xc>
    1234:	82 30       	cpi	r24, 0x02	; 2
    1236:	79 f0       	breq	.+30     	; 0x1256 <Timer_sint32_tTMRValue+0x28>
    1238:	15 c0       	rjmp	.+42     	; 0x1264 <Timer_sint32_tTMRValue+0x36>
	{
		case TMR0_CHOICE:
		(*TimerCountsValue)=TCNT0;
    123a:	82 b7       	in	r24, 0x32	; 50
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	fb 01       	movw	r30, r22
    1240:	91 83       	std	Z+1, r25	; 0x01
    1242:	80 83       	st	Z, r24
		return E_OK;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	08 95       	ret
		break;
		case TMR1_CHOICE:
		(*TimerCountsValue)=TCNT1;
    1248:	8c b5       	in	r24, 0x2c	; 44
    124a:	9d b5       	in	r25, 0x2d	; 45
    124c:	fb 01       	movw	r30, r22
    124e:	91 83       	std	Z+1, r25	; 0x01
    1250:	80 83       	st	Z, r24
		return E_OK;
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	08 95       	ret
		break;
		case TMR2_CHOICE:
		(*TimerCountsValue)=TCNT2;
    1256:	84 b5       	in	r24, 0x24	; 36
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	fb 01       	movw	r30, r22
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	80 83       	st	Z, r24
		return E_OK;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	08 95       	ret
		break;

	}
	return E_NOK;
    1264:	80 e0       	ldi	r24, 0x00	; 0
}
    1266:	08 95       	ret

00001268 <Timer_sint8_tStop>:

uint8_t Timer_sint8_tStop(uint8_t timer)
{
	if(timer <= TMR2_CHOICE)
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	38 f5       	brcc	.+78     	; 0x12ba <Timer_sint8_tStop+0x52>
	{
		switch (timer)
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	79 f0       	breq	.+30     	; 0x128e <Timer_sint8_tStop+0x26>
    1270:	18 f0       	brcs	.+6      	; 0x1278 <Timer_sint8_tStop+0x10>
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	b9 f0       	breq	.+46     	; 0x12a4 <Timer_sint8_tStop+0x3c>
    1276:	23 c0       	rjmp	.+70     	; 0x12be <Timer_sint8_tStop+0x56>
		{
			case TMR0_CHOICE:
			CLR_BIT(TCCR0,0);
    1278:	83 b7       	in	r24, 0x33	; 51
    127a:	8e 7f       	andi	r24, 0xFE	; 254
    127c:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0,1);
    127e:	83 b7       	in	r24, 0x33	; 51
    1280:	8d 7f       	andi	r24, 0xFD	; 253
    1282:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0,2);
    1284:	83 b7       	in	r24, 0x33	; 51
    1286:	8b 7f       	andi	r24, 0xFB	; 251
    1288:	83 bf       	out	0x33, r24	; 51
			return E_OK;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	08 95       	ret
			break;
			case TMR1_CHOICE:
			CLR_BIT(TCCR1B,0);
    128e:	8e b5       	in	r24, 0x2e	; 46
    1290:	8e 7f       	andi	r24, 0xFE	; 254
    1292:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,1);
    1294:	8e b5       	in	r24, 0x2e	; 46
    1296:	8d 7f       	andi	r24, 0xFD	; 253
    1298:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,2);
    129a:	8e b5       	in	r24, 0x2e	; 46
    129c:	8b 7f       	andi	r24, 0xFB	; 251
    129e:	8e bd       	out	0x2e, r24	; 46
			return E_OK;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	08 95       	ret
			break;
			case TMR2_CHOICE:
			CLR_BIT(TCCR2,0);
    12a4:	85 b5       	in	r24, 0x25	; 37
    12a6:	8e 7f       	andi	r24, 0xFE	; 254
    12a8:	85 bd       	out	0x25, r24	; 37
			CLR_BIT(TCCR2,1);
    12aa:	85 b5       	in	r24, 0x25	; 37
    12ac:	8d 7f       	andi	r24, 0xFD	; 253
    12ae:	85 bd       	out	0x25, r24	; 37
			CLR_BIT(TCCR2,2);
    12b0:	85 b5       	in	r24, 0x25	; 37
    12b2:	8b 7f       	andi	r24, 0xFB	; 251
    12b4:	85 bd       	out	0x25, r24	; 37
			return E_OK;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	08 95       	ret
			break;
		}
	}
	return E_NOK;
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	08 95       	ret
    12be:	80 e0       	ldi	r24, 0x00	; 0
	
}
    12c0:	08 95       	ret

000012c2 <__vector_5>:
void __vector_5 (void)
{
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	3f 93       	push	r19
    12d0:	4f 93       	push	r20
    12d2:	5f 93       	push	r21
    12d4:	6f 93       	push	r22
    12d6:	7f 93       	push	r23
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	af 93       	push	r26
    12de:	bf 93       	push	r27
    12e0:	ef 93       	push	r30
    12e2:	ff 93       	push	r31
	Timer_sint8_tSetTMRValue(TMR2_CHOICE,255);
    12e4:	6f ef       	ldi	r22, 0xFF	; 255
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	0e 94 8d 08 	call	0x111a	; 0x111a <Timer_sint8_tSetTMRValue>
	Timer2_counter++;
    12ee:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Timer2_counter>
    12f2:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <Timer2_counter+0x1>
    12f6:	a0 91 98 00 	lds	r26, 0x0098	; 0x800098 <Timer2_counter+0x2>
    12fa:	b0 91 99 00 	lds	r27, 0x0099	; 0x800099 <Timer2_counter+0x3>
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	a1 1d       	adc	r26, r1
    1302:	b1 1d       	adc	r27, r1
    1304:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Timer2_counter>
    1308:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Timer2_counter+0x1>
    130c:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <Timer2_counter+0x2>
    1310:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <Timer2_counter+0x3>
}
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f 90       	pop	r0
    1332:	1f 90       	pop	r1
    1334:	18 95       	reti

00001336 <__vector_9>:

void __vector_9 (void)
{
    1336:	1f 92       	push	r1
    1338:	0f 92       	push	r0
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	0f 92       	push	r0
    133e:	11 24       	eor	r1, r1
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
	Timer_sint8_tSetTMRValue(TMR1_CHOICE,255);
    1358:	6f ef       	ldi	r22, 0xFF	; 255
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	0e 94 8d 08 	call	0x111a	; 0x111a <Timer_sint8_tSetTMRValue>
	Timer1_counter++;
    1362:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Timer1_counter>
    1366:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <Timer1_counter+0x1>
    136a:	a0 91 9c 00 	lds	r26, 0x009C	; 0x80009c <Timer1_counter+0x2>
    136e:	b0 91 9d 00 	lds	r27, 0x009D	; 0x80009d <Timer1_counter+0x3>
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	a1 1d       	adc	r26, r1
    1376:	b1 1d       	adc	r27, r1
    1378:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Timer1_counter>
    137c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <Timer1_counter+0x1>
    1380:	a0 93 9c 00 	sts	0x009C, r26	; 0x80009c <Timer1_counter+0x2>
    1384:	b0 93 9d 00 	sts	0x009D, r27	; 0x80009d <Timer1_counter+0x3>
}
    1388:	ff 91       	pop	r31
    138a:	ef 91       	pop	r30
    138c:	bf 91       	pop	r27
    138e:	af 91       	pop	r26
    1390:	9f 91       	pop	r25
    1392:	8f 91       	pop	r24
    1394:	7f 91       	pop	r23
    1396:	6f 91       	pop	r22
    1398:	5f 91       	pop	r21
    139a:	4f 91       	pop	r20
    139c:	3f 91       	pop	r19
    139e:	2f 91       	pop	r18
    13a0:	0f 90       	pop	r0
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	0f 90       	pop	r0
    13a6:	1f 90       	pop	r1
    13a8:	18 95       	reti

000013aa <__vector_11>:

void __vector_11 (void)
{
    13aa:	1f 92       	push	r1
    13ac:	0f 92       	push	r0
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	2f 93       	push	r18
    13b6:	3f 93       	push	r19
    13b8:	4f 93       	push	r20
    13ba:	5f 93       	push	r21
    13bc:	6f 93       	push	r22
    13be:	7f 93       	push	r23
    13c0:	8f 93       	push	r24
    13c2:	9f 93       	push	r25
    13c4:	af 93       	push	r26
    13c6:	bf 93       	push	r27
    13c8:	ef 93       	push	r30
    13ca:	ff 93       	push	r31
	Timer_sint8_tSetTMRValue(TMR0_CHOICE,255);
    13cc:	6f ef       	ldi	r22, 0xFF	; 255
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	0e 94 8d 08 	call	0x111a	; 0x111a <Timer_sint8_tSetTMRValue>
	Timer0_counter++;
    13d6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <Timer0_counter>
    13da:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <Timer0_counter+0x1>
    13de:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <Timer0_counter+0x2>
    13e2:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <Timer0_counter+0x3>
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	a1 1d       	adc	r26, r1
    13ea:	b1 1d       	adc	r27, r1
    13ec:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <Timer0_counter>
    13f0:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <Timer0_counter+0x1>
    13f4:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <Timer0_counter+0x2>
    13f8:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <Timer0_counter+0x3>
}
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	7f 91       	pop	r23
    140a:	6f 91       	pop	r22
    140c:	5f 91       	pop	r21
    140e:	4f 91       	pop	r20
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <Timer_NonBlockingdelay>:

uint8_t Timer_NonBlockingdelay(uint8_t timer, uint32_t time, uint8_t u8_statePriority)
{
    141e:	cf 92       	push	r12
    1420:	df 92       	push	r13
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	cf 93       	push	r28
    1428:	6a 01       	movw	r12, r20
    142a:	7b 01       	movw	r14, r22
    142c:	c2 2f       	mov	r28, r18
	uint8_t retval = ERROR;
	switch (timer)
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	09 f0       	breq	.+2      	; 0x1434 <Timer_NonBlockingdelay+0x16>
    1432:	73 c0       	rjmp	.+230    	; 0x151a <Timer_NonBlockingdelay+0xfc>
		{
			break;
		}
		case TMR2_CHOICE:
		{
			if(ZERO == Timer2_delayflag)
    1434:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <Timer2_delayflag>
    1438:	81 11       	cpse	r24, r1
    143a:	23 c0       	rjmp	.+70     	; 0x1482 <Timer_NonBlockingdelay+0x64>
			{
				Timer_sint8_tSetTMRValue(TMR2_CHOICE,255);
    143c:	6f ef       	ldi	r22, 0xFF	; 255
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	0e 94 8d 08 	call	0x111a	; 0x111a <Timer_sint8_tSetTMRValue>
				Timer_sint8_tInterruptEnable(TMR2_CHOICE,TOIE_CHOICE);
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	0e 94 cc 08 	call	0x1198	; 0x1198 <Timer_sint8_tInterruptEnable>
				Timer_sint8_tInit(TMR2_CHOICE,NORMAL,PRS8);
    144e:	21 e0       	ldi	r18, 0x01	; 1
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	0e 94 4c 06 	call	0xc98	; 0xc98 <Timer_sint8_tInit>
				Timer2_delayflag = ONE; 
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <Timer2_delayflag>
				for (uint8_t i = ZERO; i < PRIORITY_NUMBERS; i++)
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	0b c0       	rjmp	.+22     	; 0x147e <Timer_NonBlockingdelay+0x60>
				{
					if (gau8_TMRDelyPriority[i] != ZERO)
    1468:	e8 2f       	mov	r30, r24
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	ed 54       	subi	r30, 0x4D	; 77
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	90 81       	ld	r25, Z
    1472:	99 23       	and	r25, r25
    1474:	19 f0       	breq	.+6      	; 0x147c <Timer_NonBlockingdelay+0x5e>
					{
						u8_IndexToBeExecuted = i;
    1476:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <u8_IndexToBeExecuted>
						break;
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <Timer_NonBlockingdelay+0x64>
			{
				Timer_sint8_tSetTMRValue(TMR2_CHOICE,255);
				Timer_sint8_tInterruptEnable(TMR2_CHOICE,TOIE_CHOICE);
				Timer_sint8_tInit(TMR2_CHOICE,NORMAL,PRS8);
				Timer2_delayflag = ONE; 
				for (uint8_t i = ZERO; i < PRIORITY_NUMBERS; i++)
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	8a 30       	cpi	r24, 0x0A	; 10
    1480:	98 f3       	brcs	.-26     	; 0x1468 <Timer_NonBlockingdelay+0x4a>
						break;
					}
				}
			}

			if((time < Timer2_counter) && (u8_statePriority == u8_IndexToBeExecuted))
    1482:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <Timer2_counter>
    1486:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <Timer2_counter+0x1>
    148a:	a0 91 98 00 	lds	r26, 0x0098	; 0x800098 <Timer2_counter+0x2>
    148e:	b0 91 99 00 	lds	r27, 0x0099	; 0x800099 <Timer2_counter+0x3>
    1492:	c8 16       	cp	r12, r24
    1494:	d9 06       	cpc	r13, r25
    1496:	ea 06       	cpc	r14, r26
    1498:	fb 06       	cpc	r15, r27
    149a:	18 f5       	brcc	.+70     	; 0x14e2 <Timer_NonBlockingdelay+0xc4>
    149c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <u8_IndexToBeExecuted>
    14a0:	8c 13       	cpse	r24, r28
    14a2:	1f c0       	rjmp	.+62     	; 0x14e2 <Timer_NonBlockingdelay+0xc4>
			{
				Timer_sint8_tStop(TMR2_CHOICE);
    14a4:	82 e0       	ldi	r24, 0x02	; 2
    14a6:	0e 94 34 09 	call	0x1268	; 0x1268 <Timer_sint8_tStop>
				Timer2_counter = ZERO;
    14aa:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <Timer2_counter>
    14ae:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <Timer2_counter+0x1>
    14b2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <Timer2_counter+0x2>
    14b6:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <Timer2_counter+0x3>
				Timer2_delayflag = ZERO;
    14ba:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <Timer2_delayflag>
				gau8_TMRDelyPriority[u8_IndexToBeExecuted] = ZERO;
    14be:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <u8_IndexToBeExecuted>
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	ed 54       	subi	r30, 0x4D	; 77
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	10 82       	st	Z, r1
				u8_IndexToBeExecuted = EMPTY_INDEX;
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <u8_IndexToBeExecuted>
				retval = SUCCESS;
				Timer_NonBlockingdelay(TMR2_CHOICE, 0, 9);
    14d0:	29 e0       	ldi	r18, 0x09	; 9
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	ba 01       	movw	r22, r20
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	0e 94 0f 0a 	call	0x141e	; 0x141e <Timer_NonBlockingdelay>
				Timer_sint8_tStop(TMR2_CHOICE);
				Timer2_counter = ZERO;
				Timer2_delayflag = ZERO;
				gau8_TMRDelyPriority[u8_IndexToBeExecuted] = ZERO;
				u8_IndexToBeExecuted = EMPTY_INDEX;
				retval = SUCCESS;
    14de:	c1 e0       	ldi	r28, 0x01	; 1
				Timer_NonBlockingdelay(TMR2_CHOICE, 0, 9);
    14e0:	21 c0       	rjmp	.+66     	; 0x1524 <Timer_NonBlockingdelay+0x106>
				
			}
			else if (u8_statePriority != u8_IndexToBeExecuted)
    14e2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <u8_IndexToBeExecuted>
    14e6:	c8 17       	cp	r28, r24
    14e8:	39 f0       	breq	.+14     	; 0x14f8 <Timer_NonBlockingdelay+0xda>
			{
				gau8_TMRDelyPriority[u8_statePriority] = time;
    14ea:	ec 2f       	mov	r30, r28
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	ed 54       	subi	r30, 0x4D	; 77
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	c0 82       	st	Z, r12
				retval = WAITING;
    14f4:	c3 e0       	ldi	r28, 0x03	; 3
    14f6:	16 c0       	rjmp	.+44     	; 0x1524 <Timer_NonBlockingdelay+0x106>
			}
			else if ((time > Timer2_counter) && (u8_statePriority == u8_IndexToBeExecuted))
    14f8:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <Timer2_counter>
    14fc:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <Timer2_counter+0x1>
    1500:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <Timer2_counter+0x2>
    1504:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <Timer2_counter+0x3>
    1508:	4c 15       	cp	r20, r12
    150a:	5d 05       	cpc	r21, r13
    150c:	6e 05       	cpc	r22, r14
    150e:	7f 05       	cpc	r23, r15
    1510:	30 f4       	brcc	.+12     	; 0x151e <Timer_NonBlockingdelay+0x100>
    1512:	c8 17       	cp	r28, r24
    1514:	31 f0       	breq	.+12     	; 0x1522 <Timer_NonBlockingdelay+0x104>
			{
				retval = PENDING;
			}
			else
			{
				retval = ERROR;
    1516:	c2 e0       	ldi	r28, 0x02	; 2
    1518:	05 c0       	rjmp	.+10     	; 0x1524 <Timer_NonBlockingdelay+0x106>
	Timer0_counter++;
}

uint8_t Timer_NonBlockingdelay(uint8_t timer, uint32_t time, uint8_t u8_statePriority)
{
	uint8_t retval = ERROR;
    151a:	c2 e0       	ldi	r28, 0x02	; 2
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <Timer_NonBlockingdelay+0x106>
			{
				retval = PENDING;
			}
			else
			{
				retval = ERROR;
    151e:	c2 e0       	ldi	r28, 0x02	; 2
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <Timer_NonBlockingdelay+0x106>
				gau8_TMRDelyPriority[u8_statePriority] = time;
				retval = WAITING;
			}
			else if ((time > Timer2_counter) && (u8_statePriority == u8_IndexToBeExecuted))
			{
				retval = PENDING;
    1522:	c0 e0       	ldi	r28, 0x00	; 0
				retval = ERROR;
			}
			break;
		}
	}
	if (EMPTY_INDEX == u8_IndexToBeExecuted)
    1524:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <u8_IndexToBeExecuted>
    1528:	8f 3f       	cpi	r24, 0xFF	; 255
    152a:	69 f4       	brne	.+26     	; 0x1546 <Timer_NonBlockingdelay+0x128>
	{
		Timer_sint8_tStop(TMR2_CHOICE);
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	0e 94 34 09 	call	0x1268	; 0x1268 <Timer_sint8_tStop>
		Timer2_counter = ZERO;
    1532:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <Timer2_counter>
    1536:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <Timer2_counter+0x1>
    153a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <Timer2_counter+0x2>
    153e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <Timer2_counter+0x3>
		Timer2_delayflag = ZERO;
    1542:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <Timer2_delayflag>
	}
	return retval;
    1546:	8c 2f       	mov	r24, r28
    1548:	cf 91       	pop	r28
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	08 95       	ret

00001554 <reverse>:
	{
		u8_counter++;
	}
	
	return u8_counter;
}
    1554:	9c 01       	movw	r18, r24
    1556:	61 50       	subi	r22, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0c c0       	rjmp	.+24     	; 0x1574 <reverse+0x20>
    155c:	d9 01       	movw	r26, r18
    155e:	a9 0f       	add	r26, r25
    1560:	b1 1d       	adc	r27, r1
    1562:	8c 91       	ld	r24, X
    1564:	f9 01       	movw	r30, r18
    1566:	e6 0f       	add	r30, r22
    1568:	f1 1d       	adc	r31, r1
    156a:	40 81       	ld	r20, Z
    156c:	4c 93       	st	X, r20
    156e:	80 83       	st	Z, r24
    1570:	9f 5f       	subi	r25, 0xFF	; 255
    1572:	61 50       	subi	r22, 0x01	; 1
    1574:	96 17       	cp	r25, r22
    1576:	90 f3       	brcs	.-28     	; 0x155c <reverse+0x8>
    1578:	08 95       	ret

0000157a <intToStr>:
* @param [in]  string   -  pointer to the string.
*
* @return function error state.
*/
uint8_t intToStr(uint32_t x, uint8_t str[], uint32_t d)
{
    157a:	4f 92       	push	r4
    157c:	5f 92       	push	r5
    157e:	6f 92       	push	r6
    1580:	7f 92       	push	r7
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	ea 01       	movw	r28, r20
    1598:	28 01       	movw	r4, r16
    159a:	39 01       	movw	r6, r18
	
	uint32_t u8_iterator = 0;
	if (x == 0)
    159c:	61 15       	cp	r22, r1
    159e:	71 05       	cpc	r23, r1
    15a0:	81 05       	cpc	r24, r1
    15a2:	91 05       	cpc	r25, r1
    15a4:	b9 f1       	breq	.+110    	; 0x1614 <intToStr+0x9a>
    15a6:	81 2c       	mov	r8, r1
    15a8:	91 2c       	mov	r9, r1
    15aa:	54 01       	movw	r10, r8
    15ac:	15 c0       	rjmp	.+42     	; 0x15d8 <intToStr+0x5e>
	{
		return '0';
	}
	while (x)
	{
		str[u8_iterator++] = (x % 10) + '0';
    15ae:	7e 01       	movw	r14, r28
    15b0:	e8 0c       	add	r14, r8
    15b2:	f9 1c       	adc	r15, r9
    15b4:	2a e0       	ldi	r18, 0x0A	; 10
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	0e 94 20 11 	call	0x2240	; 0x2240 <__udivmodsi4>
    15c0:	60 5d       	subi	r22, 0xD0	; 208
    15c2:	f7 01       	movw	r30, r14
    15c4:	60 83       	st	Z, r22
		x = x / 10;
    15c6:	62 2f       	mov	r22, r18
    15c8:	73 2f       	mov	r23, r19
    15ca:	84 2f       	mov	r24, r20
    15cc:	95 2f       	mov	r25, r21
	{
		return '0';
	}
	while (x)
	{
		str[u8_iterator++] = (x % 10) + '0';
    15ce:	ff ef       	ldi	r31, 0xFF	; 255
    15d0:	8f 1a       	sub	r8, r31
    15d2:	9f 0a       	sbc	r9, r31
    15d4:	af 0a       	sbc	r10, r31
    15d6:	bf 0a       	sbc	r11, r31
	uint32_t u8_iterator = 0;
	if (x == 0)
	{
		return '0';
	}
	while (x)
    15d8:	61 15       	cp	r22, r1
    15da:	71 05       	cpc	r23, r1
    15dc:	81 05       	cpc	r24, r1
    15de:	91 05       	cpc	r25, r1
    15e0:	31 f7       	brne	.-52     	; 0x15ae <intToStr+0x34>
    15e2:	0a c0       	rjmp	.+20     	; 0x15f8 <intToStr+0x7e>
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (u8_iterator < d)
	str[u8_iterator++] = '0';
    15e4:	fe 01       	movw	r30, r28
    15e6:	e8 0d       	add	r30, r8
    15e8:	f9 1d       	adc	r31, r9
    15ea:	80 e3       	ldi	r24, 0x30	; 48
    15ec:	80 83       	st	Z, r24
    15ee:	2f ef       	ldi	r18, 0xFF	; 255
    15f0:	82 1a       	sub	r8, r18
    15f2:	92 0a       	sbc	r9, r18
    15f4:	a2 0a       	sbc	r10, r18
    15f6:	b2 0a       	sbc	r11, r18
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (u8_iterator < d)
    15f8:	84 14       	cp	r8, r4
    15fa:	95 04       	cpc	r9, r5
    15fc:	a6 04       	cpc	r10, r6
    15fe:	b7 04       	cpc	r11, r7
    1600:	88 f3       	brcs	.-30     	; 0x15e4 <intToStr+0x6a>
	str[u8_iterator++] = '0';
	
	reverse(str, u8_iterator);
    1602:	18 2d       	mov	r17, r8
    1604:	68 2d       	mov	r22, r8
    1606:	ce 01       	movw	r24, r28
    1608:	0e 94 aa 0a 	call	0x1554	; 0x1554 <reverse>
	str[u8_iterator] = END_OF_STRING;
    160c:	c8 0d       	add	r28, r8
    160e:	d9 1d       	adc	r29, r9
    1610:	18 82       	st	Y, r1
	return u8_iterator;
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <intToStr+0x9c>
{
	
	uint32_t u8_iterator = 0;
	if (x == 0)
	{
		return '0';
    1614:	10 e3       	ldi	r17, 0x30	; 48
	str[u8_iterator++] = '0';
	
	reverse(str, u8_iterator);
	str[u8_iterator] = END_OF_STRING;
	return u8_iterator;
}
    1616:	81 2f       	mov	r24, r17
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	bf 90       	pop	r11
    1626:	af 90       	pop	r10
    1628:	9f 90       	pop	r9
    162a:	8f 90       	pop	r8
    162c:	7f 90       	pop	r7
    162e:	6f 90       	pop	r6
    1630:	5f 90       	pop	r5
    1632:	4f 90       	pop	r4
    1634:	08 95       	ret

00001636 <ftos>:

void ftos(float32_t n, ptr_uint8_t res, uint8_t afterpoint)
{
    1636:	4f 92       	push	r4
    1638:	5f 92       	push	r5
    163a:	6f 92       	push	r6
    163c:	7f 92       	push	r7
    163e:	8f 92       	push	r8
    1640:	9f 92       	push	r9
    1642:	bf 92       	push	r11
    1644:	cf 92       	push	r12
    1646:	df 92       	push	r13
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	6b 01       	movw	r12, r22
    1656:	7c 01       	movw	r14, r24
    1658:	4a 01       	movw	r8, r20
    165a:	b2 2e       	mov	r11, r18
	// Extract integer part
	uint32_t ipart = (uint32_t) n;
    165c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__fixunssfsi>
    1660:	2b 01       	movw	r4, r22
    1662:	3c 01       	movw	r6, r24
	
	// Extract floating part
	float32_t fpart = n - (float32_t)ipart;
    1664:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__floatunsisf>
    1668:	9b 01       	movw	r18, r22
    166a:	ac 01       	movw	r20, r24
    166c:	c7 01       	movw	r24, r14
    166e:	b6 01       	movw	r22, r12
    1670:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__subsf3>
    1674:	6b 01       	movw	r12, r22
    1676:	7c 01       	movw	r14, r24
	
	// convert integer part to string
	uint32_t u32_iterator = intToStr(ipart, res, 0);
    1678:	00 e0       	ldi	r16, 0x00	; 0
    167a:	10 e0       	ldi	r17, 0x00	; 0
    167c:	98 01       	movw	r18, r16
    167e:	a4 01       	movw	r20, r8
    1680:	c3 01       	movw	r24, r6
    1682:	b2 01       	movw	r22, r4
    1684:	0e 94 bd 0a 	call	0x157a	; 0x157a <intToStr>
	
	// check for display option after point
	if (afterpoint != 0) {
    1688:	bb 20       	and	r11, r11
    168a:	39 f1       	breq	.+78     	; 0x16da <ftos+0xa4>
		res[u32_iterator] = '.'; // add dot
    168c:	c8 2f       	mov	r28, r24
    168e:	d0 e0       	ldi	r29, 0x00	; 0
    1690:	f4 01       	movw	r30, r8
    1692:	ec 0f       	add	r30, r28
    1694:	fd 1f       	adc	r31, r29
    1696:	8e e2       	ldi	r24, 0x2E	; 46
    1698:	80 83       	st	Z, r24
		
		// Get the value of fraction part up to given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
    169a:	4b 2c       	mov	r4, r11
    169c:	51 2c       	mov	r5, r1
    169e:	61 2c       	mov	r6, r1
    16a0:	71 2c       	mov	r7, r1
    16a2:	c3 01       	movw	r24, r6
    16a4:	b2 01       	movw	r22, r4
    16a6:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__floatunsisf>
    16aa:	9b 01       	movw	r18, r22
    16ac:	ac 01       	movw	r20, r24
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	80 e2       	ldi	r24, 0x20	; 32
    16b4:	91 e4       	ldi	r25, 0x41	; 65
    16b6:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <pow>
    16ba:	9b 01       	movw	r18, r22
    16bc:	ac 01       	movw	r20, r24
    16be:	c7 01       	movw	r24, r14
    16c0:	b6 01       	movw	r22, r12
    16c2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__mulsf3>
		
		intToStr((uint32_t)fpart, res + u32_iterator + 1, afterpoint);
    16c6:	21 96       	adiw	r28, 0x01	; 1
    16c8:	c8 0d       	add	r28, r8
    16ca:	d9 1d       	adc	r29, r9
    16cc:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__fixunssfsi>
    16d0:	93 01       	movw	r18, r6
    16d2:	82 01       	movw	r16, r4
    16d4:	ae 01       	movw	r20, r28
    16d6:	0e 94 bd 0a 	call	0x157a	; 0x157a <intToStr>
	}
}
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	bf 90       	pop	r11
    16ec:	9f 90       	pop	r9
    16ee:	8f 90       	pop	r8
    16f0:	7f 90       	pop	r7
    16f2:	6f 90       	pop	r6
    16f4:	5f 90       	pop	r5
    16f6:	4f 90       	pop	r4
    16f8:	08 95       	ret

000016fa <main>:

#include "APP/Car/CarControl.h"

int main(void)
{
	APP_INIT();
    16fa:	0e 94 b5 00 	call	0x16a	; 0x16a <APP_INIT>
	
	while (1)
	{
		
		APP_UPDATE();
    16fe:	0e 94 b9 00 	call	0x172	; 0x172 <APP_UPDATE>
    1702:	fd cf       	rjmp	.-6      	; 0x16fe <main+0x4>

00001704 <DIO_Init>:

#include "dio.h"


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
    1704:	fc 01       	movw	r30, r24
	E_STATUS au8_error=E_NOK;
	if(((configurations->port <= DIO_PORTD)&&(configurations->port >= DIO_PORTA))&&
    1706:	90 81       	ld	r25, Z
    1708:	94 30       	cpi	r25, 0x04	; 4
    170a:	08 f0       	brcs	.+2      	; 0x170e <DIO_Init+0xa>
    170c:	8e c0       	rjmp	.+284    	; 0x182a <DIO_Init+0x126>
	((configurations->pin <= PIN_7) && (configurations->pin >= PIN_0)))
    170e:	81 81       	ldd	r24, Z+1	; 0x01


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
	E_STATUS au8_error=E_NOK;
	if(((configurations->port <= DIO_PORTD)&&(configurations->port >= DIO_PORTA))&&
    1710:	88 30       	cpi	r24, 0x08	; 8
    1712:	08 f0       	brcs	.+2      	; 0x1716 <DIO_Init+0x12>
    1714:	8c c0       	rjmp	.+280    	; 0x182e <DIO_Init+0x12a>
	((configurations->pin <= PIN_7) && (configurations->pin >= PIN_0)))
	{
		
		switch(configurations->port)
    1716:	91 30       	cpi	r25, 0x01	; 1
    1718:	41 f1       	breq	.+80     	; 0x176a <DIO_Init+0x66>
    171a:	38 f0       	brcs	.+14     	; 0x172a <DIO_Init+0x26>
    171c:	92 30       	cpi	r25, 0x02	; 2
    171e:	09 f4       	brne	.+2      	; 0x1722 <DIO_Init+0x1e>
    1720:	44 c0       	rjmp	.+136    	; 0x17aa <DIO_Init+0xa6>
    1722:	93 30       	cpi	r25, 0x03	; 3
    1724:	09 f4       	brne	.+2      	; 0x1728 <DIO_Init+0x24>
    1726:	61 c0       	rjmp	.+194    	; 0x17ea <DIO_Init+0xe6>
    1728:	84 c0       	rjmp	.+264    	; 0x1832 <DIO_Init+0x12e>
		{
			case DIO_PORTA:
			{
				if(configurations->dir == OUTPUT)
    172a:	92 81       	ldd	r25, Z+2	; 0x02
    172c:	91 30       	cpi	r25, 0x01	; 1
    172e:	71 f4       	brne	.+28     	; 0x174c <DIO_Init+0x48>
				{	
					SET_BIT(PORTA_DIR,configurations->pin);
    1730:	4a b3       	in	r20, 0x1a	; 26
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	b9 01       	movw	r22, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <DIO_Init+0x3a>
    173a:	66 0f       	add	r22, r22
    173c:	77 1f       	adc	r23, r23
    173e:	8a 95       	dec	r24
    1740:	e2 f7       	brpl	.-8      	; 0x173a <DIO_Init+0x36>
    1742:	cb 01       	movw	r24, r22
    1744:	84 2b       	or	r24, r20
    1746:	8a bb       	out	0x1a, r24	; 26
					au8_error = E_OK;
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	08 95       	ret
				}
				else
				{
					RESET_BIT(PORTA_DIR,configurations->pin);
    174c:	4a b3       	in	r20, 0x1a	; 26
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	b9 01       	movw	r22, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_Init+0x56>
    1756:	66 0f       	add	r22, r22
    1758:	77 1f       	adc	r23, r23
    175a:	8a 95       	dec	r24
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_Init+0x52>
    175e:	cb 01       	movw	r24, r22
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8a bb       	out	0x1a, r24	; 26
#include "dio.h"


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
	E_STATUS au8_error=E_NOK;
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	08 95       	ret
				
				break;
			}
			case DIO_PORTB:
			{
				if(configurations->dir == OUTPUT)
    176a:	92 81       	ldd	r25, Z+2	; 0x02
    176c:	91 30       	cpi	r25, 0x01	; 1
    176e:	71 f4       	brne	.+28     	; 0x178c <DIO_Init+0x88>
				{
					SET_BIT(PORTB_DIR,configurations->pin);
    1770:	47 b3       	in	r20, 0x17	; 23
    1772:	21 e0       	ldi	r18, 0x01	; 1
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	b9 01       	movw	r22, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_Init+0x7a>
    177a:	66 0f       	add	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	8a 95       	dec	r24
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_Init+0x76>
    1782:	cb 01       	movw	r24, r22
    1784:	84 2b       	or	r24, r20
    1786:	87 bb       	out	0x17, r24	; 23
				}else
				{
					RESET_BIT(PORTB_DIR,configurations->pin);
				}
				au8_error = E_OK;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	08 95       	ret
				if(configurations->dir == OUTPUT)
				{
					SET_BIT(PORTB_DIR,configurations->pin);
				}else
				{
					RESET_BIT(PORTB_DIR,configurations->pin);
    178c:	47 b3       	in	r20, 0x17	; 23
    178e:	21 e0       	ldi	r18, 0x01	; 1
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	b9 01       	movw	r22, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_Init+0x96>
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	8a 95       	dec	r24
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <DIO_Init+0x92>
    179e:	cb 01       	movw	r24, r22
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	87 bb       	out	0x17, r24	; 23
				}
				au8_error = E_OK;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	08 95       	ret
				break;
			}
			case DIO_PORTC:
			{
				if(configurations->dir == OUTPUT)
    17aa:	92 81       	ldd	r25, Z+2	; 0x02
    17ac:	91 30       	cpi	r25, 0x01	; 1
    17ae:	71 f4       	brne	.+28     	; 0x17cc <DIO_Init+0xc8>
				{
					SET_BIT(PORTC_DIR,configurations->pin);
    17b0:	44 b3       	in	r20, 0x14	; 20
    17b2:	21 e0       	ldi	r18, 0x01	; 1
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	b9 01       	movw	r22, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_Init+0xba>
    17ba:	66 0f       	add	r22, r22
    17bc:	77 1f       	adc	r23, r23
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_Init+0xb6>
    17c2:	cb 01       	movw	r24, r22
    17c4:	84 2b       	or	r24, r20
    17c6:	84 bb       	out	0x14, r24	; 20
				}else
				{
					RESET_BIT(PORTC_DIR,configurations->pin);
				}
				au8_error = E_OK;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	08 95       	ret
				if(configurations->dir == OUTPUT)
				{
					SET_BIT(PORTC_DIR,configurations->pin);
				}else
				{
					RESET_BIT(PORTC_DIR,configurations->pin);
    17cc:	44 b3       	in	r20, 0x14	; 20
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	b9 01       	movw	r22, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_Init+0xd6>
    17d6:	66 0f       	add	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	8a 95       	dec	r24
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <DIO_Init+0xd2>
    17de:	cb 01       	movw	r24, r22
    17e0:	80 95       	com	r24
    17e2:	84 23       	and	r24, r20
    17e4:	84 bb       	out	0x14, r24	; 20
				}
				au8_error = E_OK;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	08 95       	ret
				break;
			}
			case DIO_PORTD:
			{
				if(configurations->dir == OUTPUT)
    17ea:	92 81       	ldd	r25, Z+2	; 0x02
    17ec:	91 30       	cpi	r25, 0x01	; 1
    17ee:	71 f4       	brne	.+28     	; 0x180c <DIO_Init+0x108>
				{
					SET_BIT(PORTD_DIR,configurations->pin);
    17f0:	41 b3       	in	r20, 0x11	; 17
    17f2:	21 e0       	ldi	r18, 0x01	; 1
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	b9 01       	movw	r22, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <DIO_Init+0xfa>
    17fa:	66 0f       	add	r22, r22
    17fc:	77 1f       	adc	r23, r23
    17fe:	8a 95       	dec	r24
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <DIO_Init+0xf6>
    1802:	cb 01       	movw	r24, r22
    1804:	84 2b       	or	r24, r20
    1806:	81 bb       	out	0x11, r24	; 17
				}else
				{
					RESET_BIT(PORTD_DIR,configurations->pin);
				}
				au8_error = E_OK;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	08 95       	ret
				if(configurations->dir == OUTPUT)
				{
					SET_BIT(PORTD_DIR,configurations->pin);
				}else
				{
					RESET_BIT(PORTD_DIR,configurations->pin);
    180c:	41 b3       	in	r20, 0x11	; 17
    180e:	21 e0       	ldi	r18, 0x01	; 1
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	b9 01       	movw	r22, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_Init+0x116>
    1816:	66 0f       	add	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	8a 95       	dec	r24
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_Init+0x112>
    181e:	cb 01       	movw	r24, r22
    1820:	80 95       	com	r24
    1822:	84 23       	and	r24, r20
    1824:	81 bb       	out	0x11, r24	; 17
				}
				au8_error = E_OK;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	08 95       	ret
#include "dio.h"


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
	E_STATUS au8_error=E_NOK;
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	08 95       	ret
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	08 95       	ret
    1832:	80 e0       	ldi	r24, 0x00	; 0
			}

		}
	}
	return au8_error;
}
    1834:	08 95       	ret

00001836 <DIO_WritePIN>:


E_STATUS DIO_WritePIN(uint8_t port,EN_pins pin,uint8_t data)
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	08 f0       	brcs	.+2      	; 0x183c <DIO_WritePIN+0x6>
    183a:	78 c0       	rjmp	.+240    	; 0x192c <DIO_WritePIN+0xf6>
    183c:	68 30       	cpi	r22, 0x08	; 8
    183e:	08 f0       	brcs	.+2      	; 0x1842 <DIO_WritePIN+0xc>
    1840:	77 c0       	rjmp	.+238    	; 0x1930 <DIO_WritePIN+0xfa>
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
		switch(port)
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	11 f1       	breq	.+68     	; 0x188a <DIO_WritePIN+0x54>
    1846:	30 f0       	brcs	.+12     	; 0x1854 <DIO_WritePIN+0x1e>
    1848:	82 30       	cpi	r24, 0x02	; 2
    184a:	d1 f1       	breq	.+116    	; 0x18c0 <DIO_WritePIN+0x8a>
    184c:	83 30       	cpi	r24, 0x03	; 3
    184e:	09 f4       	brne	.+2      	; 0x1852 <DIO_WritePIN+0x1c>
    1850:	52 c0       	rjmp	.+164    	; 0x18f6 <DIO_WritePIN+0xc0>
    1852:	70 c0       	rjmp	.+224    	; 0x1934 <DIO_WritePIN+0xfe>
		{
			case DIO_PORTA:
			{
				if(data == HIGH)
    1854:	41 30       	cpi	r20, 0x01	; 1
    1856:	61 f4       	brne	.+24     	; 0x1870 <DIO_WritePIN+0x3a>
				{
					SET_BIT(PORTA_DATA,pin);
    1858:	2b b3       	in	r18, 0x1b	; 27
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_WritePIN+0x2e>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	6a 95       	dec	r22
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_WritePIN+0x2a>
    1868:	82 2b       	or	r24, r18
    186a:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTA_DATA,pin);
				}else
				{
					RESET_BIT(PORTA_DATA,pin);
    1870:	2b b3       	in	r18, 0x1b	; 27
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_WritePIN+0x46>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	6a 95       	dec	r22
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <DIO_WritePIN+0x42>
    1880:	80 95       	com	r24
    1882:	82 23       	and	r24, r18
    1884:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	08 95       	ret
				}
				break;
			}
			case DIO_PORTB:
			{
				if(data == HIGH)
    188a:	41 30       	cpi	r20, 0x01	; 1
    188c:	61 f4       	brne	.+24     	; 0x18a6 <DIO_WritePIN+0x70>
				{
					SET_BIT(PORTB_DATA,pin);
    188e:	28 b3       	in	r18, 0x18	; 24
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_WritePIN+0x64>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	6a 95       	dec	r22
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <DIO_WritePIN+0x60>
    189e:	82 2b       	or	r24, r18
    18a0:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTB_DATA,pin);
				}else
				{
					RESET_BIT(PORTB_DATA,pin);
    18a6:	28 b3       	in	r18, 0x18	; 24
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <DIO_WritePIN+0x7c>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	6a 95       	dec	r22
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <DIO_WritePIN+0x78>
    18b6:	80 95       	com	r24
    18b8:	82 23       	and	r24, r18
    18ba:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	08 95       	ret
				}
				break;
			}
			case DIO_PORTC:
			{
				if(data == HIGH)
    18c0:	41 30       	cpi	r20, 0x01	; 1
    18c2:	61 f4       	brne	.+24     	; 0x18dc <DIO_WritePIN+0xa6>
				{
					SET_BIT(PORTC_DATA,pin);
    18c4:	25 b3       	in	r18, 0x15	; 21
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_WritePIN+0x9a>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	6a 95       	dec	r22
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <DIO_WritePIN+0x96>
    18d4:	82 2b       	or	r24, r18
    18d6:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTC_DATA,pin);
				}else
				{
					RESET_BIT(PORTC_DATA,pin);
    18dc:	25 b3       	in	r18, 0x15	; 21
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <DIO_WritePIN+0xb2>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	6a 95       	dec	r22
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <DIO_WritePIN+0xae>
    18ec:	80 95       	com	r24
    18ee:	82 23       	and	r24, r18
    18f0:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	08 95       	ret
				}
				break;
			}
			case DIO_PORTD:
			{
				if(data == HIGH)
    18f6:	41 30       	cpi	r20, 0x01	; 1
    18f8:	61 f4       	brne	.+24     	; 0x1912 <DIO_WritePIN+0xdc>
				{
					SET_BIT(PORTD_DATA,pin);
    18fa:	22 b3       	in	r18, 0x12	; 18
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_WritePIN+0xd0>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	6a 95       	dec	r22
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_WritePIN+0xcc>
    190a:	82 2b       	or	r24, r18
    190c:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTD_DATA,pin);
				}else
				{
					RESET_BIT(PORTD_DATA,pin);
    1912:	22 b3       	in	r18, 0x12	; 18
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_WritePIN+0xe8>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	6a 95       	dec	r22
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_WritePIN+0xe4>
    1922:	80 95       	com	r24
    1924:	82 23       	and	r24, r18
    1926:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	08 95       	ret
}


E_STATUS DIO_WritePIN(uint8_t port,EN_pins pin,uint8_t data)
{
	E_STATUS au8_error=E_NOK;
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	08 95       	ret
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	08 95       	ret
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
    1934:	81 e0       	ldi	r24, 0x01	; 1
			}

		}
	}
	return au8_error;
}
    1936:	08 95       	ret

00001938 <external_interrupt_init>:

#include "interrupt.h"

E_STATUS external_interrupt_init(uint8_t external_INT_num, uint8_t edge)
{
	SET_BIT(SREG, PIN_7);
    1938:	9f b7       	in	r25, 0x3f	; 63
    193a:	90 68       	ori	r25, 0x80	; 128
    193c:	9f bf       	out	0x3f, r25	; 63
	if((edge == low_lvl) || (edge == any_logic_lvl) || (edge == falling_edge) || (edge == rising_edge) )
    193e:	64 30       	cpi	r22, 0x04	; 4
    1940:	08 f0       	brcs	.+2      	; 0x1944 <external_interrupt_init+0xc>
    1942:	45 c0       	rjmp	.+138    	; 0x19ce <external_interrupt_init+0x96>
	{
		if(external_INT_num == interrupt0)
    1944:	81 11       	cpse	r24, r1
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <external_interrupt_init+0x38>
		{
			MCUCR =( MCUCR & 0xfc) | (edge & 0x03);
    1948:	85 b7       	in	r24, 0x35	; 53
    194a:	8c 7f       	andi	r24, 0xFC	; 252
    194c:	63 70       	andi	r22, 0x03	; 3
    194e:	68 2b       	or	r22, r24
    1950:	65 bf       	out	0x35, r22	; 53
			SET_BIT(GICR, int0_bit);
    1952:	8b b7       	in	r24, 0x3b	; 59
    1954:	80 64       	ori	r24, 0x40	; 64
    1956:	8b bf       	out	0x3b, r24	; 59
			configs.port = DIO_PORTD;
    1958:	e2 ea       	ldi	r30, 0xA2	; 162
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	80 83       	st	Z, r24
			configs.pin = PIN_2;
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = INPUT;
    1964:	12 82       	std	Z+2, r1	; 0x02
			DIO_Init(&configs);
    1966:	cf 01       	movw	r24, r30
    1968:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
			return E_OK;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	08 95       	ret
	
		}
		else if(external_INT_num == interrupt1)
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	99 f4       	brne	.+38     	; 0x199a <external_interrupt_init+0x62>
		{
			MCUCR =( MCUCR & 0xf3) | (edge & 0x0c);
    1974:	85 b7       	in	r24, 0x35	; 53
    1976:	83 7f       	andi	r24, 0xF3	; 243
    1978:	6c 70       	andi	r22, 0x0C	; 12
    197a:	68 2b       	or	r22, r24
    197c:	65 bf       	out	0x35, r22	; 53
			SET_BIT(GICR, int1_bit);
    197e:	8b b7       	in	r24, 0x3b	; 59
    1980:	80 68       	ori	r24, 0x80	; 128
    1982:	8b bf       	out	0x3b, r24	; 59
			configs.port = DIO_PORTD;
    1984:	e2 ea       	ldi	r30, 0xA2	; 162
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	83 e0       	ldi	r24, 0x03	; 3
    198a:	80 83       	st	Z, r24
			configs.pin = PIN_3;
    198c:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = INPUT;
    198e:	12 82       	std	Z+2, r1	; 0x02
			DIO_Init(&configs);
    1990:	cf 01       	movw	r24, r30
    1992:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
			return E_OK;
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	08 95       	ret
	
		}
		else if(external_INT_num == interrupt2)
    199a:	82 30       	cpi	r24, 0x02	; 2
    199c:	d1 f4       	brne	.+52     	; 0x19d2 <external_interrupt_init+0x9a>
		{
			if(edge == falling_edge)
    199e:	62 30       	cpi	r22, 0x02	; 2
    19a0:	21 f4       	brne	.+8      	; 0x19aa <external_interrupt_init+0x72>
			{
				RESET_BIT(MCUCSR, ISC2);
    19a2:	84 b7       	in	r24, 0x34	; 52
    19a4:	8f 7b       	andi	r24, 0xBF	; 191
    19a6:	84 bf       	out	0x34, r24	; 52
    19a8:	03 c0       	rjmp	.+6      	; 0x19b0 <external_interrupt_init+0x78>
			}
			else
			{
				SET_BIT(MCUCSR, ISC2);
    19aa:	84 b7       	in	r24, 0x34	; 52
    19ac:	80 64       	ori	r24, 0x40	; 64
    19ae:	84 bf       	out	0x34, r24	; 52
			}
			SET_BIT(GICR, int2_bit);
    19b0:	8b b7       	in	r24, 0x3b	; 59
    19b2:	80 62       	ori	r24, 0x20	; 32
    19b4:	8b bf       	out	0x3b, r24	; 59
			configs.port = DIO_PORTB;
    19b6:	e2 ea       	ldi	r30, 0xA2	; 162
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	80 83       	st	Z, r24
			configs.pin = PIN_2;
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = INPUT;
    19c2:	12 82       	std	Z+2, r1	; 0x02
			DIO_Init(&configs);
    19c4:	cf 01       	movw	r24, r30
    19c6:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
			return E_OK;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	08 95       	ret
			return E_NOK;
		}
	}
	else
	{
		return E_NOK;
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	08 95       	ret
			return E_OK;
			
		}
		else
		{
			return E_NOK;
    19d2:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return E_NOK;
	}
}
    19d4:	08 95       	ret

000019d6 <PWM_InitPins>:
/******************************************************************************
*                         LOCAL FUNCTIONS									  *
*******************************************************************************/
uint8_t PWM_InitPins(PWM_TIMER TimerNo)
{
	switch (TimerNo)
    19d6:	88 23       	and	r24, r24
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <PWM_InitPins+0xa>
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	69 f0       	breq	.+26     	; 0x19f8 <PWM_InitPins+0x22>
    19de:	19 c0       	rjmp	.+50     	; 0x1a12 <PWM_InitPins+0x3c>
	{
		{
			case  PWM_TIMER0:
			configs.port = DIO_PORTB;
    19e0:	e2 ea       	ldi	r30, 0xA2	; 162
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 83       	st	Z, r24
			configs.pin = PIN_3;
    19e8:	93 e0       	ldi	r25, 0x03	; 3
    19ea:	91 83       	std	Z+1, r25	; 0x01
			configs.dir = OUTPUT;
    19ec:	82 83       	std	Z+2, r24	; 0x02
			DIO_Init(&configs);
    19ee:	cf 01       	movw	r24, r30
    19f0:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
		default:
		{
			return E_NOK;
		}
	}
	return E_OK;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
			case  PWM_TIMER0:
			configs.port = DIO_PORTB;
			configs.pin = PIN_3;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
    19f6:	08 95       	ret
		}
		case  PWM_TIMER2:
		{
			configs.port = DIO_PORTD;
    19f8:	e2 ea       	ldi	r30, 0xA2	; 162
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	83 e0       	ldi	r24, 0x03	; 3
    19fe:	80 83       	st	Z, r24
			configs.pin = PIN_7;
    1a00:	87 e0       	ldi	r24, 0x07	; 7
    1a02:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = OUTPUT;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	82 83       	std	Z+2, r24	; 0x02
			DIO_Init(&configs);
    1a08:	cf 01       	movw	r24, r30
    1a0a:	0e 94 82 0b 	call	0x1704	; 0x1704 <DIO_Init>
		default:
		{
			return E_NOK;
		}
	}
	return E_OK;
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
		{
			configs.port = DIO_PORTD;
			configs.pin = PIN_7;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
    1a10:	08 95       	ret
		}
		default:
		{
			return E_NOK;
    1a12:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return E_OK;
}
    1a14:	08 95       	ret

00001a16 <PWM_START>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/

uint8_t PWM_START(PWM_TIMER TimerNo, uint8_t dutyCycle)
{
    1a16:	cf 93       	push	r28
	if (dutyCycle > 100)
    1a18:	65 36       	cpi	r22, 0x65	; 101
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <PWM_START+0x8>
    1a1c:	4e c0       	rjmp	.+156    	; 0x1aba <PWM_START+0xa4>
    1a1e:	c8 2f       	mov	r28, r24
	{
		return E_NOK;
	}
	else
	{
		if (TimerNo == PWM_TIMER0)
    1a20:	81 11       	cpse	r24, r1
    1a22:	22 c0       	rjmp	.+68     	; 0x1a68 <PWM_START+0x52>
		{
			TCCR0 |= PWM_TIMER0_MODE;
    1a24:	83 b7       	in	r24, 0x33	; 51
    1a26:	88 64       	ori	r24, 0x48	; 72
    1a28:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= PWM_TIMER0_PRESCALER;
    1a2a:	83 b7       	in	r24, 0x33	; 51
    1a2c:	81 60       	ori	r24, 0x01	; 1
    1a2e:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= PWM_TIMER0_OC0_MODE;
    1a30:	83 b7       	in	r24, 0x33	; 51
    1a32:	80 62       	ori	r24, 0x20	; 32
    1a34:	83 bf       	out	0x33, r24	; 51
			if (PWM_TIMER0_OC0_MODE == PWM_OC0_NONINVERTING_MODE)
			{
				if (dutyCycle == 0)
    1a36:	61 11       	cpse	r22, r1
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <PWM_START+0x28>
				{
					OCR0 = 0;
    1a3a:	1c be       	out	0x3c, r1	; 60
    1a3c:	38 c0       	rjmp	.+112    	; 0x1aae <PWM_START+0x98>
				}
				else
				{
					OCR0 = 2.56 * dutyCycle - 1;
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
    1a48:	2a e0       	ldi	r18, 0x0A	; 10
    1a4a:	37 ed       	ldi	r19, 0xD7	; 215
    1a4c:	43 e2       	ldi	r20, 0x23	; 35
    1a4e:	50 e4       	ldi	r21, 0x40	; 64
    1a50:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__mulsf3>
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__subsf3>
    1a60:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__fixunssfsi>
    1a64:	6c bf       	out	0x3c, r22	; 60
    1a66:	23 c0       	rjmp	.+70     	; 0x1aae <PWM_START+0x98>
				{
					OCR0 = 255 - 2.56 * dutyCycle;
				}
			}
		}
		else if (TimerNo == PWM_TIMER2)
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	49 f5       	brne	.+82     	; 0x1abe <PWM_START+0xa8>
		{
			TCCR2 |= PWM_TIMER2_MODE;
    1a6c:	85 b5       	in	r24, 0x25	; 37
    1a6e:	88 64       	ori	r24, 0x48	; 72
    1a70:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= PWM_TIMER2_PRESCALER;
    1a72:	85 b5       	in	r24, 0x25	; 37
    1a74:	81 60       	ori	r24, 0x01	; 1
    1a76:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= PWM_TIMER2_OC0_MODE;
    1a78:	85 b5       	in	r24, 0x25	; 37
    1a7a:	80 62       	ori	r24, 0x20	; 32
    1a7c:	85 bd       	out	0x25, r24	; 37
			if (PWM_TIMER2_MODE == PWM_MODE_FASTPWM)
			{
				if (PWM_TIMER2_OC0_MODE == PWM_OC0_NONINVERTING_MODE)
				{
					if (dutyCycle == 0)
    1a7e:	61 11       	cpse	r22, r1
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <PWM_START+0x70>
					{
						OCR2 = 0;
    1a82:	13 bc       	out	0x23, r1	; 35
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <PWM_START+0x98>
					}
					else
					{
						OCR2 = 2.56 * dutyCycle - 1;
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
    1a90:	2a e0       	ldi	r18, 0x0A	; 10
    1a92:	37 ed       	ldi	r19, 0xD7	; 215
    1a94:	43 e2       	ldi	r20, 0x23	; 35
    1a96:	50 e4       	ldi	r21, 0x40	; 64
    1a98:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__mulsf3>
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__subsf3>
    1aa8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__fixunssfsi>
    1aac:	63 bd       	out	0x23, r22	; 35
		{
			return E_NOK;
		}
	}

	if (E_NOK == PWM_InitPins(TimerNo))
    1aae:	8c 2f       	mov	r24, r28
    1ab0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <PWM_InitPins>
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <PWM_START+0xac>
    1ab8:	05 c0       	rjmp	.+10     	; 0x1ac4 <PWM_START+0xae>

uint8_t PWM_START(PWM_TIMER TimerNo, uint8_t dutyCycle)
{
	if (dutyCycle > 100)
	{
		return E_NOK;
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <PWM_START+0xae>
				}
			}
		}
		else
		{
			return E_NOK;
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <PWM_START+0xae>
	}
	else
	{
		
	}
	return E_OK;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
}
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret

00001ac8 <__subsf3>:
    1ac8:	50 58       	subi	r21, 0x80	; 128

00001aca <__addsf3>:
    1aca:	bb 27       	eor	r27, r27
    1acc:	aa 27       	eor	r26, r26
    1ace:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__addsf3x>
    1ad2:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__fp_round>
    1ad6:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__fp_pscA>
    1ada:	38 f0       	brcs	.+14     	; 0x1aea <__addsf3+0x20>
    1adc:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fp_pscB>
    1ae0:	20 f0       	brcs	.+8      	; 0x1aea <__addsf3+0x20>
    1ae2:	39 f4       	brne	.+14     	; 0x1af2 <__addsf3+0x28>
    1ae4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae6:	19 f4       	brne	.+6      	; 0x1aee <__addsf3+0x24>
    1ae8:	26 f4       	brtc	.+8      	; 0x1af2 <__addsf3+0x28>
    1aea:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__fp_nan>
    1aee:	0e f4       	brtc	.+2      	; 0x1af2 <__addsf3+0x28>
    1af0:	e0 95       	com	r30
    1af2:	e7 fb       	bst	r30, 7
    1af4:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__fp_inf>

00001af8 <__addsf3x>:
    1af8:	e9 2f       	mov	r30, r25
    1afa:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__fp_split3>
    1afe:	58 f3       	brcs	.-42     	; 0x1ad6 <__addsf3+0xc>
    1b00:	ba 17       	cp	r27, r26
    1b02:	62 07       	cpc	r22, r18
    1b04:	73 07       	cpc	r23, r19
    1b06:	84 07       	cpc	r24, r20
    1b08:	95 07       	cpc	r25, r21
    1b0a:	20 f0       	brcs	.+8      	; 0x1b14 <__addsf3x+0x1c>
    1b0c:	79 f4       	brne	.+30     	; 0x1b2c <__addsf3x+0x34>
    1b0e:	a6 f5       	brtc	.+104    	; 0x1b78 <__addsf3x+0x80>
    1b10:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__fp_zero>
    1b14:	0e f4       	brtc	.+2      	; 0x1b18 <__addsf3x+0x20>
    1b16:	e0 95       	com	r30
    1b18:	0b 2e       	mov	r0, r27
    1b1a:	ba 2f       	mov	r27, r26
    1b1c:	a0 2d       	mov	r26, r0
    1b1e:	0b 01       	movw	r0, r22
    1b20:	b9 01       	movw	r22, r18
    1b22:	90 01       	movw	r18, r0
    1b24:	0c 01       	movw	r0, r24
    1b26:	ca 01       	movw	r24, r20
    1b28:	a0 01       	movw	r20, r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	ff 27       	eor	r31, r31
    1b2e:	59 1b       	sub	r21, r25
    1b30:	99 f0       	breq	.+38     	; 0x1b58 <__addsf3x+0x60>
    1b32:	59 3f       	cpi	r21, 0xF9	; 249
    1b34:	50 f4       	brcc	.+20     	; 0x1b4a <__addsf3x+0x52>
    1b36:	50 3e       	cpi	r21, 0xE0	; 224
    1b38:	68 f1       	brcs	.+90     	; 0x1b94 <__addsf3x+0x9c>
    1b3a:	1a 16       	cp	r1, r26
    1b3c:	f0 40       	sbci	r31, 0x00	; 0
    1b3e:	a2 2f       	mov	r26, r18
    1b40:	23 2f       	mov	r18, r19
    1b42:	34 2f       	mov	r19, r20
    1b44:	44 27       	eor	r20, r20
    1b46:	58 5f       	subi	r21, 0xF8	; 248
    1b48:	f3 cf       	rjmp	.-26     	; 0x1b30 <__addsf3x+0x38>
    1b4a:	46 95       	lsr	r20
    1b4c:	37 95       	ror	r19
    1b4e:	27 95       	ror	r18
    1b50:	a7 95       	ror	r26
    1b52:	f0 40       	sbci	r31, 0x00	; 0
    1b54:	53 95       	inc	r21
    1b56:	c9 f7       	brne	.-14     	; 0x1b4a <__addsf3x+0x52>
    1b58:	7e f4       	brtc	.+30     	; 0x1b78 <__addsf3x+0x80>
    1b5a:	1f 16       	cp	r1, r31
    1b5c:	ba 0b       	sbc	r27, r26
    1b5e:	62 0b       	sbc	r22, r18
    1b60:	73 0b       	sbc	r23, r19
    1b62:	84 0b       	sbc	r24, r20
    1b64:	ba f0       	brmi	.+46     	; 0x1b94 <__addsf3x+0x9c>
    1b66:	91 50       	subi	r25, 0x01	; 1
    1b68:	a1 f0       	breq	.+40     	; 0x1b92 <__addsf3x+0x9a>
    1b6a:	ff 0f       	add	r31, r31
    1b6c:	bb 1f       	adc	r27, r27
    1b6e:	66 1f       	adc	r22, r22
    1b70:	77 1f       	adc	r23, r23
    1b72:	88 1f       	adc	r24, r24
    1b74:	c2 f7       	brpl	.-16     	; 0x1b66 <__addsf3x+0x6e>
    1b76:	0e c0       	rjmp	.+28     	; 0x1b94 <__addsf3x+0x9c>
    1b78:	ba 0f       	add	r27, r26
    1b7a:	62 1f       	adc	r22, r18
    1b7c:	73 1f       	adc	r23, r19
    1b7e:	84 1f       	adc	r24, r20
    1b80:	48 f4       	brcc	.+18     	; 0x1b94 <__addsf3x+0x9c>
    1b82:	87 95       	ror	r24
    1b84:	77 95       	ror	r23
    1b86:	67 95       	ror	r22
    1b88:	b7 95       	ror	r27
    1b8a:	f7 95       	ror	r31
    1b8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1b8e:	08 f0       	brcs	.+2      	; 0x1b92 <__addsf3x+0x9a>
    1b90:	b0 cf       	rjmp	.-160    	; 0x1af2 <__addsf3+0x28>
    1b92:	93 95       	inc	r25
    1b94:	88 0f       	add	r24, r24
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <__addsf3x+0xa2>
    1b98:	99 27       	eor	r25, r25
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	97 95       	ror	r25
    1b9e:	87 95       	ror	r24
    1ba0:	08 95       	ret

00001ba2 <__cmpsf2>:
    1ba2:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_cmp>
    1ba6:	08 f4       	brcc	.+2      	; 0x1baa <__cmpsf2+0x8>
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	08 95       	ret

00001bac <__divsf3>:
    1bac:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3x>
    1bb0:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__fp_round>
    1bb4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fp_pscB>
    1bb8:	58 f0       	brcs	.+22     	; 0x1bd0 <__divsf3+0x24>
    1bba:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__fp_pscA>
    1bbe:	40 f0       	brcs	.+16     	; 0x1bd0 <__divsf3+0x24>
    1bc0:	29 f4       	brne	.+10     	; 0x1bcc <__divsf3+0x20>
    1bc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc4:	29 f0       	breq	.+10     	; 0x1bd0 <__divsf3+0x24>
    1bc6:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__fp_inf>
    1bca:	51 11       	cpse	r21, r1
    1bcc:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__fp_szero>
    1bd0:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__fp_nan>

00001bd4 <__divsf3x>:
    1bd4:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__fp_split3>
    1bd8:	68 f3       	brcs	.-38     	; 0x1bb4 <__divsf3+0x8>

00001bda <__divsf3_pse>:
    1bda:	99 23       	and	r25, r25
    1bdc:	b1 f3       	breq	.-20     	; 0x1bca <__divsf3+0x1e>
    1bde:	55 23       	and	r21, r21
    1be0:	91 f3       	breq	.-28     	; 0x1bc6 <__divsf3+0x1a>
    1be2:	95 1b       	sub	r25, r21
    1be4:	55 0b       	sbc	r21, r21
    1be6:	bb 27       	eor	r27, r27
    1be8:	aa 27       	eor	r26, r26
    1bea:	62 17       	cp	r22, r18
    1bec:	73 07       	cpc	r23, r19
    1bee:	84 07       	cpc	r24, r20
    1bf0:	38 f0       	brcs	.+14     	; 0x1c00 <__divsf3_pse+0x26>
    1bf2:	9f 5f       	subi	r25, 0xFF	; 255
    1bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf6:	22 0f       	add	r18, r18
    1bf8:	33 1f       	adc	r19, r19
    1bfa:	44 1f       	adc	r20, r20
    1bfc:	aa 1f       	adc	r26, r26
    1bfe:	a9 f3       	breq	.-22     	; 0x1bea <__divsf3_pse+0x10>
    1c00:	35 d0       	rcall	.+106    	; 0x1c6c <__divsf3_pse+0x92>
    1c02:	0e 2e       	mov	r0, r30
    1c04:	3a f0       	brmi	.+14     	; 0x1c14 <__divsf3_pse+0x3a>
    1c06:	e0 e8       	ldi	r30, 0x80	; 128
    1c08:	32 d0       	rcall	.+100    	; 0x1c6e <__divsf3_pse+0x94>
    1c0a:	91 50       	subi	r25, 0x01	; 1
    1c0c:	50 40       	sbci	r21, 0x00	; 0
    1c0e:	e6 95       	lsr	r30
    1c10:	00 1c       	adc	r0, r0
    1c12:	ca f7       	brpl	.-14     	; 0x1c06 <__divsf3_pse+0x2c>
    1c14:	2b d0       	rcall	.+86     	; 0x1c6c <__divsf3_pse+0x92>
    1c16:	fe 2f       	mov	r31, r30
    1c18:	29 d0       	rcall	.+82     	; 0x1c6c <__divsf3_pse+0x92>
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	bb 1f       	adc	r27, r27
    1c22:	26 17       	cp	r18, r22
    1c24:	37 07       	cpc	r19, r23
    1c26:	48 07       	cpc	r20, r24
    1c28:	ab 07       	cpc	r26, r27
    1c2a:	b0 e8       	ldi	r27, 0x80	; 128
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <__divsf3_pse+0x56>
    1c2e:	bb 0b       	sbc	r27, r27
    1c30:	80 2d       	mov	r24, r0
    1c32:	bf 01       	movw	r22, r30
    1c34:	ff 27       	eor	r31, r31
    1c36:	93 58       	subi	r25, 0x83	; 131
    1c38:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3a:	3a f0       	brmi	.+14     	; 0x1c4a <__divsf3_pse+0x70>
    1c3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3e:	51 05       	cpc	r21, r1
    1c40:	78 f0       	brcs	.+30     	; 0x1c60 <__divsf3_pse+0x86>
    1c42:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__fp_inf>
    1c46:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__fp_szero>
    1c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4c:	e4 f3       	brlt	.-8      	; 0x1c46 <__divsf3_pse+0x6c>
    1c4e:	98 3e       	cpi	r25, 0xE8	; 232
    1c50:	d4 f3       	brlt	.-12     	; 0x1c46 <__divsf3_pse+0x6c>
    1c52:	86 95       	lsr	r24
    1c54:	77 95       	ror	r23
    1c56:	67 95       	ror	r22
    1c58:	b7 95       	ror	r27
    1c5a:	f7 95       	ror	r31
    1c5c:	9f 5f       	subi	r25, 0xFF	; 255
    1c5e:	c9 f7       	brne	.-14     	; 0x1c52 <__divsf3_pse+0x78>
    1c60:	88 0f       	add	r24, r24
    1c62:	91 1d       	adc	r25, r1
    1c64:	96 95       	lsr	r25
    1c66:	87 95       	ror	r24
    1c68:	97 f9       	bld	r25, 7
    1c6a:	08 95       	ret
    1c6c:	e1 e0       	ldi	r30, 0x01	; 1
    1c6e:	66 0f       	add	r22, r22
    1c70:	77 1f       	adc	r23, r23
    1c72:	88 1f       	adc	r24, r24
    1c74:	bb 1f       	adc	r27, r27
    1c76:	62 17       	cp	r22, r18
    1c78:	73 07       	cpc	r23, r19
    1c7a:	84 07       	cpc	r24, r20
    1c7c:	ba 07       	cpc	r27, r26
    1c7e:	20 f0       	brcs	.+8      	; 0x1c88 <__divsf3_pse+0xae>
    1c80:	62 1b       	sub	r22, r18
    1c82:	73 0b       	sbc	r23, r19
    1c84:	84 0b       	sbc	r24, r20
    1c86:	ba 0b       	sbc	r27, r26
    1c88:	ee 1f       	adc	r30, r30
    1c8a:	88 f7       	brcc	.-30     	; 0x1c6e <__divsf3_pse+0x94>
    1c8c:	e0 95       	com	r30
    1c8e:	08 95       	ret

00001c90 <__fixunssfsi>:
    1c90:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__fp_splitA>
    1c94:	88 f0       	brcs	.+34     	; 0x1cb8 <__fixunssfsi+0x28>
    1c96:	9f 57       	subi	r25, 0x7F	; 127
    1c98:	98 f0       	brcs	.+38     	; 0x1cc0 <__fixunssfsi+0x30>
    1c9a:	b9 2f       	mov	r27, r25
    1c9c:	99 27       	eor	r25, r25
    1c9e:	b7 51       	subi	r27, 0x17	; 23
    1ca0:	b0 f0       	brcs	.+44     	; 0x1cce <__fixunssfsi+0x3e>
    1ca2:	e1 f0       	breq	.+56     	; 0x1cdc <__fixunssfsi+0x4c>
    1ca4:	66 0f       	add	r22, r22
    1ca6:	77 1f       	adc	r23, r23
    1ca8:	88 1f       	adc	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	1a f0       	brmi	.+6      	; 0x1cb4 <__fixunssfsi+0x24>
    1cae:	ba 95       	dec	r27
    1cb0:	c9 f7       	brne	.-14     	; 0x1ca4 <__fixunssfsi+0x14>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <__fixunssfsi+0x4c>
    1cb4:	b1 30       	cpi	r27, 0x01	; 1
    1cb6:	91 f0       	breq	.+36     	; 0x1cdc <__fixunssfsi+0x4c>
    1cb8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <__fp_zero>
    1cbc:	b1 e0       	ldi	r27, 0x01	; 1
    1cbe:	08 95       	ret
    1cc0:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__fp_zero>
    1cc4:	67 2f       	mov	r22, r23
    1cc6:	78 2f       	mov	r23, r24
    1cc8:	88 27       	eor	r24, r24
    1cca:	b8 5f       	subi	r27, 0xF8	; 248
    1ccc:	39 f0       	breq	.+14     	; 0x1cdc <__fixunssfsi+0x4c>
    1cce:	b9 3f       	cpi	r27, 0xF9	; 249
    1cd0:	cc f3       	brlt	.-14     	; 0x1cc4 <__fixunssfsi+0x34>
    1cd2:	86 95       	lsr	r24
    1cd4:	77 95       	ror	r23
    1cd6:	67 95       	ror	r22
    1cd8:	b3 95       	inc	r27
    1cda:	d9 f7       	brne	.-10     	; 0x1cd2 <__fixunssfsi+0x42>
    1cdc:	3e f4       	brtc	.+14     	; 0x1cec <__fixunssfsi+0x5c>
    1cde:	90 95       	com	r25
    1ce0:	80 95       	com	r24
    1ce2:	70 95       	com	r23
    1ce4:	61 95       	neg	r22
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cea:	9f 4f       	sbci	r25, 0xFF	; 255
    1cec:	08 95       	ret

00001cee <__floatunsisf>:
    1cee:	e8 94       	clt
    1cf0:	09 c0       	rjmp	.+18     	; 0x1d04 <__floatsisf+0x12>

00001cf2 <__floatsisf>:
    1cf2:	97 fb       	bst	r25, 7
    1cf4:	3e f4       	brtc	.+14     	; 0x1d04 <__floatsisf+0x12>
    1cf6:	90 95       	com	r25
    1cf8:	80 95       	com	r24
    1cfa:	70 95       	com	r23
    1cfc:	61 95       	neg	r22
    1cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1d00:	8f 4f       	sbci	r24, 0xFF	; 255
    1d02:	9f 4f       	sbci	r25, 0xFF	; 255
    1d04:	99 23       	and	r25, r25
    1d06:	a9 f0       	breq	.+42     	; 0x1d32 <__floatsisf+0x40>
    1d08:	f9 2f       	mov	r31, r25
    1d0a:	96 e9       	ldi	r25, 0x96	; 150
    1d0c:	bb 27       	eor	r27, r27
    1d0e:	93 95       	inc	r25
    1d10:	f6 95       	lsr	r31
    1d12:	87 95       	ror	r24
    1d14:	77 95       	ror	r23
    1d16:	67 95       	ror	r22
    1d18:	b7 95       	ror	r27
    1d1a:	f1 11       	cpse	r31, r1
    1d1c:	f8 cf       	rjmp	.-16     	; 0x1d0e <__floatsisf+0x1c>
    1d1e:	fa f4       	brpl	.+62     	; 0x1d5e <__floatsisf+0x6c>
    1d20:	bb 0f       	add	r27, r27
    1d22:	11 f4       	brne	.+4      	; 0x1d28 <__floatsisf+0x36>
    1d24:	60 ff       	sbrs	r22, 0
    1d26:	1b c0       	rjmp	.+54     	; 0x1d5e <__floatsisf+0x6c>
    1d28:	6f 5f       	subi	r22, 0xFF	; 255
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d30:	16 c0       	rjmp	.+44     	; 0x1d5e <__floatsisf+0x6c>
    1d32:	88 23       	and	r24, r24
    1d34:	11 f0       	breq	.+4      	; 0x1d3a <__floatsisf+0x48>
    1d36:	96 e9       	ldi	r25, 0x96	; 150
    1d38:	11 c0       	rjmp	.+34     	; 0x1d5c <__floatsisf+0x6a>
    1d3a:	77 23       	and	r23, r23
    1d3c:	21 f0       	breq	.+8      	; 0x1d46 <__floatsisf+0x54>
    1d3e:	9e e8       	ldi	r25, 0x8E	; 142
    1d40:	87 2f       	mov	r24, r23
    1d42:	76 2f       	mov	r23, r22
    1d44:	05 c0       	rjmp	.+10     	; 0x1d50 <__floatsisf+0x5e>
    1d46:	66 23       	and	r22, r22
    1d48:	71 f0       	breq	.+28     	; 0x1d66 <__floatsisf+0x74>
    1d4a:	96 e8       	ldi	r25, 0x86	; 134
    1d4c:	86 2f       	mov	r24, r22
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	2a f0       	brmi	.+10     	; 0x1d5e <__floatsisf+0x6c>
    1d54:	9a 95       	dec	r25
    1d56:	66 0f       	add	r22, r22
    1d58:	77 1f       	adc	r23, r23
    1d5a:	88 1f       	adc	r24, r24
    1d5c:	da f7       	brpl	.-10     	; 0x1d54 <__floatsisf+0x62>
    1d5e:	88 0f       	add	r24, r24
    1d60:	96 95       	lsr	r25
    1d62:	87 95       	ror	r24
    1d64:	97 f9       	bld	r25, 7
    1d66:	08 95       	ret

00001d68 <__fp_cmp>:
    1d68:	99 0f       	add	r25, r25
    1d6a:	00 08       	sbc	r0, r0
    1d6c:	55 0f       	add	r21, r21
    1d6e:	aa 0b       	sbc	r26, r26
    1d70:	e0 e8       	ldi	r30, 0x80	; 128
    1d72:	fe ef       	ldi	r31, 0xFE	; 254
    1d74:	16 16       	cp	r1, r22
    1d76:	17 06       	cpc	r1, r23
    1d78:	e8 07       	cpc	r30, r24
    1d7a:	f9 07       	cpc	r31, r25
    1d7c:	c0 f0       	brcs	.+48     	; 0x1dae <__fp_cmp+0x46>
    1d7e:	12 16       	cp	r1, r18
    1d80:	13 06       	cpc	r1, r19
    1d82:	e4 07       	cpc	r30, r20
    1d84:	f5 07       	cpc	r31, r21
    1d86:	98 f0       	brcs	.+38     	; 0x1dae <__fp_cmp+0x46>
    1d88:	62 1b       	sub	r22, r18
    1d8a:	73 0b       	sbc	r23, r19
    1d8c:	84 0b       	sbc	r24, r20
    1d8e:	95 0b       	sbc	r25, r21
    1d90:	39 f4       	brne	.+14     	; 0x1da0 <__fp_cmp+0x38>
    1d92:	0a 26       	eor	r0, r26
    1d94:	61 f0       	breq	.+24     	; 0x1dae <__fp_cmp+0x46>
    1d96:	23 2b       	or	r18, r19
    1d98:	24 2b       	or	r18, r20
    1d9a:	25 2b       	or	r18, r21
    1d9c:	21 f4       	brne	.+8      	; 0x1da6 <__fp_cmp+0x3e>
    1d9e:	08 95       	ret
    1da0:	0a 26       	eor	r0, r26
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <__fp_cmp+0x3e>
    1da4:	a1 40       	sbci	r26, 0x01	; 1
    1da6:	a6 95       	lsr	r26
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	81 1d       	adc	r24, r1
    1dac:	81 1d       	adc	r24, r1
    1dae:	08 95       	ret

00001db0 <__fp_inf>:
    1db0:	97 f9       	bld	r25, 7
    1db2:	9f 67       	ori	r25, 0x7F	; 127
    1db4:	80 e8       	ldi	r24, 0x80	; 128
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	08 95       	ret

00001dbc <__fp_nan>:
    1dbc:	9f ef       	ldi	r25, 0xFF	; 255
    1dbe:	80 ec       	ldi	r24, 0xC0	; 192
    1dc0:	08 95       	ret

00001dc2 <__fp_pscA>:
    1dc2:	00 24       	eor	r0, r0
    1dc4:	0a 94       	dec	r0
    1dc6:	16 16       	cp	r1, r22
    1dc8:	17 06       	cpc	r1, r23
    1dca:	18 06       	cpc	r1, r24
    1dcc:	09 06       	cpc	r0, r25
    1dce:	08 95       	ret

00001dd0 <__fp_pscB>:
    1dd0:	00 24       	eor	r0, r0
    1dd2:	0a 94       	dec	r0
    1dd4:	12 16       	cp	r1, r18
    1dd6:	13 06       	cpc	r1, r19
    1dd8:	14 06       	cpc	r1, r20
    1dda:	05 06       	cpc	r0, r21
    1ddc:	08 95       	ret

00001dde <__fp_round>:
    1dde:	09 2e       	mov	r0, r25
    1de0:	03 94       	inc	r0
    1de2:	00 0c       	add	r0, r0
    1de4:	11 f4       	brne	.+4      	; 0x1dea <__fp_round+0xc>
    1de6:	88 23       	and	r24, r24
    1de8:	52 f0       	brmi	.+20     	; 0x1dfe <__fp_round+0x20>
    1dea:	bb 0f       	add	r27, r27
    1dec:	40 f4       	brcc	.+16     	; 0x1dfe <__fp_round+0x20>
    1dee:	bf 2b       	or	r27, r31
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <__fp_round+0x18>
    1df2:	60 ff       	sbrs	r22, 0
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <__fp_round+0x20>
    1df6:	6f 5f       	subi	r22, 0xFF	; 255
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfe:	08 95       	ret

00001e00 <__fp_split3>:
    1e00:	57 fd       	sbrc	r21, 7
    1e02:	90 58       	subi	r25, 0x80	; 128
    1e04:	44 0f       	add	r20, r20
    1e06:	55 1f       	adc	r21, r21
    1e08:	59 f0       	breq	.+22     	; 0x1e20 <__fp_splitA+0x10>
    1e0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e0c:	71 f0       	breq	.+28     	; 0x1e2a <__fp_splitA+0x1a>
    1e0e:	47 95       	ror	r20

00001e10 <__fp_splitA>:
    1e10:	88 0f       	add	r24, r24
    1e12:	97 fb       	bst	r25, 7
    1e14:	99 1f       	adc	r25, r25
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <__fp_splitA+0x20>
    1e18:	9f 3f       	cpi	r25, 0xFF	; 255
    1e1a:	79 f0       	breq	.+30     	; 0x1e3a <__fp_splitA+0x2a>
    1e1c:	87 95       	ror	r24
    1e1e:	08 95       	ret
    1e20:	12 16       	cp	r1, r18
    1e22:	13 06       	cpc	r1, r19
    1e24:	14 06       	cpc	r1, r20
    1e26:	55 1f       	adc	r21, r21
    1e28:	f2 cf       	rjmp	.-28     	; 0x1e0e <__fp_split3+0xe>
    1e2a:	46 95       	lsr	r20
    1e2c:	f1 df       	rcall	.-30     	; 0x1e10 <__fp_splitA>
    1e2e:	08 c0       	rjmp	.+16     	; 0x1e40 <__fp_splitA+0x30>
    1e30:	16 16       	cp	r1, r22
    1e32:	17 06       	cpc	r1, r23
    1e34:	18 06       	cpc	r1, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	f1 cf       	rjmp	.-30     	; 0x1e1c <__fp_splitA+0xc>
    1e3a:	86 95       	lsr	r24
    1e3c:	71 05       	cpc	r23, r1
    1e3e:	61 05       	cpc	r22, r1
    1e40:	08 94       	sec
    1e42:	08 95       	ret

00001e44 <__fp_zero>:
    1e44:	e8 94       	clt

00001e46 <__fp_szero>:
    1e46:	bb 27       	eor	r27, r27
    1e48:	66 27       	eor	r22, r22
    1e4a:	77 27       	eor	r23, r23
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	97 f9       	bld	r25, 7
    1e50:	08 95       	ret

00001e52 <__gesf2>:
    1e52:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_cmp>
    1e56:	08 f4       	brcc	.+2      	; 0x1e5a <__gesf2+0x8>
    1e58:	8f ef       	ldi	r24, 0xFF	; 255
    1e5a:	08 95       	ret

00001e5c <__mulsf3>:
    1e5c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3x>
    1e60:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__fp_round>
    1e64:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__fp_pscA>
    1e68:	38 f0       	brcs	.+14     	; 0x1e78 <__mulsf3+0x1c>
    1e6a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fp_pscB>
    1e6e:	20 f0       	brcs	.+8      	; 0x1e78 <__mulsf3+0x1c>
    1e70:	95 23       	and	r25, r21
    1e72:	11 f0       	breq	.+4      	; 0x1e78 <__mulsf3+0x1c>
    1e74:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__fp_inf>
    1e78:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__fp_nan>
    1e7c:	11 24       	eor	r1, r1
    1e7e:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__fp_szero>

00001e82 <__mulsf3x>:
    1e82:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <__fp_split3>
    1e86:	70 f3       	brcs	.-36     	; 0x1e64 <__mulsf3+0x8>

00001e88 <__mulsf3_pse>:
    1e88:	95 9f       	mul	r25, r21
    1e8a:	c1 f3       	breq	.-16     	; 0x1e7c <__mulsf3+0x20>
    1e8c:	95 0f       	add	r25, r21
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	55 1f       	adc	r21, r21
    1e92:	62 9f       	mul	r22, r18
    1e94:	f0 01       	movw	r30, r0
    1e96:	72 9f       	mul	r23, r18
    1e98:	bb 27       	eor	r27, r27
    1e9a:	f0 0d       	add	r31, r0
    1e9c:	b1 1d       	adc	r27, r1
    1e9e:	63 9f       	mul	r22, r19
    1ea0:	aa 27       	eor	r26, r26
    1ea2:	f0 0d       	add	r31, r0
    1ea4:	b1 1d       	adc	r27, r1
    1ea6:	aa 1f       	adc	r26, r26
    1ea8:	64 9f       	mul	r22, r20
    1eaa:	66 27       	eor	r22, r22
    1eac:	b0 0d       	add	r27, r0
    1eae:	a1 1d       	adc	r26, r1
    1eb0:	66 1f       	adc	r22, r22
    1eb2:	82 9f       	mul	r24, r18
    1eb4:	22 27       	eor	r18, r18
    1eb6:	b0 0d       	add	r27, r0
    1eb8:	a1 1d       	adc	r26, r1
    1eba:	62 1f       	adc	r22, r18
    1ebc:	73 9f       	mul	r23, r19
    1ebe:	b0 0d       	add	r27, r0
    1ec0:	a1 1d       	adc	r26, r1
    1ec2:	62 1f       	adc	r22, r18
    1ec4:	83 9f       	mul	r24, r19
    1ec6:	a0 0d       	add	r26, r0
    1ec8:	61 1d       	adc	r22, r1
    1eca:	22 1f       	adc	r18, r18
    1ecc:	74 9f       	mul	r23, r20
    1ece:	33 27       	eor	r19, r19
    1ed0:	a0 0d       	add	r26, r0
    1ed2:	61 1d       	adc	r22, r1
    1ed4:	23 1f       	adc	r18, r19
    1ed6:	84 9f       	mul	r24, r20
    1ed8:	60 0d       	add	r22, r0
    1eda:	21 1d       	adc	r18, r1
    1edc:	82 2f       	mov	r24, r18
    1ede:	76 2f       	mov	r23, r22
    1ee0:	6a 2f       	mov	r22, r26
    1ee2:	11 24       	eor	r1, r1
    1ee4:	9f 57       	subi	r25, 0x7F	; 127
    1ee6:	50 40       	sbci	r21, 0x00	; 0
    1ee8:	9a f0       	brmi	.+38     	; 0x1f10 <__mulsf3_pse+0x88>
    1eea:	f1 f0       	breq	.+60     	; 0x1f28 <__mulsf3_pse+0xa0>
    1eec:	88 23       	and	r24, r24
    1eee:	4a f0       	brmi	.+18     	; 0x1f02 <__mulsf3_pse+0x7a>
    1ef0:	ee 0f       	add	r30, r30
    1ef2:	ff 1f       	adc	r31, r31
    1ef4:	bb 1f       	adc	r27, r27
    1ef6:	66 1f       	adc	r22, r22
    1ef8:	77 1f       	adc	r23, r23
    1efa:	88 1f       	adc	r24, r24
    1efc:	91 50       	subi	r25, 0x01	; 1
    1efe:	50 40       	sbci	r21, 0x00	; 0
    1f00:	a9 f7       	brne	.-22     	; 0x1eec <__mulsf3_pse+0x64>
    1f02:	9e 3f       	cpi	r25, 0xFE	; 254
    1f04:	51 05       	cpc	r21, r1
    1f06:	80 f0       	brcs	.+32     	; 0x1f28 <__mulsf3_pse+0xa0>
    1f08:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__fp_inf>
    1f0c:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__fp_szero>
    1f10:	5f 3f       	cpi	r21, 0xFF	; 255
    1f12:	e4 f3       	brlt	.-8      	; 0x1f0c <__mulsf3_pse+0x84>
    1f14:	98 3e       	cpi	r25, 0xE8	; 232
    1f16:	d4 f3       	brlt	.-12     	; 0x1f0c <__mulsf3_pse+0x84>
    1f18:	86 95       	lsr	r24
    1f1a:	77 95       	ror	r23
    1f1c:	67 95       	ror	r22
    1f1e:	b7 95       	ror	r27
    1f20:	f7 95       	ror	r31
    1f22:	e7 95       	ror	r30
    1f24:	9f 5f       	subi	r25, 0xFF	; 255
    1f26:	c1 f7       	brne	.-16     	; 0x1f18 <__mulsf3_pse+0x90>
    1f28:	fe 2b       	or	r31, r30
    1f2a:	88 0f       	add	r24, r24
    1f2c:	91 1d       	adc	r25, r1
    1f2e:	96 95       	lsr	r25
    1f30:	87 95       	ror	r24
    1f32:	97 f9       	bld	r25, 7
    1f34:	08 95       	ret

00001f36 <pow>:
    1f36:	fa 01       	movw	r30, r20
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	30 96       	adiw	r30, 0x00	; 0
    1f3e:	21 05       	cpc	r18, r1
    1f40:	31 05       	cpc	r19, r1
    1f42:	a1 f1       	breq	.+104    	; 0x1fac <pow+0x76>
    1f44:	61 15       	cp	r22, r1
    1f46:	71 05       	cpc	r23, r1
    1f48:	61 f4       	brne	.+24     	; 0x1f62 <pow+0x2c>
    1f4a:	80 38       	cpi	r24, 0x80	; 128
    1f4c:	bf e3       	ldi	r27, 0x3F	; 63
    1f4e:	9b 07       	cpc	r25, r27
    1f50:	49 f1       	breq	.+82     	; 0x1fa4 <pow+0x6e>
    1f52:	68 94       	set
    1f54:	90 38       	cpi	r25, 0x80	; 128
    1f56:	81 05       	cpc	r24, r1
    1f58:	61 f0       	breq	.+24     	; 0x1f72 <pow+0x3c>
    1f5a:	80 38       	cpi	r24, 0x80	; 128
    1f5c:	bf ef       	ldi	r27, 0xFF	; 255
    1f5e:	9b 07       	cpc	r25, r27
    1f60:	41 f0       	breq	.+16     	; 0x1f72 <pow+0x3c>
    1f62:	99 23       	and	r25, r25
    1f64:	4a f5       	brpl	.+82     	; 0x1fb8 <pow+0x82>
    1f66:	ff 3f       	cpi	r31, 0xFF	; 255
    1f68:	e1 05       	cpc	r30, r1
    1f6a:	31 05       	cpc	r19, r1
    1f6c:	21 05       	cpc	r18, r1
    1f6e:	19 f1       	breq	.+70     	; 0x1fb6 <pow+0x80>
    1f70:	e8 94       	clt
    1f72:	08 94       	sec
    1f74:	e7 95       	ror	r30
    1f76:	d9 01       	movw	r26, r18
    1f78:	aa 23       	and	r26, r26
    1f7a:	29 f4       	brne	.+10     	; 0x1f86 <pow+0x50>
    1f7c:	ab 2f       	mov	r26, r27
    1f7e:	be 2f       	mov	r27, r30
    1f80:	f8 5f       	subi	r31, 0xF8	; 248
    1f82:	d0 f3       	brcs	.-12     	; 0x1f78 <pow+0x42>
    1f84:	10 c0       	rjmp	.+32     	; 0x1fa6 <pow+0x70>
    1f86:	ff 5f       	subi	r31, 0xFF	; 255
    1f88:	70 f4       	brcc	.+28     	; 0x1fa6 <pow+0x70>
    1f8a:	a6 95       	lsr	r26
    1f8c:	e0 f7       	brcc	.-8      	; 0x1f86 <pow+0x50>
    1f8e:	f7 39       	cpi	r31, 0x97	; 151
    1f90:	50 f0       	brcs	.+20     	; 0x1fa6 <pow+0x70>
    1f92:	19 f0       	breq	.+6      	; 0x1f9a <pow+0x64>
    1f94:	ff 3a       	cpi	r31, 0xAF	; 175
    1f96:	38 f4       	brcc	.+14     	; 0x1fa6 <pow+0x70>
    1f98:	9f 77       	andi	r25, 0x7F	; 127
    1f9a:	9f 93       	push	r25
    1f9c:	0d d0       	rcall	.+26     	; 0x1fb8 <pow+0x82>
    1f9e:	0f 90       	pop	r0
    1fa0:	07 fc       	sbrc	r0, 7
    1fa2:	90 58       	subi	r25, 0x80	; 128
    1fa4:	08 95       	ret
    1fa6:	46 f0       	brts	.+16     	; 0x1fb8 <pow+0x82>
    1fa8:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__fp_nan>
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	80 e8       	ldi	r24, 0x80	; 128
    1fb2:	9f e3       	ldi	r25, 0x3F	; 63
    1fb4:	08 95       	ret
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	9f 77       	andi	r25, 0x7F	; 127
    1fba:	5f 93       	push	r21
    1fbc:	4f 93       	push	r20
    1fbe:	3f 93       	push	r19
    1fc0:	2f 93       	push	r18
    1fc2:	0e 94 96 10 	call	0x212c	; 0x212c <log>
    1fc6:	2f 91       	pop	r18
    1fc8:	3f 91       	pop	r19
    1fca:	4f 91       	pop	r20
    1fcc:	5f 91       	pop	r21
    1fce:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__mulsf3>
    1fd2:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <exp>
    1fd6:	29 f4       	brne	.+10     	; 0x1fe2 <pow+0xac>
    1fd8:	16 f0       	brts	.+4      	; 0x1fde <pow+0xa8>
    1fda:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__fp_inf>
    1fde:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__fp_zero>
    1fe2:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__fp_nan>

00001fe6 <exp>:
    1fe6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__fp_splitA>
    1fea:	a8 f3       	brcs	.-22     	; 0x1fd6 <pow+0xa0>
    1fec:	96 38       	cpi	r25, 0x86	; 134
    1fee:	a0 f7       	brcc	.-24     	; 0x1fd8 <pow+0xa2>
    1ff0:	07 f8       	bld	r0, 7
    1ff2:	0f 92       	push	r0
    1ff4:	e8 94       	clt
    1ff6:	2b e3       	ldi	r18, 0x3B	; 59
    1ff8:	3a ea       	ldi	r19, 0xAA	; 170
    1ffa:	48 eb       	ldi	r20, 0xB8	; 184
    1ffc:	5f e7       	ldi	r21, 0x7F	; 127
    1ffe:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__mulsf3_pse>
    2002:	0f 92       	push	r0
    2004:	0f 92       	push	r0
    2006:	0f 92       	push	r0
    2008:	4d b7       	in	r20, 0x3d	; 61
    200a:	5e b7       	in	r21, 0x3e	; 62
    200c:	0f 92       	push	r0
    200e:	0e 94 de 10 	call	0x21bc	; 0x21bc <modf>
    2012:	ea ea       	ldi	r30, 0xAA	; 170
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	0e 94 25 10 	call	0x204a	; 0x204a <__fp_powser>
    201a:	4f 91       	pop	r20
    201c:	5f 91       	pop	r21
    201e:	ef 91       	pop	r30
    2020:	ff 91       	pop	r31
    2022:	e5 95       	asr	r30
    2024:	ee 1f       	adc	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	49 f0       	breq	.+18     	; 0x203c <exp+0x56>
    202a:	fe 57       	subi	r31, 0x7E	; 126
    202c:	e0 68       	ori	r30, 0x80	; 128
    202e:	44 27       	eor	r20, r20
    2030:	ee 0f       	add	r30, r30
    2032:	44 1f       	adc	r20, r20
    2034:	fa 95       	dec	r31
    2036:	e1 f7       	brne	.-8      	; 0x2030 <exp+0x4a>
    2038:	41 95       	neg	r20
    203a:	55 0b       	sbc	r21, r21
    203c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <ldexp>
    2040:	0f 90       	pop	r0
    2042:	07 fe       	sbrs	r0, 7
    2044:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <inverse>
    2048:	08 95       	ret

0000204a <__fp_powser>:
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	1f 93       	push	r17
    2050:	0f 93       	push	r16
    2052:	ff 92       	push	r15
    2054:	ef 92       	push	r14
    2056:	df 92       	push	r13
    2058:	7b 01       	movw	r14, r22
    205a:	8c 01       	movw	r16, r24
    205c:	68 94       	set
    205e:	06 c0       	rjmp	.+12     	; 0x206c <__fp_powser+0x22>
    2060:	da 2e       	mov	r13, r26
    2062:	ef 01       	movw	r28, r30
    2064:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3x>
    2068:	fe 01       	movw	r30, r28
    206a:	e8 94       	clt
    206c:	a5 91       	lpm	r26, Z+
    206e:	25 91       	lpm	r18, Z+
    2070:	35 91       	lpm	r19, Z+
    2072:	45 91       	lpm	r20, Z+
    2074:	55 91       	lpm	r21, Z+
    2076:	a6 f3       	brts	.-24     	; 0x2060 <__fp_powser+0x16>
    2078:	ef 01       	movw	r28, r30
    207a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__addsf3x>
    207e:	fe 01       	movw	r30, r28
    2080:	97 01       	movw	r18, r14
    2082:	a8 01       	movw	r20, r16
    2084:	da 94       	dec	r13
    2086:	69 f7       	brne	.-38     	; 0x2062 <__fp_powser+0x18>
    2088:	df 90       	pop	r13
    208a:	ef 90       	pop	r14
    208c:	ff 90       	pop	r15
    208e:	0f 91       	pop	r16
    2090:	1f 91       	pop	r17
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <inverse>:
    2098:	9b 01       	movw	r18, r22
    209a:	ac 01       	movw	r20, r24
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	80 e8       	ldi	r24, 0x80	; 128
    20a2:	9f e3       	ldi	r25, 0x3F	; 63
    20a4:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__divsf3>
    20a8:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__fp_inf>
    20ac:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_mpack>

000020b0 <ldexp>:
    20b0:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__fp_splitA>
    20b4:	d8 f3       	brcs	.-10     	; 0x20ac <inverse+0x14>
    20b6:	99 23       	and	r25, r25
    20b8:	c9 f3       	breq	.-14     	; 0x20ac <inverse+0x14>
    20ba:	94 0f       	add	r25, r20
    20bc:	51 1d       	adc	r21, r1
    20be:	a3 f3       	brvs	.-24     	; 0x20a8 <inverse+0x10>
    20c0:	91 50       	subi	r25, 0x01	; 1
    20c2:	50 40       	sbci	r21, 0x00	; 0
    20c4:	94 f0       	brlt	.+36     	; 0x20ea <ldexp+0x3a>
    20c6:	59 f0       	breq	.+22     	; 0x20de <ldexp+0x2e>
    20c8:	88 23       	and	r24, r24
    20ca:	32 f0       	brmi	.+12     	; 0x20d8 <ldexp+0x28>
    20cc:	66 0f       	add	r22, r22
    20ce:	77 1f       	adc	r23, r23
    20d0:	88 1f       	adc	r24, r24
    20d2:	91 50       	subi	r25, 0x01	; 1
    20d4:	50 40       	sbci	r21, 0x00	; 0
    20d6:	c1 f7       	brne	.-16     	; 0x20c8 <ldexp+0x18>
    20d8:	9e 3f       	cpi	r25, 0xFE	; 254
    20da:	51 05       	cpc	r21, r1
    20dc:	2c f7       	brge	.-54     	; 0x20a8 <inverse+0x10>
    20de:	88 0f       	add	r24, r24
    20e0:	91 1d       	adc	r25, r1
    20e2:	96 95       	lsr	r25
    20e4:	87 95       	ror	r24
    20e6:	97 f9       	bld	r25, 7
    20e8:	08 95       	ret
    20ea:	5f 3f       	cpi	r21, 0xFF	; 255
    20ec:	ac f0       	brlt	.+42     	; 0x2118 <ldexp+0x68>
    20ee:	98 3e       	cpi	r25, 0xE8	; 232
    20f0:	9c f0       	brlt	.+38     	; 0x2118 <ldexp+0x68>
    20f2:	bb 27       	eor	r27, r27
    20f4:	86 95       	lsr	r24
    20f6:	77 95       	ror	r23
    20f8:	67 95       	ror	r22
    20fa:	b7 95       	ror	r27
    20fc:	08 f4       	brcc	.+2      	; 0x2100 <ldexp+0x50>
    20fe:	b1 60       	ori	r27, 0x01	; 1
    2100:	93 95       	inc	r25
    2102:	c1 f7       	brne	.-16     	; 0x20f4 <ldexp+0x44>
    2104:	bb 0f       	add	r27, r27
    2106:	58 f7       	brcc	.-42     	; 0x20de <ldexp+0x2e>
    2108:	11 f4       	brne	.+4      	; 0x210e <ldexp+0x5e>
    210a:	60 ff       	sbrs	r22, 0
    210c:	e8 cf       	rjmp	.-48     	; 0x20de <ldexp+0x2e>
    210e:	6f 5f       	subi	r22, 0xFF	; 255
    2110:	7f 4f       	sbci	r23, 0xFF	; 255
    2112:	8f 4f       	sbci	r24, 0xFF	; 255
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	e3 cf       	rjmp	.-58     	; 0x20de <ldexp+0x2e>
    2118:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__fp_szero>
    211c:	16 f0       	brts	.+4      	; 0x2122 <ldexp+0x72>
    211e:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_mpack>
    2122:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <__fp_nan>
    2126:	68 94       	set
    2128:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <__fp_inf>

0000212c <log>:
    212c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <__fp_splitA>
    2130:	a8 f3       	brcs	.-22     	; 0x211c <ldexp+0x6c>
    2132:	99 23       	and	r25, r25
    2134:	c1 f3       	breq	.-16     	; 0x2126 <ldexp+0x76>
    2136:	ae f3       	brts	.-22     	; 0x2122 <ldexp+0x72>
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	1f 93       	push	r17
    213e:	0f 93       	push	r16
    2140:	ff 92       	push	r15
    2142:	c9 2f       	mov	r28, r25
    2144:	dd 27       	eor	r29, r29
    2146:	88 23       	and	r24, r24
    2148:	2a f0       	brmi	.+10     	; 0x2154 <log+0x28>
    214a:	21 97       	sbiw	r28, 0x01	; 1
    214c:	66 0f       	add	r22, r22
    214e:	77 1f       	adc	r23, r23
    2150:	88 1f       	adc	r24, r24
    2152:	da f7       	brpl	.-10     	; 0x214a <log+0x1e>
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e8       	ldi	r20, 0x80	; 128
    215a:	5f eb       	ldi	r21, 0xBF	; 191
    215c:	9f e3       	ldi	r25, 0x3F	; 63
    215e:	88 39       	cpi	r24, 0x98	; 152
    2160:	20 f0       	brcs	.+8      	; 0x216a <log+0x3e>
    2162:	80 3e       	cpi	r24, 0xE0	; 224
    2164:	38 f0       	brcs	.+14     	; 0x2174 <log+0x48>
    2166:	21 96       	adiw	r28, 0x01	; 1
    2168:	8f 77       	andi	r24, 0x7F	; 127
    216a:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__addsf3>
    216e:	e2 ed       	ldi	r30, 0xD2	; 210
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	04 c0       	rjmp	.+8      	; 0x217c <log+0x50>
    2174:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__addsf3>
    2178:	ef ef       	ldi	r30, 0xFF	; 255
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	0e 94 25 10 	call	0x204a	; 0x204a <__fp_powser>
    2180:	8b 01       	movw	r16, r22
    2182:	be 01       	movw	r22, r28
    2184:	ec 01       	movw	r28, r24
    2186:	fb 2e       	mov	r15, r27
    2188:	6f 57       	subi	r22, 0x7F	; 127
    218a:	71 09       	sbc	r23, r1
    218c:	75 95       	asr	r23
    218e:	77 1f       	adc	r23, r23
    2190:	88 0b       	sbc	r24, r24
    2192:	99 0b       	sbc	r25, r25
    2194:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
    2198:	28 e1       	ldi	r18, 0x18	; 24
    219a:	32 e7       	ldi	r19, 0x72	; 114
    219c:	41 e3       	ldi	r20, 0x31	; 49
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <__mulsf3x>
    21a4:	af 2d       	mov	r26, r15
    21a6:	98 01       	movw	r18, r16
    21a8:	ae 01       	movw	r20, r28
    21aa:	ff 90       	pop	r15
    21ac:	0f 91       	pop	r16
    21ae:	1f 91       	pop	r17
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__addsf3x>
    21b8:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__fp_round>

000021bc <modf>:
    21bc:	fa 01       	movw	r30, r20
    21be:	dc 01       	movw	r26, r24
    21c0:	aa 0f       	add	r26, r26
    21c2:	bb 1f       	adc	r27, r27
    21c4:	9b 01       	movw	r18, r22
    21c6:	ac 01       	movw	r20, r24
    21c8:	bf 57       	subi	r27, 0x7F	; 127
    21ca:	28 f4       	brcc	.+10     	; 0x21d6 <modf+0x1a>
    21cc:	22 27       	eor	r18, r18
    21ce:	33 27       	eor	r19, r19
    21d0:	44 27       	eor	r20, r20
    21d2:	50 78       	andi	r21, 0x80	; 128
    21d4:	20 c0       	rjmp	.+64     	; 0x2216 <modf+0x5a>
    21d6:	b7 51       	subi	r27, 0x17	; 23
    21d8:	90 f4       	brcc	.+36     	; 0x21fe <modf+0x42>
    21da:	ab 2f       	mov	r26, r27
    21dc:	00 24       	eor	r0, r0
    21de:	46 95       	lsr	r20
    21e0:	37 95       	ror	r19
    21e2:	27 95       	ror	r18
    21e4:	01 1c       	adc	r0, r1
    21e6:	a3 95       	inc	r26
    21e8:	d2 f3       	brmi	.-12     	; 0x21de <modf+0x22>
    21ea:	00 20       	and	r0, r0
    21ec:	71 f0       	breq	.+28     	; 0x220a <modf+0x4e>
    21ee:	22 0f       	add	r18, r18
    21f0:	33 1f       	adc	r19, r19
    21f2:	44 1f       	adc	r20, r20
    21f4:	b3 95       	inc	r27
    21f6:	da f3       	brmi	.-10     	; 0x21ee <modf+0x32>
    21f8:	0e d0       	rcall	.+28     	; 0x2216 <modf+0x5a>
    21fa:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__subsf3>
    21fe:	61 30       	cpi	r22, 0x01	; 1
    2200:	71 05       	cpc	r23, r1
    2202:	a0 e8       	ldi	r26, 0x80	; 128
    2204:	8a 07       	cpc	r24, r26
    2206:	b9 46       	sbci	r27, 0x69	; 105
    2208:	30 f4       	brcc	.+12     	; 0x2216 <modf+0x5a>
    220a:	9b 01       	movw	r18, r22
    220c:	ac 01       	movw	r20, r24
    220e:	66 27       	eor	r22, r22
    2210:	77 27       	eor	r23, r23
    2212:	88 27       	eor	r24, r24
    2214:	90 78       	andi	r25, 0x80	; 128
    2216:	30 96       	adiw	r30, 0x00	; 0
    2218:	21 f0       	breq	.+8      	; 0x2222 <modf+0x66>
    221a:	20 83       	st	Z, r18
    221c:	31 83       	std	Z+1, r19	; 0x01
    221e:	42 83       	std	Z+2, r20	; 0x02
    2220:	53 83       	std	Z+3, r21	; 0x03
    2222:	08 95       	ret

00002224 <__fp_mpack>:
    2224:	9f 3f       	cpi	r25, 0xFF	; 255
    2226:	31 f0       	breq	.+12     	; 0x2234 <__fp_mpack_finite+0xc>

00002228 <__fp_mpack_finite>:
    2228:	91 50       	subi	r25, 0x01	; 1
    222a:	20 f4       	brcc	.+8      	; 0x2234 <__fp_mpack_finite+0xc>
    222c:	87 95       	ror	r24
    222e:	77 95       	ror	r23
    2230:	67 95       	ror	r22
    2232:	b7 95       	ror	r27
    2234:	88 0f       	add	r24, r24
    2236:	91 1d       	adc	r25, r1
    2238:	96 95       	lsr	r25
    223a:	87 95       	ror	r24
    223c:	97 f9       	bld	r25, 7
    223e:	08 95       	ret

00002240 <__udivmodsi4>:
    2240:	a1 e2       	ldi	r26, 0x21	; 33
    2242:	1a 2e       	mov	r1, r26
    2244:	aa 1b       	sub	r26, r26
    2246:	bb 1b       	sub	r27, r27
    2248:	fd 01       	movw	r30, r26
    224a:	0d c0       	rjmp	.+26     	; 0x2266 <__udivmodsi4_ep>

0000224c <__udivmodsi4_loop>:
    224c:	aa 1f       	adc	r26, r26
    224e:	bb 1f       	adc	r27, r27
    2250:	ee 1f       	adc	r30, r30
    2252:	ff 1f       	adc	r31, r31
    2254:	a2 17       	cp	r26, r18
    2256:	b3 07       	cpc	r27, r19
    2258:	e4 07       	cpc	r30, r20
    225a:	f5 07       	cpc	r31, r21
    225c:	20 f0       	brcs	.+8      	; 0x2266 <__udivmodsi4_ep>
    225e:	a2 1b       	sub	r26, r18
    2260:	b3 0b       	sbc	r27, r19
    2262:	e4 0b       	sbc	r30, r20
    2264:	f5 0b       	sbc	r31, r21

00002266 <__udivmodsi4_ep>:
    2266:	66 1f       	adc	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	88 1f       	adc	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	1a 94       	dec	r1
    2270:	69 f7       	brne	.-38     	; 0x224c <__udivmodsi4_loop>
    2272:	60 95       	com	r22
    2274:	70 95       	com	r23
    2276:	80 95       	com	r24
    2278:	90 95       	com	r25
    227a:	9b 01       	movw	r18, r22
    227c:	ac 01       	movw	r20, r24
    227e:	bd 01       	movw	r22, r26
    2280:	cf 01       	movw	r24, r30
    2282:	08 95       	ret

00002284 <__tablejump2__>:
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	05 90       	lpm	r0, Z+
    228a:	f4 91       	lpm	r31, Z
    228c:	e0 2d       	mov	r30, r0
    228e:	09 94       	ijmp

00002290 <_exit>:
    2290:	f8 94       	cli

00002292 <__stop_program>:
    2292:	ff cf       	rjmp	.-2      	; 0x2292 <__stop_program>
