
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001602  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001602  00001696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000167  00800068  00800068  0000169e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000169e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002eb2  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef9  00000000  00000000  000048e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025e5  00000000  00000000  000057df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000780  00000000  00000000  00007dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d2e  00000000  00000000  00008544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029c0  00000000  00000000  00009272  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000bc32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__vector_5>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_9>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_11>
      30:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_12>
      34:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__vector_13>
      38:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_14>
      3c:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__vector_15>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	c4 06       	cpc	r12, r20
      56:	79 07       	cpc	r23, r25
      58:	79 07       	cpc	r23, r25
      5a:	79 07       	cpc	r23, r25
      5c:	d1 06       	cpc	r13, r17
      5e:	de 06       	cpc	r13, r30
      60:	79 07       	cpc	r23, r25
      62:	eb 06       	cpc	r14, r27
      64:	53 07       	cpc	r21, r19
      66:	f8 06       	cpc	r15, r24
      68:	05 07       	cpc	r16, r21
      6a:	12 07       	cpc	r17, r18
      6c:	1f 07       	cpc	r17, r31
      6e:	2c 07       	cpc	r18, r28
      70:	39 07       	cpc	r19, r25
      72:	46 07       	cpc	r20, r22
      74:	60 07       	cpc	r22, r16
      76:	6d 07       	cpc	r22, r29
      78:	0a 08       	sbc	r0, r10
      7a:	15 08       	sbc	r1, r5
      7c:	20 08       	sbc	r2, r0
      7e:	2b 08       	sbc	r2, r11
      80:	36 08       	sbc	r3, r6
      82:	41 08       	sbc	r4, r1
      84:	4c 08       	sbc	r4, r12

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf e5       	ldi	r28, 0x5F	; 95
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	10 e0       	ldi	r17, 0x00	; 0
      94:	a0 e6       	ldi	r26, 0x60	; 96
      96:	b0 e0       	ldi	r27, 0x00	; 0
      98:	e2 e0       	ldi	r30, 0x02	; 2
      9a:	f6 e1       	ldi	r31, 0x16	; 22
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a8 36       	cpi	r26, 0x68	; 104
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	21 e0       	ldi	r18, 0x01	; 1
      aa:	a8 e6       	ldi	r26, 0x68	; 104
      ac:	b0 e0       	ldi	r27, 0x00	; 0
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	af 3c       	cpi	r26, 0xCF	; 207
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 91 04 	call	0x922	; 0x922 <main>
      bc:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <APP_Init>:

uint8_t gau8_DataSending[10];

E_STATUS APP_Init()
{
	GIE_voidEnable();
      c4:	0e 94 b2 05 	call	0xb64	; 0xb64 <GIE_voidEnable>
	DIO_SetPinDirection(PortD, PIN1, OUTPUT);
      c8:	41 e0       	ldi	r20, 0x01	; 1
      ca:	61 e0       	ldi	r22, 0x01	; 1
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_SetPinDirection>
	DIO_SetPortDirection(PortC, OUTPUT_PORT);
      d2:	6f ef       	ldi	r22, 0xFF	; 255
      d4:	82 e0       	ldi	r24, 0x02	; 2
      d6:	0e 94 17 05 	call	0xa2e	; 0xa2e <DIO_SetPortDirection>
	configs.modes.uartEnable = ONE;
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <configs>
	BCM_Init(&configs);
      e0:	8b e7       	ldi	r24, 0x7B	; 123
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 9f 00 	call	0x13e	; 0x13e <BCM_Init>
	for (uint8_t i = 1; i <= 10; i++)
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	06 c0       	rjmp	.+12     	; 0xf8 <APP_Init+0x34>
	{
		gau8_DataSending[i-1] = i;
      ec:	e8 2f       	mov	r30, r24
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	e3 58       	subi	r30, 0x83	; 131
      f2:	ff 4f       	sbci	r31, 0xFF	; 255
      f4:	80 83       	st	Z, r24
	GIE_voidEnable();
	DIO_SetPinDirection(PortD, PIN1, OUTPUT);
	DIO_SetPortDirection(PortC, OUTPUT_PORT);
	configs.modes.uartEnable = ONE;
	BCM_Init(&configs);
	for (uint8_t i = 1; i <= 10; i++)
      f6:	8f 5f       	subi	r24, 0xFF	; 255
      f8:	8b 30       	cpi	r24, 0x0B	; 11
      fa:	c0 f3       	brcs	.-16     	; 0xec <APP_Init+0x28>
	{
		gau8_DataSending[i-1] = i;
	}
	return E_OK;
}
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	08 95       	ret

00000100 <APP_Update>:

E_STATUS APP_Update()
{
	BCM_Send(gau8_DataSending, 2, 10);
     100:	4a e0       	ldi	r20, 0x0A	; 10
     102:	50 e0       	ldi	r21, 0x00	; 0
     104:	62 e0       	ldi	r22, 0x02	; 2
     106:	8e e7       	ldi	r24, 0x7E	; 126
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 8b 00 	call	0x116	; 0x116 <BCM_Send>
	BCM_TxMainFunction();
     10e:	0e 94 33 04 	call	0x866	; 0x866 <BCM_TxMainFunction>
	return E_OK;
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	08 95       	ret

00000116 <BCM_Send>:
*******************************************************************************/


E_STATUS BCM_Send(ptr_uint8_t INT_data, uint8_t u8_INT_RxID, uint16_t u16_INT_size)
{
	data=INT_data;
     116:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <data+0x1>
     11a:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <data>
    u8_RxID=u8_INT_RxID;
     11e:	60 93 f5 00 	sts	0x00F5, r22	; 0x8000f5 <u8_RxID>
	u16_size=u16_INT_size;
     122:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <u16_size+0x1>
     126:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <u16_size>
}
     12a:	08 95       	ret

0000012c <Receive_CallBackFunction>:
}


void Receive_CallBackFunction()
{
	UART_ReceiveChar(UART_CH, &gu8_Received);
     12c:	6d e8       	ldi	r22, 0x8D	; 141
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <UART_ReceiveChar>
	gu8_IsReceived = TRUE;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <gu8_IsReceived>
     13c:	08 95       	ret

0000013e <BCM_Init>:
	return u8_Retval;
}


E_STATUS BCM_Init(ST_BCMConfig_t* configurations)
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
	uint8_t u8_ModesCounter = ZERO;
	uint8_t u8_Retval = E_NOK;
	if (NULL_PTR == configurations)
     142:	00 97       	sbiw	r24, 0x00	; 0
     144:	61 f1       	breq	.+88     	; 0x19e <BCM_Init+0x60>
     146:	ec 01       	movw	r28, r24
	{
		u8_Retval = E_NOK;
	}
	else
	{
		if (configurations->modes.uartEnable)
     148:	88 81       	ld	r24, Y
     14a:	88 23       	and	r24, r24
     14c:	81 f0       	breq	.+32     	; 0x16e <BCM_Init+0x30>
		{
			if(OperationSuccess == UART_Init(UART_CH))
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 38 0a 	call	0x1470	; 0x1470 <UART_Init>
     154:	81 11       	cpse	r24, r1
     156:	0d c0       	rjmp	.+26     	; 0x172 <BCM_Init+0x34>
			{
				UART_EnableInterrupt(UART_CH, RECIVE_INT);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <UART_EnableInterrupt>
				UART_SetCallback(UART_CH, RECIVE_INT, Receive_CallBackFunction);
     15e:	46 e9       	ldi	r20, 0x96	; 150
     160:	50 e0       	ldi	r21, 0x00	; 0
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <UART_SetCallback>
				u8_Retval = E_OK;
				u8_ModesCounter++;
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	03 c0       	rjmp	.+6      	; 0x174 <BCM_Init+0x36>
}


E_STATUS BCM_Init(ST_BCMConfig_t* configurations)
{
	uint8_t u8_ModesCounter = ZERO;
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	01 c0       	rjmp	.+2      	; 0x174 <BCM_Init+0x36>
     172:	80 e0       	ldi	r24, 0x00	; 0
			else
			{
				u8_Retval = E_NOK;
			}
		}
		if (configurations->modes.spiEnable)
     174:	99 81       	ldd	r25, Y+1	; 0x01
     176:	99 23       	and	r25, r25
     178:	41 f0       	breq	.+16     	; 0x18a <BCM_Init+0x4c>
		{
			if(OperationSuccess == SPI_Init(SPI_CH))
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <SPI_Init>
     180:	88 23       	and	r24, r24
     182:	11 f0       	breq	.+4      	; 0x188 <BCM_Init+0x4a>
				u8_Retval = E_OK;
				u8_ModesCounter++;
			}
			else
			{
				u8_Retval = E_NOK;
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	01 c0       	rjmp	.+2      	; 0x18a <BCM_Init+0x4c>
		}
		if (configurations->modes.spiEnable)
		{
			if(OperationSuccess == SPI_Init(SPI_CH))
			{
				u8_Retval = E_OK;
     188:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				u8_Retval = E_NOK;
			}
		}
		if (configurations->modes.i2cEnable)
     18a:	9a 81       	ldd	r25, Y+2	; 0x02
     18c:	99 23       	and	r25, r25
     18e:	51 f0       	breq	.+20     	; 0x1a4 <BCM_Init+0x66>
		{
			if(OperationSuccess == I2C_Init(I2C_CH))
     190:	80 e0       	ldi	r24, 0x00	; 0
     192:	0e 94 b6 05 	call	0xb6c	; 0xb6c <I2C_Init>
     196:	88 23       	and	r24, r24
     198:	21 f0       	breq	.+8      	; 0x1a2 <BCM_Init+0x64>
				u8_Retval = E_OK;
				u8_ModesCounter++;
			}
			else
			{
				u8_Retval = E_NOK;
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	03 c0       	rjmp	.+6      	; 0x1a4 <BCM_Init+0x66>
{
	uint8_t u8_ModesCounter = ZERO;
	uint8_t u8_Retval = E_NOK;
	if (NULL_PTR == configurations)
	{
		u8_Retval = E_NOK;
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <BCM_Init+0x66>
		}
		if (configurations->modes.i2cEnable)
		{
			if(OperationSuccess == I2C_Init(I2C_CH))
			{
				u8_Retval = E_OK;
     1a2:	81 e0       	ldi	r24, 0x01	; 1
				u8_Retval = E_NOK;
			}
		}
	}
	return u8_Retval;
}
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	08 95       	ret

000001aa <BCM_SendDataFrame>:


void BCM_SendDataFrame(uint8_t u8_RxID, uint8_t u8_Data, uint16_t u16_Size)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
	switch (gu8_DataState)
     1ae:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <gu8_DataState>
     1b2:	91 30       	cpi	r25, 0x01	; 1
     1b4:	21 f0       	breq	.+8      	; 0x1be <BCM_SendDataFrame+0x14>
     1b6:	92 30       	cpi	r25, 0x02	; 2
     1b8:	09 f4       	brne	.+2      	; 0x1bc <BCM_SendDataFrame+0x12>
     1ba:	52 c1       	rjmp	.+676    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     1bc:	5a c1       	rjmp	.+692    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     1be:	ea 01       	movw	r28, r20
	{
		case  (STATE_DATA_SENDING):
		{
			switch(gu8_State)
     1c0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1c4:	97 30       	cpi	r25, 0x07	; 7
     1c6:	09 f4       	brne	.+2      	; 0x1ca <BCM_SendDataFrame+0x20>
     1c8:	04 c1       	rjmp	.+520    	; 0x3d2 <BCM_SendDataFrame+0x228>
     1ca:	38 f4       	brcc	.+14     	; 0x1da <BCM_SendDataFrame+0x30>
     1cc:	92 30       	cpi	r25, 0x02	; 2
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <BCM_SendDataFrame+0x28>
     1d0:	47 c0       	rjmp	.+142    	; 0x260 <BCM_SendDataFrame+0xb6>
     1d2:	94 30       	cpi	r25, 0x04	; 4
     1d4:	09 f4       	brne	.+2      	; 0x1d8 <BCM_SendDataFrame+0x2e>
     1d6:	82 c0       	rjmp	.+260    	; 0x2dc <BCM_SendDataFrame+0x132>
     1d8:	4c c1       	rjmp	.+664    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     1da:	99 30       	cpi	r25, 0x09	; 9
     1dc:	09 f4       	brne	.+2      	; 0x1e0 <BCM_SendDataFrame+0x36>
     1de:	bc c0       	rjmp	.+376    	; 0x358 <BCM_SendDataFrame+0x1ae>
     1e0:	9f 3f       	cpi	r25, 0xFF	; 255
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <BCM_SendDataFrame+0x3c>
     1e4:	46 c1       	rjmp	.+652    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			{
				case(STATE_PACKET_SENDING_INITIALIZED):
				{
					if (!gu8_IsSent)
     1e6:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     1ea:	81 11       	cpse	r24, r1
     1ec:	16 c0       	rjmp	.+44     	; 0x21a <BCM_SendDataFrame+0x70>
					{
						gu8_CheckSum += BCM_ID;
     1ee:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     1f2:	82 55       	subi	r24, 0x52	; 82
     1f4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
						gu8_IsSent = ONE;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
						gu8_Received = ZERO;
     1fe:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						UART_TransmitChar(UART_CH, BCM_ID);
     202:	6e ea       	ldi	r22, 0xAE	; 174
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
						Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	40 ed       	ldi	r20, 0xD0	; 208
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
					}
					if (UART_ACK == gu8_Received)
     21a:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     21e:	8e 3f       	cpi	r24, 0xFE	; 254
     220:	51 f4       	brne	.+20     	; 0x236 <BCM_SendDataFrame+0x8c>
					{
						gu8_State = STATE_PACKET_SENDING_BCMID;
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						gu8_Received = ZERO;
     228:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						gu8_IsSent = ZERO;
     22c:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
						Timer_sint8_tStop(TIMER_CH);
     230:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     234:	1e c1       	rjmp	.+572    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					}
					else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     236:	20 e0       	ldi	r18, 0x00	; 0
     238:	40 ed       	ldi	r20, 0xD0	; 208
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	09 f0       	breq	.+2      	; 0x24c <BCM_SendDataFrame+0xa2>
     24a:	13 c1       	rjmp	.+550    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					{
						gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						gu8_IsSent = ZERO;
     252:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
						gu8_Received = ZERO;
     256:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						gu8_CheckSum = ZERO;
     25a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
     25e:	09 c1       	rjmp	.+530    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					}
					break;
				}
				case(STATE_PACKET_SENDING_BCMID):
				{
					if (!gu8_IsSent)
     260:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     264:	81 11       	cpse	r24, r1
     266:	16 c0       	rjmp	.+44     	; 0x294 <BCM_SendDataFrame+0xea>
					{
						gu8_CheckSum += PACKET_DATA;
     268:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     26c:	84 50       	subi	r24, 0x04	; 4
     26e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
						gu8_IsSent = ONE;
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
						gu8_Received = ZERO;
     278:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						UART_TransmitChar(UART_CH, PACKET_DATA);
     27c:	6c ef       	ldi	r22, 0xFC	; 252
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
						Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	40 ed       	ldi	r20, 0xD0	; 208
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
					}
					if (UART_ACK == gu8_Received)
     294:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     298:	8e 3f       	cpi	r24, 0xFE	; 254
     29a:	59 f4       	brne	.+22     	; 0x2b2 <BCM_SendDataFrame+0x108>
					{
						gu8_State = STATE_PACKET_SENDING_RXID;
     29c:	84 e0       	ldi	r24, 0x04	; 4
     29e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						gu8_Received = ZERO;
     2a2:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						gu8_IsSent = ZERO;
     2a6:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
						Timer_sint8_tStop(TIMER_CH);
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     2b0:	e0 c0       	rjmp	.+448    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					}
					else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	40 ed       	ldi	r20, 0xD0	; 208
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	09 f0       	breq	.+2      	; 0x2c8 <BCM_SendDataFrame+0x11e>
     2c6:	d5 c0       	rjmp	.+426    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					{
						gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     2c8:	8f ef       	ldi	r24, 0xFF	; 255
     2ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						gu8_IsSent = ZERO;
     2ce:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
						gu8_Received = ZERO;
     2d2:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						gu8_CheckSum = ZERO;
     2d6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
     2da:	cb c0       	rjmp	.+406    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					}
					break;
				}
				case(STATE_PACKET_SENDING_RXID):
				{
					if (!gu8_IsSent)
     2dc:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <gu8_IsSent>
     2e0:	91 11       	cpse	r25, r1
     2e2:	16 c0       	rjmp	.+44     	; 0x310 <BCM_SendDataFrame+0x166>
					{
						gu8_CheckSum += u8_RxID;
     2e4:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
     2e8:	98 0f       	add	r25, r24
     2ea:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__data_end>
						gu8_IsSent = ONE;
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <gu8_IsSent>
						gu8_Received = ZERO;
     2f4:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						UART_TransmitChar(UART_CH, u8_RxID);
     2f8:	68 2f       	mov	r22, r24
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
						Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	40 ed       	ldi	r20, 0xD0	; 208
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
					}
					if (UART_ACK == gu8_Received)
     310:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     314:	8e 3f       	cpi	r24, 0xFE	; 254
     316:	59 f4       	brne	.+22     	; 0x32e <BCM_SendDataFrame+0x184>
					{
						gu8_State = STATE_PACKET_SENDING_DATA;
     318:	89 e0       	ldi	r24, 0x09	; 9
     31a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						gu8_Received = ZERO;
     31e:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						gu8_IsSent = ZERO;
     322:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
						Timer_sint8_tStop(TIMER_CH);
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     32c:	a2 c0       	rjmp	.+324    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					}
					else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	40 ed       	ldi	r20, 0xD0	; 208
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     33e:	81 30       	cpi	r24, 0x01	; 1
     340:	09 f0       	breq	.+2      	; 0x344 <BCM_SendDataFrame+0x19a>
     342:	97 c0       	rjmp	.+302    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					{
						gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						gu8_IsSent = ZERO;
     34a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
						gu8_Received = ZERO;
     34e:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						gu8_CheckSum = ZERO;
     352:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
     356:	8d c0       	rjmp	.+282    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					}
					break;
				}
				case(STATE_PACKET_SENDING_DATA):
				{
					if (!gu8_IsSent)
     358:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     35c:	81 11       	cpse	r24, r1
     35e:	15 c0       	rjmp	.+42     	; 0x38a <BCM_SendDataFrame+0x1e0>
					{
						gu8_Received = ZERO;
     360:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						gu8_CheckSum += u8_Data;
     364:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     368:	86 0f       	add	r24, r22
     36a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
						gu8_IsSent = ONE;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
						UART_TransmitChar(UART_CH, u8_Data);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
						Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     37a:	20 e0       	ldi	r18, 0x00	; 0
     37c:	40 ed       	ldi	r20, 0xD0	; 208
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
					}
					if (UART_ACK == gu8_Received)
     38a:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     38e:	8e 3f       	cpi	r24, 0xFE	; 254
     390:	59 f4       	brne	.+22     	; 0x3a8 <BCM_SendDataFrame+0x1fe>
					{
						gu8_State = STATE_PACKET_SENDING_CS;
     392:	87 e0       	ldi	r24, 0x07	; 7
     394:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						gu8_Received = ZERO;
     398:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						gu8_IsSent = ZERO;
     39c:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
						Timer_sint8_tStop(TIMER_CH);
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     3a6:	65 c0       	rjmp	.+202    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					}
					else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	40 ed       	ldi	r20, 0xD0	; 208
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	09 f0       	breq	.+2      	; 0x3be <BCM_SendDataFrame+0x214>
     3bc:	5a c0       	rjmp	.+180    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					{
						gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						gu8_IsSent = ZERO;
     3c4:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
						gu8_Received = ZERO;
     3c8:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						gu8_CheckSum = ZERO;
     3cc:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
     3d0:	50 c0       	rjmp	.+160    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					}
					break;
				}
				case(STATE_PACKET_SENDING_CS):
				{
					if (!gu8_IsSent)
     3d2:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     3d6:	81 11       	cpse	r24, r1
     3d8:	0f c0       	rjmp	.+30     	; 0x3f8 <BCM_SendDataFrame+0x24e>
					{
						UART_TransmitChar(UART_CH, gu8_CheckSum);
     3da:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
     3de:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
						Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	40 ed       	ldi	r20, 0xD0	; 208
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
						gu8_IsSent = ONE;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
					}
					if (UART_ACK == gu8_Received)
     3f8:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     3fc:	8e 3f       	cpi	r24, 0xFE	; 254
     3fe:	01 f5       	brne	.+64     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
					{
						gu8_State = STATE_PACKET_SENT_INITIALIZED;
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						gu8_Received = ZERO;
     406:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
						gu8_IsSent = ZERO;
     40a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
						Timer_sint8_tStop(TIMER_CH);
     40e:	82 e0       	ldi	r24, 0x02	; 2
     410:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
						gu16_DataCounter++;
     414:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu16_DataCounter>
     418:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <gu16_DataCounter+0x1>
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <gu16_DataCounter+0x1>
     422:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <gu16_DataCounter>
						gu8_CheckSum = ZERO;
     426:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
						if (u16_Size == gu16_DataCounter)
     42a:	8c 17       	cp	r24, r28
     42c:	9d 07       	cpc	r25, r29
     42e:	09 f5       	brne	.+66     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
						{
							gu16_DataCounter = ZERO;
     430:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <gu16_DataCounter+0x1>
     434:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <gu16_DataCounter>
							gu8_DataState = STATE_DATA_SENT;
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gu8_DataState>
     43e:	19 c0       	rjmp	.+50     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
						}
					}
					else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	40 ed       	ldi	r20, 0xD0	; 208
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	79 f4       	brne	.+30     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
					{
						gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						gu8_IsSent = ZERO;
     45a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
     45e:	09 c0       	rjmp	.+18     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			}
			break;
		}
		case (STATE_DATA_SENT):
		{
			gu8_State = STATE_PACKET_SENDING_COMPLETE;
     460:	88 e0       	ldi	r24, 0x08	; 8
     462:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			gu8_IsSent = ZERO;
     466:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
			gu8_Received = ZERO;
     46a:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
			gu8_CheckSum = ZERO;
     46e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
			break;
		}
	}
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <BCM_SendCommandFrame>:
void BCM_SendCommandFrame(uint8_t u8_command, uint8_t u8_RxID, uint16_t u16_size)
{
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	16 2f       	mov	r17, r22
     480:	d4 2f       	mov	r29, r20
     482:	c5 2f       	mov	r28, r21
	uint8_t u8_tempSize = (uint8_t) (u16_size);
	switch(gu8_State)
     484:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     488:	94 30       	cpi	r25, 0x04	; 4
     48a:	09 f4       	brne	.+2      	; 0x48e <BCM_SendCommandFrame+0x16>
     48c:	bd c0       	rjmp	.+378    	; 0x608 <BCM_SendCommandFrame+0x190>
     48e:	48 f4       	brcc	.+18     	; 0x4a2 <BCM_SendCommandFrame+0x2a>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	09 f4       	brne	.+2      	; 0x496 <BCM_SendCommandFrame+0x1e>
     494:	47 c0       	rjmp	.+142    	; 0x524 <BCM_SendCommandFrame+0xac>
     496:	08 f0       	brcs	.+2      	; 0x49a <BCM_SendCommandFrame+0x22>
     498:	7e c0       	rjmp	.+252    	; 0x596 <BCM_SendCommandFrame+0x11e>
     49a:	91 30       	cpi	r25, 0x01	; 1
     49c:	09 f4       	brne	.+2      	; 0x4a0 <BCM_SendCommandFrame+0x28>
     49e:	5e c1       	rjmp	.+700    	; 0x75c <BCM_SendCommandFrame+0x2e4>
     4a0:	de c1       	rjmp	.+956    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     4a2:	96 30       	cpi	r25, 0x06	; 6
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <BCM_SendCommandFrame+0x30>
     4a6:	21 c1       	rjmp	.+578    	; 0x6ea <BCM_SendCommandFrame+0x272>
     4a8:	08 f4       	brcc	.+2      	; 0x4ac <BCM_SendCommandFrame+0x34>
     4aa:	e6 c0       	rjmp	.+460    	; 0x678 <BCM_SendCommandFrame+0x200>
     4ac:	97 30       	cpi	r25, 0x07	; 7
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <BCM_SendCommandFrame+0x3a>
     4b0:	a9 c1       	rjmp	.+850    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     4b2:	9f 3f       	cpi	r25, 0xFF	; 255
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <BCM_SendCommandFrame+0x40>
     4b6:	d3 c1       	rjmp	.+934    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	{
		case(STATE_PACKET_SENDING_INITIALIZED):
		{
			if (!gu8_IsSent)
     4b8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     4bc:	81 11       	cpse	r24, r1
     4be:	13 c0       	rjmp	.+38     	; 0x4e6 <BCM_SendCommandFrame+0x6e>
			{
				UART_TransmitChar(UART_CH, BCM_ID);
     4c0:	6e ea       	ldi	r22, 0xAE	; 174
     4c2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
				Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	40 ed       	ldi	r20, 0xD0	; 208
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	82 e0       	ldi	r24, 0x02	; 2
     4d2:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
				gu8_CheckSum += BCM_ID;
     4d6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     4da:	82 55       	subi	r24, 0x52	; 82
     4dc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
				gu8_IsSent = ONE;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
			}
			if (UART_ACK == gu8_Received)
     4e6:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     4ea:	8e 3f       	cpi	r24, 0xFE	; 254
     4ec:	51 f4       	brne	.+20     	; 0x502 <BCM_SendCommandFrame+0x8a>
			{
				gu8_State = STATE_PACKET_SENDING_BCMID;
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_Received = ZERO;
     4f4:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				gu8_IsSent = ZERO;
     4f8:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
				Timer_sint8_tStop(TIMER_CH);
     4fc:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     500:	ae c1       	rjmp	.+860    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	40 ed       	ldi	r20, 0xD0	; 208
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	09 f0       	breq	.+2      	; 0x518 <BCM_SendCommandFrame+0xa0>
     516:	a3 c1       	rjmp	.+838    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			{
				gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_IsSent = ZERO;
     51e:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
     522:	9d c1       	rjmp	.+826    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			break;
		}
		case(STATE_PACKET_SENDING_BCMID):
		{
			if (!gu8_IsSent)
     524:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     528:	81 11       	cpse	r24, r1
     52a:	15 c0       	rjmp	.+42     	; 0x556 <BCM_SendCommandFrame+0xde>
			{
				gu8_Received = ZERO;
     52c:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				UART_TransmitChar(UART_CH, PACKET_COMMAND);
     530:	6b ef       	ldi	r22, 0xFB	; 251
     532:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
				Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	40 ed       	ldi	r20, 0xD0	; 208
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
				gu8_CheckSum += PACKET_COMMAND;
     546:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     54a:	85 50       	subi	r24, 0x05	; 5
     54c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
				gu8_IsSent = ONE;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
			}
			if (UART_ACK == gu8_Received)
     556:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     55a:	8e 3f       	cpi	r24, 0xFE	; 254
     55c:	59 f4       	brne	.+22     	; 0x574 <BCM_SendCommandFrame+0xfc>
			{
				gu8_State = STATE_PACKET_SENDING_TXID;
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_Received = ZERO;
     564:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				gu8_IsSent = ZERO;
     568:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
				Timer_sint8_tStop(TIMER_CH);
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     572:	75 c1       	rjmp	.+746    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	40 ed       	ldi	r20, 0xD0	; 208
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	09 f0       	breq	.+2      	; 0x58a <BCM_SendCommandFrame+0x112>
     588:	6a c1       	rjmp	.+724    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			{
				gu8_IsSent = ZERO;
     58a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
				gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     594:	64 c1       	rjmp	.+712    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			break;
		}
		case(STATE_PACKET_SENDING_TXID):
		{
			if (!gu8_IsSent)
     596:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     59a:	81 11       	cpse	r24, r1
     59c:	15 c0       	rjmp	.+42     	; 0x5c8 <BCM_SendCommandFrame+0x150>
			{
				gu8_Received = ZERO;
     59e:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				UART_TransmitChar(UART_CH, MCU_ID);
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
				Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	40 ed       	ldi	r20, 0xD0	; 208
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
				gu8_CheckSum += MCU_ID;
     5b8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     5bc:	8f 5f       	subi	r24, 0xFF	; 255
     5be:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
				gu8_IsSent = ONE;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
			}
			if (UART_ACK == gu8_Received)
     5c8:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     5cc:	8e 3f       	cpi	r24, 0xFE	; 254
     5ce:	59 f4       	brne	.+22     	; 0x5e6 <BCM_SendCommandFrame+0x16e>
			{
				gu8_State = STATE_PACKET_SENDING_RXID;
     5d0:	84 e0       	ldi	r24, 0x04	; 4
     5d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_Received = ZERO;
     5d6:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				gu8_IsSent = ZERO;
     5da:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
				Timer_sint8_tStop(TIMER_CH);
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     5e4:	3c c1       	rjmp	.+632    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	40 ed       	ldi	r20, 0xD0	; 208
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	09 f0       	breq	.+2      	; 0x5fc <BCM_SendCommandFrame+0x184>
     5fa:	31 c1       	rjmp	.+610    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			{
				gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_IsSent = ZERO;
     602:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
     606:	2b c1       	rjmp	.+598    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			break;
		}
		case(STATE_PACKET_SENDING_RXID):
		{
			if (!gu8_IsSent)
     608:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     60c:	81 11       	cpse	r24, r1
     60e:	14 c0       	rjmp	.+40     	; 0x638 <BCM_SendCommandFrame+0x1c0>
			{
				gu8_Received = ZERO;
     610:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				UART_TransmitChar(UART_CH, u8_RxID);
     614:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
				Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	40 ed       	ldi	r20, 0xD0	; 208
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
				gu8_CheckSum += u8_RxID;
     628:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     62c:	18 0f       	add	r17, r24
     62e:	10 93 68 00 	sts	0x0068, r17	; 0x800068 <__data_end>
				gu8_IsSent = ONE;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
			}
			if (UART_ACK == gu8_Received)
     638:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     63c:	8e 3f       	cpi	r24, 0xFE	; 254
     63e:	59 f4       	brne	.+22     	; 0x656 <BCM_SendCommandFrame+0x1de>
			{
				gu8_State = STATE_PACKET_SENDING_DATASIZE_BYTE_ONE;
     640:	85 e0       	ldi	r24, 0x05	; 5
     642:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_Received = ZERO;
     646:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				gu8_IsSent = ZERO;
     64a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
				Timer_sint8_tStop(TIMER_CH);
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     654:	04 c1       	rjmp	.+520    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	40 ed       	ldi	r20, 0xD0	; 208
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	09 f0       	breq	.+2      	; 0x66c <BCM_SendCommandFrame+0x1f4>
     66a:	f9 c0       	rjmp	.+498    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			{
				gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     66c:	8f ef       	ldi	r24, 0xFF	; 255
     66e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_IsSent = ZERO;
     672:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
     676:	f3 c0       	rjmp	.+486    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			break;
		}
		case(STATE_PACKET_SENDING_DATASIZE_BYTE_ONE):
		{
			if (!gu8_IsSent)
     678:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     67c:	81 11       	cpse	r24, r1
     67e:	15 c0       	rjmp	.+42     	; 0x6aa <BCM_SendCommandFrame+0x232>
			{
				gu8_Received = ZERO;
     680:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				u8_tempSize = (uint8_t) (u16_size);
				UART_TransmitChar(UART_CH, u8_tempSize);
     684:	64 2f       	mov	r22, r20
     686:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
				Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	40 ed       	ldi	r20, 0xD0	; 208
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
				gu8_CheckSum += u8_tempSize;
     69a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     69e:	d8 0f       	add	r29, r24
     6a0:	d0 93 68 00 	sts	0x0068, r29	; 0x800068 <__data_end>
				gu8_IsSent = ONE;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
			}
			if (UART_ACK == gu8_Received)
     6aa:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     6ae:	8e 3f       	cpi	r24, 0xFE	; 254
     6b0:	59 f4       	brne	.+22     	; 0x6c8 <BCM_SendCommandFrame+0x250>
			{
				gu8_State = STATE_PACKET_SENDING_DATASIZE_BYTE_TWO;
     6b2:	86 e0       	ldi	r24, 0x06	; 6
     6b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_Received = ZERO;
     6b8:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				gu8_IsSent = ZERO;
     6bc:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
				Timer_sint8_tStop(TIMER_CH);
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     6c6:	cb c0       	rjmp	.+406    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	40 ed       	ldi	r20, 0xD0	; 208
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	09 f0       	breq	.+2      	; 0x6de <BCM_SendCommandFrame+0x266>
     6dc:	c0 c0       	rjmp	.+384    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			{
				gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_IsSent = ZERO;
     6e4:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
     6e8:	ba c0       	rjmp	.+372    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			break;
		}
		case(STATE_PACKET_SENDING_DATASIZE_BYTE_TWO):
		{
			if (!gu8_IsSent)
     6ea:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     6ee:	81 11       	cpse	r24, r1
     6f0:	15 c0       	rjmp	.+42     	; 0x71c <BCM_SendCommandFrame+0x2a4>
			{
				gu8_Received = ZERO;
     6f2:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				u8_tempSize = (uint8_t) (u16_size >> 8);
				UART_TransmitChar(UART_CH, u8_tempSize);
     6f6:	65 2f       	mov	r22, r21
     6f8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
				Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	40 ed       	ldi	r20, 0xD0	; 208
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
				gu8_CheckSum += u8_tempSize;
     70c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     710:	c8 0f       	add	r28, r24
     712:	c0 93 68 00 	sts	0x0068, r28	; 0x800068 <__data_end>
				gu8_IsSent = ONE;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
			}
			if (UART_ACK == gu8_Received)
     71c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     720:	8e 3f       	cpi	r24, 0xFE	; 254
     722:	59 f4       	brne	.+22     	; 0x73a <BCM_SendCommandFrame+0x2c2>
			{
				gu8_State = STATE_PACKET_SENDING_COMMAND;
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_Received = ZERO;
     72a:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				gu8_IsSent = ZERO;
     72e:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
				Timer_sint8_tStop(TIMER_CH);
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     738:	92 c0       	rjmp	.+292    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	40 ed       	ldi	r20, 0xD0	; 208
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	09 f0       	breq	.+2      	; 0x750 <BCM_SendCommandFrame+0x2d8>
     74e:	87 c0       	rjmp	.+270    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			{
				gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_IsSent = ZERO;
     756:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
     75a:	81 c0       	rjmp	.+258    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			break;
		}
		case(STATE_PACKET_SENDING_COMMAND):
		{
			if (!gu8_IsSent)
     75c:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <gu8_IsSent>
     760:	91 11       	cpse	r25, r1
     762:	31 c0       	rjmp	.+98     	; 0x7c6 <BCM_SendCommandFrame+0x34e>
			{
				if (PACKET_COMMAND_START == u8_command)
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	b9 f4       	brne	.+46     	; 0x796 <BCM_SendCommandFrame+0x31e>
				{
					gu8_Received = ZERO;
     768:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
					UART_TransmitChar(UART_CH, PACKET_COMMAND_START);
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
					Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	40 ed       	ldi	r20, 0xD0	; 208
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
					gu8_CheckSum += PACKET_COMMAND_START;
     784:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     788:	8f 5f       	subi	r24, 0xFF	; 255
     78a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
					gu8_IsSent = ONE;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
     794:	18 c0       	rjmp	.+48     	; 0x7c6 <BCM_SendCommandFrame+0x34e>
				}
				else if (PACKET_COMMAND_STOP == u8_command)
     796:	82 30       	cpi	r24, 0x02	; 2
     798:	b1 f4       	brne	.+44     	; 0x7c6 <BCM_SendCommandFrame+0x34e>
				{
					gu8_Received = ZERO;
     79a:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
					UART_TransmitChar(UART_CH, PACKET_COMMAND_STOP);
     79e:	62 e0       	ldi	r22, 0x02	; 2
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
					Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY);
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	40 ed       	ldi	r20, 0xD0	; 208
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
					gu8_CheckSum += PACKET_COMMAND_STOP;
     7b6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     7ba:	8e 5f       	subi	r24, 0xFE	; 254
     7bc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
					gu8_IsSent = ONE;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
				{
					
				}
				
			}
			if (UART_ACK == gu8_Received)
     7c6:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     7ca:	8e 3f       	cpi	r24, 0xFE	; 254
     7cc:	59 f4       	brne	.+22     	; 0x7e4 <BCM_SendCommandFrame+0x36c>
			{
				gu8_State = STATE_PACKET_SENDING_CS;
     7ce:	87 e0       	ldi	r24, 0x07	; 7
     7d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_Received = ZERO;
     7d4:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				gu8_IsSent = ZERO;
     7d8:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
				Timer_sint8_tStop(TIMER_CH);
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
     7e2:	3d c0       	rjmp	.+122    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	40 ed       	ldi	r20, 0xD0	; 208
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	99 f5       	brne	.+102    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			{
				gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     7f8:	8f ef       	ldi	r24, 0xFF	; 255
     7fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_IsSent = ZERO;
     7fe:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
     802:	2d c0       	rjmp	.+90     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			break;
		}
		case(STATE_PACKET_SENDING_CS):
		{
			if (!gu8_IsSent)
     804:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <gu8_IsSent>
     808:	81 11       	cpse	r24, r1
     80a:	09 c0       	rjmp	.+18     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
			{
				gu8_Received = ZERO;
     80c:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				UART_TransmitChar(UART_CH, gu8_CheckSum);
     810:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end>
     814:	0e 94 4b 0a 	call	0x1496	; 0x1496 <UART_TransmitChar>
				gu8_IsSent = ONE;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <gu8_IsSent>
			}
			if (UART_ACK == gu8_Received)
     81e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <gu8_Received>
     822:	8e 3f       	cpi	r24, 0xFE	; 254
     824:	69 f4       	brne	.+26     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
			{
				gu8_State = STATE_PACKET_SENDING_COMPLETE;
     826:	88 e0       	ldi	r24, 0x08	; 8
     828:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_Received = ZERO;
     82c:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8_Received>
				gu8_IsSent = ZERO;
     830:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
				Timer_sint8_tStop(TIMER_CH);
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
				gu8_CheckSum = ZERO;
     83a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
     83e:	0f c0       	rjmp	.+30     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			}
			else if (SUCCESS == Timer_NonBlockingdelay(TIMER_CH, TIMER_TIMEOUT, TIMER_PRIORITY))
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	40 ed       	ldi	r20, 0xD0	; 208
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	29 f4       	brne	.+10     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			{
				gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				gu8_IsSent = ZERO;
     85a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <gu8_IsSent>
			}
			break;
		}
	}
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	08 95       	ret

00000866 <BCM_TxMainFunction>:

E_STATUS BCM_TxMainFunction()
{
	
	uint8_t u8_Retval = E_NOK;
	if (NULL_PTR == data)
     866:	20 91 8f 00 	lds	r18, 0x008F	; 0x80008f <data>
     86a:	30 91 90 00 	lds	r19, 0x0090	; 0x800090 <data+0x1>
     86e:	21 15       	cp	r18, r1
     870:	31 05       	cpc	r19, r1
     872:	09 f4       	brne	.+2      	; 0x876 <BCM_TxMainFunction+0x10>
     874:	54 c0       	rjmp	.+168    	; 0x91e <BCM_TxMainFunction+0xb8>
	{
		u8_Retval = E_NOK;
	}
	else
	{
		switch(gu8_PacketState)
     876:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <gu8_PacketState>
     87a:	82 30       	cpi	r24, 0x02	; 2
     87c:	c9 f1       	breq	.+114    	; 0x8f0 <BCM_TxMainFunction+0x8a>
     87e:	8f 3f       	cpi	r24, 0xFF	; 255
     880:	21 f0       	breq	.+8      	; 0x88a <BCM_TxMainFunction+0x24>
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	09 f0       	breq	.+2      	; 0x888 <BCM_TxMainFunction+0x22>
     886:	4b c0       	rjmp	.+150    	; 0x91e <BCM_TxMainFunction+0xb8>
     888:	16 c0       	rjmp	.+44     	; 0x8b6 <BCM_TxMainFunction+0x50>
		{
			case(STATE_PACKET_SENT_INITIALIZED):
			{
				BCM_SendCommandFrame(PACKET_COMMAND_START, u8_RxID, u16_size);
     88a:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <u16_size>
     88e:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <u16_size+0x1>
     892:	60 91 f5 00 	lds	r22, 0x00F5	; 0x8000f5 <u8_RxID>
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e 94 3c 02 	call	0x478	; 0x478 <BCM_SendCommandFrame>
				if (STATE_PACKET_SENDING_COMPLETE == gu8_State)
     8a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8a4:	88 30       	cpi	r24, 0x08	; 8
     8a6:	d9 f5       	brne	.+118    	; 0x91e <BCM_TxMainFunction+0xb8>
				{
					gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					gu8_PacketState = STATE_PACKET_SENT_COMMAND;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gu8_PacketState>
     8b4:	34 c0       	rjmp	.+104    	; 0x91e <BCM_TxMainFunction+0xb8>
				}
				break;
			}
			case(STATE_PACKET_SENT_COMMAND):
			{
				BCM_SendDataFrame(u8_RxID, *(data + gu16_DataCounter), u16_size);
     8b6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <gu16_DataCounter>
     8ba:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <gu16_DataCounter+0x1>
     8be:	f9 01       	movw	r30, r18
     8c0:	e8 0f       	add	r30, r24
     8c2:	f9 1f       	adc	r31, r25
     8c4:	60 81       	ld	r22, Z
     8c6:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <u16_size>
     8ca:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <u16_size+0x1>
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <u8_RxID>
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <BCM_SendDataFrame>
				if (STATE_PACKET_SENDING_COMPLETE == gu8_State)
     8da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8de:	88 30       	cpi	r24, 0x08	; 8
     8e0:	f1 f4       	brne	.+60     	; 0x91e <BCM_TxMainFunction+0xb8>
				{
					gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					gu8_PacketState = STATE_PACKET_SENT_DATA;
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gu8_PacketState>
     8ee:	17 c0       	rjmp	.+46     	; 0x91e <BCM_TxMainFunction+0xb8>
				}
				break;
			}
			case(STATE_PACKET_SENT_DATA):
			{
				BCM_SendCommandFrame(PACKET_COMMAND_STOP, u8_RxID, u16_size);
     8f0:	40 91 88 00 	lds	r20, 0x0088	; 0x800088 <u16_size>
     8f4:	50 91 89 00 	lds	r21, 0x0089	; 0x800089 <u16_size+0x1>
     8f8:	60 91 f5 00 	lds	r22, 0x00F5	; 0x8000f5 <u8_RxID>
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 3c 02 	call	0x478	; 0x478 <BCM_SendCommandFrame>
				if (STATE_PACKET_SENDING_COMPLETE == gu8_State)
     906:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     90a:	88 30       	cpi	r24, 0x08	; 8
     90c:	41 f4       	brne	.+16     	; 0x91e <BCM_TxMainFunction+0xb8>
				{
					gu8_State = STATE_PACKET_SENDING_INITIALIZED;
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					gu8_PacketState = STATE_PACKET_SENT_INITIALIZED;
     914:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <gu8_PacketState>
					gu8_DataState = STATE_DATA_SENDING;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gu8_DataState>
			}
		}
	}
	return u8_Retval;
	
}
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	08 95       	ret

00000922 <main>:

#include "APP/App/app.h"

int main(void)
{
	APP_Init();
     922:	0e 94 62 00 	call	0xc4	; 0xc4 <APP_Init>
    /* Replace with your application code */
    while (1) 
    {
		APP_Update();
     926:	0e 94 80 00 	call	0x100	; 0x100 <APP_Update>
     92a:	fd cf       	rjmp	.-6      	; 0x926 <main+0x4>

0000092c <DIO_SetPinDirection>:
			*value=PIND;
			break;
		}
	}
	return u8_State;
}
     92c:	84 30       	cpi	r24, 0x04	; 4
     92e:	08 f0       	brcs	.+2      	; 0x932 <DIO_SetPinDirection+0x6>
     930:	78 c0       	rjmp	.+240    	; 0xa22 <DIO_SetPinDirection+0xf6>
     932:	68 30       	cpi	r22, 0x08	; 8
     934:	08 f0       	brcs	.+2      	; 0x938 <DIO_SetPinDirection+0xc>
     936:	77 c0       	rjmp	.+238    	; 0xa26 <DIO_SetPinDirection+0xfa>
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	11 f1       	breq	.+68     	; 0x980 <DIO_SetPinDirection+0x54>
     93c:	30 f0       	brcs	.+12     	; 0x94a <DIO_SetPinDirection+0x1e>
     93e:	82 30       	cpi	r24, 0x02	; 2
     940:	d1 f1       	breq	.+116    	; 0x9b6 <DIO_SetPinDirection+0x8a>
     942:	83 30       	cpi	r24, 0x03	; 3
     944:	09 f4       	brne	.+2      	; 0x948 <DIO_SetPinDirection+0x1c>
     946:	52 c0       	rjmp	.+164    	; 0x9ec <DIO_SetPinDirection+0xc0>
     948:	70 c0       	rjmp	.+224    	; 0xa2a <DIO_SetPinDirection+0xfe>
     94a:	41 11       	cpse	r20, r1
     94c:	0d c0       	rjmp	.+26     	; 0x968 <DIO_SetPinDirection+0x3c>
     94e:	2a b3       	in	r18, 0x1a	; 26
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	02 c0       	rjmp	.+4      	; 0x95a <DIO_SetPinDirection+0x2e>
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	6a 95       	dec	r22
     95c:	e2 f7       	brpl	.-8      	; 0x956 <DIO_SetPinDirection+0x2a>
     95e:	80 95       	com	r24
     960:	82 23       	and	r24, r18
     962:	8a bb       	out	0x1a, r24	; 26
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	08 95       	ret
     968:	2a b3       	in	r18, 0x1a	; 26
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	02 c0       	rjmp	.+4      	; 0x974 <DIO_SetPinDirection+0x48>
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	6a 95       	dec	r22
     976:	e2 f7       	brpl	.-8      	; 0x970 <DIO_SetPinDirection+0x44>
     978:	82 2b       	or	r24, r18
     97a:	8a bb       	out	0x1a, r24	; 26
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	08 95       	ret
     980:	41 11       	cpse	r20, r1
     982:	0d c0       	rjmp	.+26     	; 0x99e <DIO_SetPinDirection+0x72>
     984:	27 b3       	in	r18, 0x17	; 23
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	02 c0       	rjmp	.+4      	; 0x990 <DIO_SetPinDirection+0x64>
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	6a 95       	dec	r22
     992:	e2 f7       	brpl	.-8      	; 0x98c <DIO_SetPinDirection+0x60>
     994:	80 95       	com	r24
     996:	82 23       	and	r24, r18
     998:	87 bb       	out	0x17, r24	; 23
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	08 95       	ret
     99e:	27 b3       	in	r18, 0x17	; 23
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <DIO_SetPinDirection+0x7e>
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	6a 95       	dec	r22
     9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <DIO_SetPinDirection+0x7a>
     9ae:	82 2b       	or	r24, r18
     9b0:	87 bb       	out	0x17, r24	; 23
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	08 95       	ret
     9b6:	41 11       	cpse	r20, r1
     9b8:	0d c0       	rjmp	.+26     	; 0x9d4 <DIO_SetPinDirection+0xa8>
     9ba:	24 b3       	in	r18, 0x14	; 20
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <DIO_SetPinDirection+0x9a>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	6a 95       	dec	r22
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <DIO_SetPinDirection+0x96>
     9ca:	80 95       	com	r24
     9cc:	82 23       	and	r24, r18
     9ce:	84 bb       	out	0x14, r24	; 20
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	08 95       	ret
     9d4:	24 b3       	in	r18, 0x14	; 20
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <DIO_SetPinDirection+0xb4>
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	6a 95       	dec	r22
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <DIO_SetPinDirection+0xb0>
     9e4:	82 2b       	or	r24, r18
     9e6:	84 bb       	out	0x14, r24	; 20
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	08 95       	ret
     9ec:	41 11       	cpse	r20, r1
     9ee:	0d c0       	rjmp	.+26     	; 0xa0a <DIO_SetPinDirection+0xde>
     9f0:	21 b3       	in	r18, 0x11	; 17
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_SetPinDirection+0xd0>
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	6a 95       	dec	r22
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_SetPinDirection+0xcc>
     a00:	80 95       	com	r24
     a02:	82 23       	and	r24, r18
     a04:	81 bb       	out	0x11, r24	; 17
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	08 95       	ret
     a0a:	21 b3       	in	r18, 0x11	; 17
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <DIO_SetPinDirection+0xea>
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	6a 95       	dec	r22
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <DIO_SetPinDirection+0xe6>
     a1a:	82 2b       	or	r24, r18
     a1c:	81 bb       	out	0x11, r24	; 17
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	08 95       	ret
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	08 95       	ret
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	08 95       	ret

00000a2e <DIO_SetPortDirection>:
     a2e:	84 30       	cpi	r24, 0x04	; 4
     a30:	a0 f4       	brcc	.+40     	; 0xa5a <DIO_SetPortDirection+0x2c>
     a32:	81 30       	cpi	r24, 0x01	; 1
     a34:	49 f0       	breq	.+18     	; 0xa48 <DIO_SetPortDirection+0x1a>
     a36:	28 f0       	brcs	.+10     	; 0xa42 <DIO_SetPortDirection+0x14>
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	49 f0       	breq	.+18     	; 0xa4e <DIO_SetPortDirection+0x20>
     a3c:	83 30       	cpi	r24, 0x03	; 3
     a3e:	51 f0       	breq	.+20     	; 0xa54 <DIO_SetPortDirection+0x26>
     a40:	0e c0       	rjmp	.+28     	; 0xa5e <DIO_SetPortDirection+0x30>
     a42:	6a bb       	out	0x1a, r22	; 26
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	08 95       	ret
     a48:	67 bb       	out	0x17, r22	; 23
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	08 95       	ret
     a4e:	64 bb       	out	0x14, r22	; 20
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	08 95       	ret
     a54:	61 bb       	out	0x11, r22	; 17
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	08 95       	ret
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	08 95       	ret
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	08 95       	ret

00000a62 <DIO_WritePin>:


E_STATUS DIO_WritePin(EN_PORT_t port, EN_PIN_t pin, EN_PINOUT_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=PIN7)&&(pin>=PIN0))){
     a62:	84 30       	cpi	r24, 0x04	; 4
     a64:	08 f0       	brcs	.+2      	; 0xa68 <DIO_WritePin+0x6>
     a66:	78 c0       	rjmp	.+240    	; 0xb58 <DIO_WritePin+0xf6>
     a68:	68 30       	cpi	r22, 0x08	; 8
     a6a:	08 f0       	brcs	.+2      	; 0xa6e <DIO_WritePin+0xc>
     a6c:	77 c0       	rjmp	.+238    	; 0xb5c <DIO_WritePin+0xfa>
		u8_State=Success;
		switch(port)
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	11 f1       	breq	.+68     	; 0xab6 <DIO_WritePin+0x54>
     a72:	30 f0       	brcs	.+12     	; 0xa80 <DIO_WritePin+0x1e>
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	d1 f1       	breq	.+116    	; 0xaec <DIO_WritePin+0x8a>
     a78:	83 30       	cpi	r24, 0x03	; 3
     a7a:	09 f4       	brne	.+2      	; 0xa7e <DIO_WritePin+0x1c>
     a7c:	52 c0       	rjmp	.+164    	; 0xb22 <DIO_WritePin+0xc0>
     a7e:	70 c0       	rjmp	.+224    	; 0xb60 <DIO_WritePin+0xfe>
		{
		case PortA:
		{
			if(data==HIGH)
     a80:	41 30       	cpi	r20, 0x01	; 1
     a82:	61 f4       	brne	.+24     	; 0xa9c <DIO_WritePin+0x3a>
				SET_BIT(PORTA,pin);
     a84:	2b b3       	in	r18, 0x1b	; 27
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_WritePin+0x2e>
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	6a 95       	dec	r22
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_WritePin+0x2a>
     a94:	82 2b       	or	r24, r18
     a96:	8b bb       	out	0x1b, r24	; 27

E_STATUS DIO_WritePin(EN_PORT_t port, EN_PIN_t pin, EN_PINOUT_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=PIN7)&&(pin>=PIN0))){
		u8_State=Success;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	08 95       	ret
		case PortA:
		{
			if(data==HIGH)
				SET_BIT(PORTA,pin);
			else
				CLEAR_BIT(PORTA,pin);
     a9c:	2b b3       	in	r18, 0x1b	; 27
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <DIO_WritePin+0x46>
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	6a 95       	dec	r22
     aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <DIO_WritePin+0x42>
     aac:	80 95       	com	r24
     aae:	82 23       	and	r24, r18
     ab0:	8b bb       	out	0x1b, r24	; 27

E_STATUS DIO_WritePin(EN_PORT_t port, EN_PIN_t pin, EN_PINOUT_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=PIN7)&&(pin>=PIN0))){
		u8_State=Success;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	08 95       	ret
				CLEAR_BIT(PORTA,pin);
		}
		break;
		case PortB:
		{
			if(data==HIGH)
     ab6:	41 30       	cpi	r20, 0x01	; 1
     ab8:	61 f4       	brne	.+24     	; 0xad2 <DIO_WritePin+0x70>
				SET_BIT(PORTB,pin);
     aba:	28 b3       	in	r18, 0x18	; 24
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_WritePin+0x64>
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	6a 95       	dec	r22
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_WritePin+0x60>
     aca:	82 2b       	or	r24, r18
     acc:	88 bb       	out	0x18, r24	; 24

E_STATUS DIO_WritePin(EN_PORT_t port, EN_PIN_t pin, EN_PINOUT_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=PIN7)&&(pin>=PIN0))){
		u8_State=Success;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	08 95       	ret
		case PortB:
		{
			if(data==HIGH)
				SET_BIT(PORTB,pin);
			else
				CLEAR_BIT(PORTB,pin);
     ad2:	28 b3       	in	r18, 0x18	; 24
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	02 c0       	rjmp	.+4      	; 0xade <DIO_WritePin+0x7c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	6a 95       	dec	r22
     ae0:	e2 f7       	brpl	.-8      	; 0xada <DIO_WritePin+0x78>
     ae2:	80 95       	com	r24
     ae4:	82 23       	and	r24, r18
     ae6:	88 bb       	out	0x18, r24	; 24

E_STATUS DIO_WritePin(EN_PORT_t port, EN_PIN_t pin, EN_PINOUT_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=PIN7)&&(pin>=PIN0))){
		u8_State=Success;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	08 95       	ret
				CLEAR_BIT(PORTB,pin);
		}
		break;
		case PortC:
		{
			if(data==HIGH)
     aec:	41 30       	cpi	r20, 0x01	; 1
     aee:	61 f4       	brne	.+24     	; 0xb08 <DIO_WritePin+0xa6>
				SET_BIT(PORTC,pin);
     af0:	25 b3       	in	r18, 0x15	; 21
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <DIO_WritePin+0x9a>
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	6a 95       	dec	r22
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <DIO_WritePin+0x96>
     b00:	82 2b       	or	r24, r18
     b02:	85 bb       	out	0x15, r24	; 21

E_STATUS DIO_WritePin(EN_PORT_t port, EN_PIN_t pin, EN_PINOUT_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=PIN7)&&(pin>=PIN0))){
		u8_State=Success;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 95       	ret
		case PortC:
		{
			if(data==HIGH)
				SET_BIT(PORTC,pin);
			else
				CLEAR_BIT(PORTC,pin);
     b08:	25 b3       	in	r18, 0x15	; 21
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_WritePin+0xb2>
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	6a 95       	dec	r22
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_WritePin+0xae>
     b18:	80 95       	com	r24
     b1a:	82 23       	and	r24, r18
     b1c:	85 bb       	out	0x15, r24	; 21

E_STATUS DIO_WritePin(EN_PORT_t port, EN_PIN_t pin, EN_PINOUT_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=PIN7)&&(pin>=PIN0))){
		u8_State=Success;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	08 95       	ret
				CLEAR_BIT(PORTC,pin);
		}
		break;
		case PortD:
		{
			if(data==HIGH)
     b22:	41 30       	cpi	r20, 0x01	; 1
     b24:	61 f4       	brne	.+24     	; 0xb3e <DIO_WritePin+0xdc>
				SET_BIT(PORTD,pin);
     b26:	22 b3       	in	r18, 0x12	; 18
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <DIO_WritePin+0xd0>
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	6a 95       	dec	r22
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <DIO_WritePin+0xcc>
     b36:	82 2b       	or	r24, r18
     b38:	82 bb       	out	0x12, r24	; 18

E_STATUS DIO_WritePin(EN_PORT_t port, EN_PIN_t pin, EN_PINOUT_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=PIN7)&&(pin>=PIN0))){
		u8_State=Success;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	08 95       	ret
		case PortD:
		{
			if(data==HIGH)
				SET_BIT(PORTD,pin);
			else
				CLEAR_BIT(PORTD,pin);
     b3e:	22 b3       	in	r18, 0x12	; 18
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <DIO_WritePin+0xe8>
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	6a 95       	dec	r22
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <DIO_WritePin+0xe4>
     b4e:	80 95       	com	r24
     b50:	82 23       	and	r24, r18
     b52:	82 bb       	out	0x12, r24	; 18

E_STATUS DIO_WritePin(EN_PORT_t port, EN_PIN_t pin, EN_PINOUT_t data)
{
	E_STATUS u8_State=ERROR;
	if(((port>=PortA)&&(port<=PortD))&&((pin<=PIN7)&&(pin>=PIN0))){
		u8_State=Success;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	08 95       	ret
}


E_STATUS DIO_WritePin(EN_PORT_t port, EN_PIN_t pin, EN_PINOUT_t data)
{
	E_STATUS u8_State=ERROR;
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	08 95       	ret
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	08 95       	ret
	if(((port>=PortA)&&(port<=PortD))&&((pin<=PIN7)&&(pin>=PIN0))){
		u8_State=Success;
     b60:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
		}
	}
	return u8_State;
}
     b62:	08 95       	ret

00000b64 <GIE_voidEnable>:
#include "GIE_int.h"

/* Description : Enable global interrupt	*/
void GIE_voidEnable(void)
{
	SET_BIT(SREG,GIE_uint8_t_BIT_INDEX);
     b64:	8f b7       	in	r24, 0x3f	; 63
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8f bf       	out	0x3f, r24	; 63
     b6a:	08 95       	ret

00000b6c <I2C_Init>:
   /* variable to store the addresses of the required channel */
   volatile uint8_t * ptr_I2CControlR;
   volatile uint8_t * ptr_I2CStatusR;
   volatile uint8_t * ptr_I2CBitRateR;
   
   switch(I2C_CH)
     b6c:	81 11       	cpse	r24, r1
     b6e:	0b c0       	rjmp	.+22     	; 0xb86 <I2C_Init+0x1a>
      default:
         return E_I2C_INVALID_CH;
   }
   
   /* set pre-scalar value */
   *ptr_I2CStatusR = I2C_CH_0_PRESCALER;
     b70:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <I2C_CH_0_PRESCALER>
     b74:	81 b9       	out	0x01, r24	; 1

   /* set bit rate */
   *ptr_I2CBitRateR = I2C_CH_0_BIT_RATE;
     b76:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <I2C_CH_0_BIT_RATE>
     b7a:	80 b9       	out	0x00, r24	; 0

   /* set control configuration */
   *ptr_I2CControlR = I2C_CH_0_CONTROL_MASK;
     b7c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <I2C_CH_0_CONTROL_MASK>
     b80:	86 bf       	out	0x36, r24	; 54
   
   /* return success message */
   return E_I2C_SUCCESS;
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	08 95       	ret
         ptr_I2CStatusR = &I2C_STATUS_R;
         ptr_I2CBitRateR = &I2C_BIT_RATE_R;
         break;
      #endif
      default:
         return E_I2C_INVALID_CH;
     b86:	82 e0       	ldi	r24, 0x02	; 2
   /* set control configuration */
   *ptr_I2CControlR = I2C_CH_0_CONTROL_MASK;
   
   /* return success message */
   return E_I2C_SUCCESS;
}
     b88:	08 95       	ret

00000b8a <SPI_Init>:
{
	uint8_t ErrRetVal = 0;
	if (callBack != NULL_PTR)
	SPI_TX_Complete_callback = callBack;
	return ErrRetVal;
}
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	90 f5       	brcc	.+100    	; 0xbf2 <SPI_Init+0x68>
     b8e:	1d b8       	out	0x0d, r1	; 13
     b90:	8d b1       	in	r24, 0x0d	; 13
     b92:	80 61       	ori	r24, 0x10	; 16
     b94:	8d b9       	out	0x0d, r24	; 13
     b96:	41 e0       	ldi	r20, 0x01	; 1
     b98:	64 e0       	ldi	r22, 0x04	; 4
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_SetPinDirection>
     ba0:	41 e0       	ldi	r20, 0x01	; 1
     ba2:	64 e0       	ldi	r22, 0x04	; 4
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_WritePin>
     baa:	41 e0       	ldi	r20, 0x01	; 1
     bac:	67 e0       	ldi	r22, 0x07	; 7
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_SetPinDirection>
     bb4:	41 e0       	ldi	r20, 0x01	; 1
     bb6:	65 e0       	ldi	r22, 0x05	; 5
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	0e 94 96 04 	call	0x92c	; 0x92c <DIO_SetPinDirection>
     bbe:	8d b1       	in	r24, 0x0d	; 13
     bc0:	84 60       	ori	r24, 0x04	; 4
     bc2:	8d b9       	out	0x0d, r24	; 13
     bc4:	8d b1       	in	r24, 0x0d	; 13
     bc6:	87 7f       	andi	r24, 0xF7	; 247
     bc8:	8d b9       	out	0x0d, r24	; 13
     bca:	8d b1       	in	r24, 0x0d	; 13
     bcc:	8f 7d       	andi	r24, 0xDF	; 223
     bce:	8d b9       	out	0x0d, r24	; 13
     bd0:	8e b1       	in	r24, 0x0e	; 14
     bd2:	8e 7f       	andi	r24, 0xFE	; 254
     bd4:	8e b9       	out	0x0e, r24	; 14
     bd6:	8d b1       	in	r24, 0x0d	; 13
     bd8:	82 60       	ori	r24, 0x02	; 2
     bda:	8d b9       	out	0x0d, r24	; 13
     bdc:	8d b1       	in	r24, 0x0d	; 13
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	8d b9       	out	0x0d, r24	; 13
     be2:	8e b1       	in	r24, 0x0e	; 14
     be4:	8e b1       	in	r24, 0x0e	; 14
     be6:	8f b1       	in	r24, 0x0f	; 15
     be8:	8d b1       	in	r24, 0x0d	; 13
     bea:	80 64       	ori	r24, 0x40	; 64
     bec:	8d b9       	out	0x0d, r24	; 13
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	08 95       	ret
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	08 95       	ret

00000bf6 <__vector_12>:

void __vector_12(void)
{
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	2f 93       	push	r18
     c02:	3f 93       	push	r19
     c04:	4f 93       	push	r20
     c06:	5f 93       	push	r21
     c08:	6f 93       	push	r22
     c0a:	7f 93       	push	r23
     c0c:	8f 93       	push	r24
     c0e:	9f 93       	push	r25
     c10:	af 93       	push	r26
     c12:	bf 93       	push	r27
     c14:	ef 93       	push	r30
     c16:	ff 93       	push	r31
	if (SPI_TX_Complete_callback != NULL_PTR)
     c18:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <SPI_TX_Complete_callback>
     c1c:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <SPI_TX_Complete_callback+0x1>
     c20:	30 97       	sbiw	r30, 0x00	; 0
     c22:	09 f0       	breq	.+2      	; 0xc26 <__vector_12+0x30>
	SPI_TX_Complete_callback();
     c24:	09 95       	icall
}
     c26:	ff 91       	pop	r31
     c28:	ef 91       	pop	r30
     c2a:	bf 91       	pop	r27
     c2c:	af 91       	pop	r26
     c2e:	9f 91       	pop	r25
     c30:	8f 91       	pop	r24
     c32:	7f 91       	pop	r23
     c34:	6f 91       	pop	r22
     c36:	5f 91       	pop	r21
     c38:	4f 91       	pop	r20
     c3a:	3f 91       	pop	r19
     c3c:	2f 91       	pop	r18
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	0f 90       	pop	r0
     c44:	1f 90       	pop	r1
     c46:	18 95       	reti

00000c48 <Timer_sint8_tInit>:
		return E_OK;
		break;

	}
	return E_NOK;
}
     c48:	83 30       	cpi	r24, 0x03	; 3
     c4a:	08 f0       	brcs	.+2      	; 0xc4e <Timer_sint8_tInit+0x6>
     c4c:	30 c2       	rjmp	.+1120   	; 0x10ae <Timer_sint8_tInit+0x466>
     c4e:	62 31       	cpi	r22, 0x12	; 18
     c50:	08 f0       	brcs	.+2      	; 0xc54 <Timer_sint8_tInit+0xc>
     c52:	2f c2       	rjmp	.+1118   	; 0x10b2 <Timer_sint8_tInit+0x46a>
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	09 f4       	brne	.+2      	; 0xc5a <Timer_sint8_tInit+0x12>
     c58:	8c c0       	rjmp	.+280    	; 0xd72 <Timer_sint8_tInit+0x12a>
     c5a:	20 f0       	brcs	.+8      	; 0xc64 <Timer_sint8_tInit+0x1c>
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	09 f4       	brne	.+2      	; 0xc62 <Timer_sint8_tInit+0x1a>
     c60:	ac c1       	rjmp	.+856    	; 0xfba <Timer_sint8_tInit+0x372>
     c62:	29 c2       	rjmp	.+1106   	; 0x10b6 <Timer_sint8_tInit+0x46e>
     c64:	61 30       	cpi	r22, 0x01	; 1
     c66:	69 f0       	breq	.+26     	; 0xc82 <Timer_sint8_tInit+0x3a>
     c68:	28 f0       	brcs	.+10     	; 0xc74 <Timer_sint8_tInit+0x2c>
     c6a:	62 30       	cpi	r22, 0x02	; 2
     c6c:	89 f0       	breq	.+34     	; 0xc90 <Timer_sint8_tInit+0x48>
     c6e:	63 30       	cpi	r22, 0x03	; 3
     c70:	b1 f0       	breq	.+44     	; 0xc9e <Timer_sint8_tInit+0x56>
     c72:	23 c2       	rjmp	.+1094   	; 0x10ba <Timer_sint8_tInit+0x472>
     c74:	83 b7       	in	r24, 0x33	; 51
     c76:	87 7f       	andi	r24, 0xF7	; 247
     c78:	83 bf       	out	0x33, r24	; 51
     c7a:	83 b7       	in	r24, 0x33	; 51
     c7c:	8f 7b       	andi	r24, 0xBF	; 191
     c7e:	83 bf       	out	0x33, r24	; 51
     c80:	14 c0       	rjmp	.+40     	; 0xcaa <Timer_sint8_tInit+0x62>
     c82:	83 b7       	in	r24, 0x33	; 51
     c84:	87 7f       	andi	r24, 0xF7	; 247
     c86:	83 bf       	out	0x33, r24	; 51
     c88:	83 b7       	in	r24, 0x33	; 51
     c8a:	80 64       	ori	r24, 0x40	; 64
     c8c:	83 bf       	out	0x33, r24	; 51
     c8e:	0d c0       	rjmp	.+26     	; 0xcaa <Timer_sint8_tInit+0x62>
     c90:	83 b7       	in	r24, 0x33	; 51
     c92:	88 60       	ori	r24, 0x08	; 8
     c94:	83 bf       	out	0x33, r24	; 51
     c96:	83 b7       	in	r24, 0x33	; 51
     c98:	8f 7b       	andi	r24, 0xBF	; 191
     c9a:	83 bf       	out	0x33, r24	; 51
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <Timer_sint8_tInit+0x62>
     c9e:	83 b7       	in	r24, 0x33	; 51
     ca0:	88 60       	ori	r24, 0x08	; 8
     ca2:	83 bf       	out	0x33, r24	; 51
     ca4:	83 b7       	in	r24, 0x33	; 51
     ca6:	80 64       	ori	r24, 0x40	; 64
     ca8:	83 bf       	out	0x33, r24	; 51
     caa:	23 30       	cpi	r18, 0x03	; 3
     cac:	31 05       	cpc	r19, r1
     cae:	41 05       	cpc	r20, r1
     cb0:	51 05       	cpc	r21, r1
     cb2:	99 f1       	breq	.+102    	; 0xd1a <Timer_sint8_tInit+0xd2>
     cb4:	58 f4       	brcc	.+22     	; 0xccc <Timer_sint8_tInit+0x84>
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	41 05       	cpc	r20, r1
     cbc:	51 05       	cpc	r21, r1
     cbe:	b9 f0       	breq	.+46     	; 0xcee <Timer_sint8_tInit+0xa6>
     cc0:	21 30       	cpi	r18, 0x01	; 1
     cc2:	31 05       	cpc	r19, r1
     cc4:	41 05       	cpc	r20, r1
     cc6:	51 05       	cpc	r21, r1
     cc8:	e9 f0       	breq	.+58     	; 0xd04 <Timer_sint8_tInit+0xbc>
     cca:	f9 c1       	rjmp	.+1010   	; 0x10be <Timer_sint8_tInit+0x476>
     ccc:	26 30       	cpi	r18, 0x06	; 6
     cce:	31 05       	cpc	r19, r1
     cd0:	41 05       	cpc	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	c1 f1       	breq	.+112    	; 0xd46 <Timer_sint8_tInit+0xfe>
     cd6:	27 30       	cpi	r18, 0x07	; 7
     cd8:	31 05       	cpc	r19, r1
     cda:	41 05       	cpc	r20, r1
     cdc:	51 05       	cpc	r21, r1
     cde:	f1 f1       	breq	.+124    	; 0xd5c <Timer_sint8_tInit+0x114>
     ce0:	25 30       	cpi	r18, 0x05	; 5
     ce2:	31 05       	cpc	r19, r1
     ce4:	41 05       	cpc	r20, r1
     ce6:	51 05       	cpc	r21, r1
     ce8:	09 f0       	breq	.+2      	; 0xcec <Timer_sint8_tInit+0xa4>
     cea:	e9 c1       	rjmp	.+978    	; 0x10be <Timer_sint8_tInit+0x476>
     cec:	21 c0       	rjmp	.+66     	; 0xd30 <Timer_sint8_tInit+0xe8>
     cee:	83 b7       	in	r24, 0x33	; 51
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	83 bf       	out	0x33, r24	; 51
     cf4:	83 b7       	in	r24, 0x33	; 51
     cf6:	8d 7f       	andi	r24, 0xFD	; 253
     cf8:	83 bf       	out	0x33, r24	; 51
     cfa:	83 b7       	in	r24, 0x33	; 51
     cfc:	8b 7f       	andi	r24, 0xFB	; 251
     cfe:	83 bf       	out	0x33, r24	; 51
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	08 95       	ret
     d04:	83 b7       	in	r24, 0x33	; 51
     d06:	8e 7f       	andi	r24, 0xFE	; 254
     d08:	83 bf       	out	0x33, r24	; 51
     d0a:	83 b7       	in	r24, 0x33	; 51
     d0c:	82 60       	ori	r24, 0x02	; 2
     d0e:	83 bf       	out	0x33, r24	; 51
     d10:	83 b7       	in	r24, 0x33	; 51
     d12:	8b 7f       	andi	r24, 0xFB	; 251
     d14:	83 bf       	out	0x33, r24	; 51
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	08 95       	ret
     d1a:	83 b7       	in	r24, 0x33	; 51
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	83 bf       	out	0x33, r24	; 51
     d20:	83 b7       	in	r24, 0x33	; 51
     d22:	82 60       	ori	r24, 0x02	; 2
     d24:	83 bf       	out	0x33, r24	; 51
     d26:	83 b7       	in	r24, 0x33	; 51
     d28:	84 60       	ori	r24, 0x04	; 4
     d2a:	83 bf       	out	0x33, r24	; 51
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	08 95       	ret
     d30:	83 b7       	in	r24, 0x33	; 51
     d32:	8e 7f       	andi	r24, 0xFE	; 254
     d34:	83 bf       	out	0x33, r24	; 51
     d36:	83 b7       	in	r24, 0x33	; 51
     d38:	8d 7f       	andi	r24, 0xFD	; 253
     d3a:	83 bf       	out	0x33, r24	; 51
     d3c:	83 b7       	in	r24, 0x33	; 51
     d3e:	84 60       	ori	r24, 0x04	; 4
     d40:	83 bf       	out	0x33, r24	; 51
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	08 95       	ret
     d46:	83 b7       	in	r24, 0x33	; 51
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	83 bf       	out	0x33, r24	; 51
     d4c:	83 b7       	in	r24, 0x33	; 51
     d4e:	8d 7f       	andi	r24, 0xFD	; 253
     d50:	83 bf       	out	0x33, r24	; 51
     d52:	83 b7       	in	r24, 0x33	; 51
     d54:	84 60       	ori	r24, 0x04	; 4
     d56:	83 bf       	out	0x33, r24	; 51
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	08 95       	ret
     d5c:	83 b7       	in	r24, 0x33	; 51
     d5e:	8e 7f       	andi	r24, 0xFE	; 254
     d60:	83 bf       	out	0x33, r24	; 51
     d62:	83 b7       	in	r24, 0x33	; 51
     d64:	8d 7f       	andi	r24, 0xFD	; 253
     d66:	83 bf       	out	0x33, r24	; 51
     d68:	83 b7       	in	r24, 0x33	; 51
     d6a:	8b 7f       	andi	r24, 0xFB	; 251
     d6c:	83 bf       	out	0x33, r24	; 51
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	08 95       	ret
     d72:	86 2f       	mov	r24, r22
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	82 31       	cpi	r24, 0x12	; 18
     d78:	91 05       	cpc	r25, r1
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <Timer_sint8_tInit+0x136>
     d7c:	ba c0       	rjmp	.+372    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     d7e:	fc 01       	movw	r30, r24
     d80:	e6 5d       	subi	r30, 0xD6	; 214
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__tablejump2__>
     d88:	8f b5       	in	r24, 0x2f	; 47
     d8a:	8e 7f       	andi	r24, 0xFE	; 254
     d8c:	8f bd       	out	0x2f, r24	; 47
     d8e:	8f b5       	in	r24, 0x2f	; 47
     d90:	8d 7f       	andi	r24, 0xFD	; 253
     d92:	8f bd       	out	0x2f, r24	; 47
     d94:	8e b5       	in	r24, 0x2e	; 46
     d96:	87 7f       	andi	r24, 0xF7	; 247
     d98:	8e bd       	out	0x2e, r24	; 46
     d9a:	8e b5       	in	r24, 0x2e	; 46
     d9c:	8f 7e       	andi	r24, 0xEF	; 239
     d9e:	8e bd       	out	0x2e, r24	; 46
     da0:	a8 c0       	rjmp	.+336    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     da2:	8f b5       	in	r24, 0x2f	; 47
     da4:	81 60       	ori	r24, 0x01	; 1
     da6:	8f bd       	out	0x2f, r24	; 47
     da8:	8f b5       	in	r24, 0x2f	; 47
     daa:	8d 7f       	andi	r24, 0xFD	; 253
     dac:	8f bd       	out	0x2f, r24	; 47
     dae:	8e b5       	in	r24, 0x2e	; 46
     db0:	87 7f       	andi	r24, 0xF7	; 247
     db2:	8e bd       	out	0x2e, r24	; 46
     db4:	8e b5       	in	r24, 0x2e	; 46
     db6:	8f 7e       	andi	r24, 0xEF	; 239
     db8:	8e bd       	out	0x2e, r24	; 46
     dba:	9b c0       	rjmp	.+310    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     dbc:	8f b5       	in	r24, 0x2f	; 47
     dbe:	8e 7f       	andi	r24, 0xFE	; 254
     dc0:	8f bd       	out	0x2f, r24	; 47
     dc2:	8f b5       	in	r24, 0x2f	; 47
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	8f bd       	out	0x2f, r24	; 47
     dc8:	8e b5       	in	r24, 0x2e	; 46
     dca:	87 7f       	andi	r24, 0xF7	; 247
     dcc:	8e bd       	out	0x2e, r24	; 46
     dce:	8e b5       	in	r24, 0x2e	; 46
     dd0:	8f 7e       	andi	r24, 0xEF	; 239
     dd2:	8e bd       	out	0x2e, r24	; 46
     dd4:	8e c0       	rjmp	.+284    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     dd6:	8f b5       	in	r24, 0x2f	; 47
     dd8:	81 60       	ori	r24, 0x01	; 1
     dda:	8f bd       	out	0x2f, r24	; 47
     ddc:	8f b5       	in	r24, 0x2f	; 47
     dde:	82 60       	ori	r24, 0x02	; 2
     de0:	8f bd       	out	0x2f, r24	; 47
     de2:	8e b5       	in	r24, 0x2e	; 46
     de4:	87 7f       	andi	r24, 0xF7	; 247
     de6:	8e bd       	out	0x2e, r24	; 46
     de8:	8e b5       	in	r24, 0x2e	; 46
     dea:	8f 7e       	andi	r24, 0xEF	; 239
     dec:	8e bd       	out	0x2e, r24	; 46
     dee:	81 c0       	rjmp	.+258    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     df0:	8f b5       	in	r24, 0x2f	; 47
     df2:	8e 7f       	andi	r24, 0xFE	; 254
     df4:	8f bd       	out	0x2f, r24	; 47
     df6:	8f b5       	in	r24, 0x2f	; 47
     df8:	8d 7f       	andi	r24, 0xFD	; 253
     dfa:	8f bd       	out	0x2f, r24	; 47
     dfc:	8e b5       	in	r24, 0x2e	; 46
     dfe:	88 60       	ori	r24, 0x08	; 8
     e00:	8e bd       	out	0x2e, r24	; 46
     e02:	8e b5       	in	r24, 0x2e	; 46
     e04:	8f 7e       	andi	r24, 0xEF	; 239
     e06:	8e bd       	out	0x2e, r24	; 46
     e08:	74 c0       	rjmp	.+232    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     e0a:	8f b5       	in	r24, 0x2f	; 47
     e0c:	81 60       	ori	r24, 0x01	; 1
     e0e:	8f bd       	out	0x2f, r24	; 47
     e10:	8f b5       	in	r24, 0x2f	; 47
     e12:	8d 7f       	andi	r24, 0xFD	; 253
     e14:	8f bd       	out	0x2f, r24	; 47
     e16:	8e b5       	in	r24, 0x2e	; 46
     e18:	88 60       	ori	r24, 0x08	; 8
     e1a:	8e bd       	out	0x2e, r24	; 46
     e1c:	8e b5       	in	r24, 0x2e	; 46
     e1e:	8f 7e       	andi	r24, 0xEF	; 239
     e20:	8e bd       	out	0x2e, r24	; 46
     e22:	67 c0       	rjmp	.+206    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     e24:	8f b5       	in	r24, 0x2f	; 47
     e26:	8e 7f       	andi	r24, 0xFE	; 254
     e28:	8f bd       	out	0x2f, r24	; 47
     e2a:	8f b5       	in	r24, 0x2f	; 47
     e2c:	82 60       	ori	r24, 0x02	; 2
     e2e:	8f bd       	out	0x2f, r24	; 47
     e30:	8e b5       	in	r24, 0x2e	; 46
     e32:	88 60       	ori	r24, 0x08	; 8
     e34:	8e bd       	out	0x2e, r24	; 46
     e36:	8e b5       	in	r24, 0x2e	; 46
     e38:	8f 7e       	andi	r24, 0xEF	; 239
     e3a:	8e bd       	out	0x2e, r24	; 46
     e3c:	5a c0       	rjmp	.+180    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     e3e:	8f b5       	in	r24, 0x2f	; 47
     e40:	81 60       	ori	r24, 0x01	; 1
     e42:	8f bd       	out	0x2f, r24	; 47
     e44:	8f b5       	in	r24, 0x2f	; 47
     e46:	82 60       	ori	r24, 0x02	; 2
     e48:	8f bd       	out	0x2f, r24	; 47
     e4a:	8e b5       	in	r24, 0x2e	; 46
     e4c:	88 60       	ori	r24, 0x08	; 8
     e4e:	8e bd       	out	0x2e, r24	; 46
     e50:	8e b5       	in	r24, 0x2e	; 46
     e52:	8f 7e       	andi	r24, 0xEF	; 239
     e54:	8e bd       	out	0x2e, r24	; 46
     e56:	4d c0       	rjmp	.+154    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     e58:	8f b5       	in	r24, 0x2f	; 47
     e5a:	8e 7f       	andi	r24, 0xFE	; 254
     e5c:	8f bd       	out	0x2f, r24	; 47
     e5e:	8f b5       	in	r24, 0x2f	; 47
     e60:	8d 7f       	andi	r24, 0xFD	; 253
     e62:	8f bd       	out	0x2f, r24	; 47
     e64:	8e b5       	in	r24, 0x2e	; 46
     e66:	87 7f       	andi	r24, 0xF7	; 247
     e68:	8e bd       	out	0x2e, r24	; 46
     e6a:	8e b5       	in	r24, 0x2e	; 46
     e6c:	80 61       	ori	r24, 0x10	; 16
     e6e:	8e bd       	out	0x2e, r24	; 46
     e70:	40 c0       	rjmp	.+128    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     e72:	8f b5       	in	r24, 0x2f	; 47
     e74:	81 60       	ori	r24, 0x01	; 1
     e76:	8f bd       	out	0x2f, r24	; 47
     e78:	8f b5       	in	r24, 0x2f	; 47
     e7a:	8d 7f       	andi	r24, 0xFD	; 253
     e7c:	8f bd       	out	0x2f, r24	; 47
     e7e:	8e b5       	in	r24, 0x2e	; 46
     e80:	87 7f       	andi	r24, 0xF7	; 247
     e82:	8e bd       	out	0x2e, r24	; 46
     e84:	8e b5       	in	r24, 0x2e	; 46
     e86:	80 61       	ori	r24, 0x10	; 16
     e88:	8e bd       	out	0x2e, r24	; 46
     e8a:	33 c0       	rjmp	.+102    	; 0xef2 <Timer_sint8_tInit+0x2aa>
     e8c:	8f b5       	in	r24, 0x2f	; 47
     e8e:	81 60       	ori	r24, 0x01	; 1
     e90:	8f bd       	out	0x2f, r24	; 47
     e92:	8f b5       	in	r24, 0x2f	; 47
     e94:	82 60       	ori	r24, 0x02	; 2
     e96:	8f bd       	out	0x2f, r24	; 47
     e98:	8e b5       	in	r24, 0x2e	; 46
     e9a:	87 7f       	andi	r24, 0xF7	; 247
     e9c:	8e bd       	out	0x2e, r24	; 46
     e9e:	8e b5       	in	r24, 0x2e	; 46
     ea0:	80 61       	ori	r24, 0x10	; 16
     ea2:	8e bd       	out	0x2e, r24	; 46
     ea4:	26 c0       	rjmp	.+76     	; 0xef2 <Timer_sint8_tInit+0x2aa>
     ea6:	8f b5       	in	r24, 0x2f	; 47
     ea8:	8e 7f       	andi	r24, 0xFE	; 254
     eaa:	8f bd       	out	0x2f, r24	; 47
     eac:	8f b5       	in	r24, 0x2f	; 47
     eae:	8d 7f       	andi	r24, 0xFD	; 253
     eb0:	8f bd       	out	0x2f, r24	; 47
     eb2:	8e b5       	in	r24, 0x2e	; 46
     eb4:	88 60       	ori	r24, 0x08	; 8
     eb6:	8e bd       	out	0x2e, r24	; 46
     eb8:	8e b5       	in	r24, 0x2e	; 46
     eba:	80 61       	ori	r24, 0x10	; 16
     ebc:	8e bd       	out	0x2e, r24	; 46
     ebe:	19 c0       	rjmp	.+50     	; 0xef2 <Timer_sint8_tInit+0x2aa>
     ec0:	8f b5       	in	r24, 0x2f	; 47
     ec2:	8e 7f       	andi	r24, 0xFE	; 254
     ec4:	8f bd       	out	0x2f, r24	; 47
     ec6:	8f b5       	in	r24, 0x2f	; 47
     ec8:	82 60       	ori	r24, 0x02	; 2
     eca:	8f bd       	out	0x2f, r24	; 47
     ecc:	8e b5       	in	r24, 0x2e	; 46
     ece:	88 60       	ori	r24, 0x08	; 8
     ed0:	8e bd       	out	0x2e, r24	; 46
     ed2:	8e b5       	in	r24, 0x2e	; 46
     ed4:	80 61       	ori	r24, 0x10	; 16
     ed6:	8e bd       	out	0x2e, r24	; 46
     ed8:	0c c0       	rjmp	.+24     	; 0xef2 <Timer_sint8_tInit+0x2aa>
     eda:	8f b5       	in	r24, 0x2f	; 47
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	8f bd       	out	0x2f, r24	; 47
     ee0:	8f b5       	in	r24, 0x2f	; 47
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	8f bd       	out	0x2f, r24	; 47
     ee6:	8e b5       	in	r24, 0x2e	; 46
     ee8:	88 60       	ori	r24, 0x08	; 8
     eea:	8e bd       	out	0x2e, r24	; 46
     eec:	8e b5       	in	r24, 0x2e	; 46
     eee:	80 61       	ori	r24, 0x10	; 16
     ef0:	8e bd       	out	0x2e, r24	; 46
     ef2:	23 30       	cpi	r18, 0x03	; 3
     ef4:	31 05       	cpc	r19, r1
     ef6:	41 05       	cpc	r20, r1
     ef8:	51 05       	cpc	r21, r1
     efa:	99 f1       	breq	.+102    	; 0xf62 <Timer_sint8_tInit+0x31a>
     efc:	58 f4       	brcc	.+22     	; 0xf14 <Timer_sint8_tInit+0x2cc>
     efe:	21 15       	cp	r18, r1
     f00:	31 05       	cpc	r19, r1
     f02:	41 05       	cpc	r20, r1
     f04:	51 05       	cpc	r21, r1
     f06:	b9 f0       	breq	.+46     	; 0xf36 <Timer_sint8_tInit+0x2ee>
     f08:	21 30       	cpi	r18, 0x01	; 1
     f0a:	31 05       	cpc	r19, r1
     f0c:	41 05       	cpc	r20, r1
     f0e:	51 05       	cpc	r21, r1
     f10:	e9 f0       	breq	.+58     	; 0xf4c <Timer_sint8_tInit+0x304>
     f12:	d7 c0       	rjmp	.+430    	; 0x10c2 <Timer_sint8_tInit+0x47a>
     f14:	26 30       	cpi	r18, 0x06	; 6
     f16:	31 05       	cpc	r19, r1
     f18:	41 05       	cpc	r20, r1
     f1a:	51 05       	cpc	r21, r1
     f1c:	c1 f1       	breq	.+112    	; 0xf8e <Timer_sint8_tInit+0x346>
     f1e:	27 30       	cpi	r18, 0x07	; 7
     f20:	31 05       	cpc	r19, r1
     f22:	41 05       	cpc	r20, r1
     f24:	51 05       	cpc	r21, r1
     f26:	f1 f1       	breq	.+124    	; 0xfa4 <Timer_sint8_tInit+0x35c>
     f28:	25 30       	cpi	r18, 0x05	; 5
     f2a:	31 05       	cpc	r19, r1
     f2c:	41 05       	cpc	r20, r1
     f2e:	51 05       	cpc	r21, r1
     f30:	09 f0       	breq	.+2      	; 0xf34 <Timer_sint8_tInit+0x2ec>
     f32:	c7 c0       	rjmp	.+398    	; 0x10c2 <Timer_sint8_tInit+0x47a>
     f34:	21 c0       	rjmp	.+66     	; 0xf78 <Timer_sint8_tInit+0x330>
     f36:	8e b5       	in	r24, 0x2e	; 46
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	8e bd       	out	0x2e, r24	; 46
     f3c:	8e b5       	in	r24, 0x2e	; 46
     f3e:	8d 7f       	andi	r24, 0xFD	; 253
     f40:	8e bd       	out	0x2e, r24	; 46
     f42:	8e b5       	in	r24, 0x2e	; 46
     f44:	8b 7f       	andi	r24, 0xFB	; 251
     f46:	8e bd       	out	0x2e, r24	; 46
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	08 95       	ret
     f4c:	8e b5       	in	r24, 0x2e	; 46
     f4e:	8e 7f       	andi	r24, 0xFE	; 254
     f50:	8e bd       	out	0x2e, r24	; 46
     f52:	8e b5       	in	r24, 0x2e	; 46
     f54:	82 60       	ori	r24, 0x02	; 2
     f56:	8e bd       	out	0x2e, r24	; 46
     f58:	8e b5       	in	r24, 0x2e	; 46
     f5a:	8b 7f       	andi	r24, 0xFB	; 251
     f5c:	8e bd       	out	0x2e, r24	; 46
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	08 95       	ret
     f62:	8e b5       	in	r24, 0x2e	; 46
     f64:	81 60       	ori	r24, 0x01	; 1
     f66:	8e bd       	out	0x2e, r24	; 46
     f68:	8e b5       	in	r24, 0x2e	; 46
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	8e bd       	out	0x2e, r24	; 46
     f6e:	8e b5       	in	r24, 0x2e	; 46
     f70:	8b 7f       	andi	r24, 0xFB	; 251
     f72:	8e bd       	out	0x2e, r24	; 46
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	08 95       	ret
     f78:	8e b5       	in	r24, 0x2e	; 46
     f7a:	8e 7f       	andi	r24, 0xFE	; 254
     f7c:	8e bd       	out	0x2e, r24	; 46
     f7e:	8e b5       	in	r24, 0x2e	; 46
     f80:	8d 7f       	andi	r24, 0xFD	; 253
     f82:	8e bd       	out	0x2e, r24	; 46
     f84:	8e b5       	in	r24, 0x2e	; 46
     f86:	84 60       	ori	r24, 0x04	; 4
     f88:	8e bd       	out	0x2e, r24	; 46
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	08 95       	ret
     f8e:	8e b5       	in	r24, 0x2e	; 46
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	8e bd       	out	0x2e, r24	; 46
     f94:	8e b5       	in	r24, 0x2e	; 46
     f96:	8d 7f       	andi	r24, 0xFD	; 253
     f98:	8e bd       	out	0x2e, r24	; 46
     f9a:	8e b5       	in	r24, 0x2e	; 46
     f9c:	84 60       	ori	r24, 0x04	; 4
     f9e:	8e bd       	out	0x2e, r24	; 46
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	08 95       	ret
     fa4:	8e b5       	in	r24, 0x2e	; 46
     fa6:	8e 7f       	andi	r24, 0xFE	; 254
     fa8:	8e bd       	out	0x2e, r24	; 46
     faa:	8e b5       	in	r24, 0x2e	; 46
     fac:	8d 7f       	andi	r24, 0xFD	; 253
     fae:	8e bd       	out	0x2e, r24	; 46
     fb0:	8e b5       	in	r24, 0x2e	; 46
     fb2:	8b 7f       	andi	r24, 0xFB	; 251
     fb4:	8e bd       	out	0x2e, r24	; 46
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	08 95       	ret
     fba:	61 30       	cpi	r22, 0x01	; 1
     fbc:	69 f0       	breq	.+26     	; 0xfd8 <Timer_sint8_tInit+0x390>
     fbe:	28 f0       	brcs	.+10     	; 0xfca <Timer_sint8_tInit+0x382>
     fc0:	62 30       	cpi	r22, 0x02	; 2
     fc2:	89 f0       	breq	.+34     	; 0xfe6 <Timer_sint8_tInit+0x39e>
     fc4:	63 30       	cpi	r22, 0x03	; 3
     fc6:	b1 f0       	breq	.+44     	; 0xff4 <Timer_sint8_tInit+0x3ac>
     fc8:	1b c0       	rjmp	.+54     	; 0x1000 <Timer_sint8_tInit+0x3b8>
     fca:	85 b5       	in	r24, 0x25	; 37
     fcc:	87 7f       	andi	r24, 0xF7	; 247
     fce:	85 bd       	out	0x25, r24	; 37
     fd0:	85 b5       	in	r24, 0x25	; 37
     fd2:	8f 7b       	andi	r24, 0xBF	; 191
     fd4:	85 bd       	out	0x25, r24	; 37
     fd6:	14 c0       	rjmp	.+40     	; 0x1000 <Timer_sint8_tInit+0x3b8>
     fd8:	85 b5       	in	r24, 0x25	; 37
     fda:	87 7f       	andi	r24, 0xF7	; 247
     fdc:	85 bd       	out	0x25, r24	; 37
     fde:	85 b5       	in	r24, 0x25	; 37
     fe0:	80 64       	ori	r24, 0x40	; 64
     fe2:	85 bd       	out	0x25, r24	; 37
     fe4:	0d c0       	rjmp	.+26     	; 0x1000 <Timer_sint8_tInit+0x3b8>
     fe6:	85 b5       	in	r24, 0x25	; 37
     fe8:	88 60       	ori	r24, 0x08	; 8
     fea:	85 bd       	out	0x25, r24	; 37
     fec:	85 b5       	in	r24, 0x25	; 37
     fee:	8f 7b       	andi	r24, 0xBF	; 191
     ff0:	85 bd       	out	0x25, r24	; 37
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <Timer_sint8_tInit+0x3b8>
     ff4:	85 b5       	in	r24, 0x25	; 37
     ff6:	88 60       	ori	r24, 0x08	; 8
     ff8:	85 bd       	out	0x25, r24	; 37
     ffa:	85 b5       	in	r24, 0x25	; 37
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	85 bd       	out	0x25, r24	; 37
    1000:	f9 01       	movw	r30, r18
    1002:	31 97       	sbiw	r30, 0x01	; 1
    1004:	e7 30       	cpi	r30, 0x07	; 7
    1006:	f1 05       	cpc	r31, r1
    1008:	08 f0       	brcs	.+2      	; 0x100c <Timer_sint8_tInit+0x3c4>
    100a:	5d c0       	rjmp	.+186    	; 0x10c6 <Timer_sint8_tInit+0x47e>
    100c:	e4 5c       	subi	r30, 0xC4	; 196
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__tablejump2__>
    1014:	85 b5       	in	r24, 0x25	; 37
    1016:	8e 7f       	andi	r24, 0xFE	; 254
    1018:	85 bd       	out	0x25, r24	; 37
    101a:	85 b5       	in	r24, 0x25	; 37
    101c:	82 60       	ori	r24, 0x02	; 2
    101e:	85 bd       	out	0x25, r24	; 37
    1020:	85 b5       	in	r24, 0x25	; 37
    1022:	8b 7f       	andi	r24, 0xFB	; 251
    1024:	85 bd       	out	0x25, r24	; 37
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	08 95       	ret
    102a:	85 b5       	in	r24, 0x25	; 37
    102c:	81 60       	ori	r24, 0x01	; 1
    102e:	85 bd       	out	0x25, r24	; 37
    1030:	85 b5       	in	r24, 0x25	; 37
    1032:	82 60       	ori	r24, 0x02	; 2
    1034:	85 bd       	out	0x25, r24	; 37
    1036:	85 b5       	in	r24, 0x25	; 37
    1038:	8b 7f       	andi	r24, 0xFB	; 251
    103a:	85 bd       	out	0x25, r24	; 37
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	08 95       	ret
    1040:	85 b5       	in	r24, 0x25	; 37
    1042:	8e 7f       	andi	r24, 0xFE	; 254
    1044:	85 bd       	out	0x25, r24	; 37
    1046:	85 b5       	in	r24, 0x25	; 37
    1048:	8d 7f       	andi	r24, 0xFD	; 253
    104a:	85 bd       	out	0x25, r24	; 37
    104c:	85 b5       	in	r24, 0x25	; 37
    104e:	84 60       	ori	r24, 0x04	; 4
    1050:	85 bd       	out	0x25, r24	; 37
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	08 95       	ret
    1056:	85 b5       	in	r24, 0x25	; 37
    1058:	81 60       	ori	r24, 0x01	; 1
    105a:	85 bd       	out	0x25, r24	; 37
    105c:	85 b5       	in	r24, 0x25	; 37
    105e:	8d 7f       	andi	r24, 0xFD	; 253
    1060:	85 bd       	out	0x25, r24	; 37
    1062:	85 b5       	in	r24, 0x25	; 37
    1064:	84 60       	ori	r24, 0x04	; 4
    1066:	85 bd       	out	0x25, r24	; 37
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	08 95       	ret
    106c:	85 b5       	in	r24, 0x25	; 37
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	85 bd       	out	0x25, r24	; 37
    1072:	85 b5       	in	r24, 0x25	; 37
    1074:	82 60       	ori	r24, 0x02	; 2
    1076:	85 bd       	out	0x25, r24	; 37
    1078:	85 b5       	in	r24, 0x25	; 37
    107a:	84 60       	ori	r24, 0x04	; 4
    107c:	85 bd       	out	0x25, r24	; 37
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	08 95       	ret
    1082:	85 b5       	in	r24, 0x25	; 37
    1084:	81 60       	ori	r24, 0x01	; 1
    1086:	85 bd       	out	0x25, r24	; 37
    1088:	85 b5       	in	r24, 0x25	; 37
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	85 bd       	out	0x25, r24	; 37
    108e:	85 b5       	in	r24, 0x25	; 37
    1090:	84 60       	ori	r24, 0x04	; 4
    1092:	85 bd       	out	0x25, r24	; 37
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	08 95       	ret
    1098:	85 b5       	in	r24, 0x25	; 37
    109a:	8e 7f       	andi	r24, 0xFE	; 254
    109c:	85 bd       	out	0x25, r24	; 37
    109e:	85 b5       	in	r24, 0x25	; 37
    10a0:	8d 7f       	andi	r24, 0xFD	; 253
    10a2:	85 bd       	out	0x25, r24	; 37
    10a4:	85 b5       	in	r24, 0x25	; 37
    10a6:	8b 7f       	andi	r24, 0xFB	; 251
    10a8:	85 bd       	out	0x25, r24	; 37
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	08 95       	ret
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	08 95       	ret
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	08 95       	ret
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	08 95       	ret
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	08 95       	ret
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	08 95       	ret
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	08 95       	ret
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	08 95       	ret

000010ca <Timer_sint8_tSetTMRValue>:
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	39 f0       	breq	.+14     	; 0x10dc <Timer_sint8_tSetTMRValue+0x12>
    10ce:	18 f0       	brcs	.+6      	; 0x10d6 <Timer_sint8_tSetTMRValue+0xc>
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	41 f0       	breq	.+16     	; 0x10e4 <Timer_sint8_tSetTMRValue+0x1a>
    10d4:	0a c0       	rjmp	.+20     	; 0x10ea <Timer_sint8_tSetTMRValue+0x20>
    10d6:	62 bf       	out	0x32, r22	; 50
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	08 95       	ret
    10dc:	7d bd       	out	0x2d, r23	; 45
    10de:	6c bd       	out	0x2c, r22	; 44
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	08 95       	ret
    10e4:	64 bd       	out	0x24, r22	; 36
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	08 95       	ret
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	08 95       	ret

000010ee <Timer_sint8_tInterruptEnable>:
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	99 f0       	breq	.+38     	; 0x1118 <Timer_sint8_tInterruptEnable+0x2a>
    10f2:	18 f0       	brcs	.+6      	; 0x10fa <Timer_sint8_tInterruptEnable+0xc>
    10f4:	82 30       	cpi	r24, 0x02	; 2
    10f6:	79 f1       	breq	.+94     	; 0x1156 <Timer_sint8_tInterruptEnable+0x68>
    10f8:	3d c0       	rjmp	.+122    	; 0x1174 <Timer_sint8_tInterruptEnable+0x86>
    10fa:	66 23       	and	r22, r22
    10fc:	19 f0       	breq	.+6      	; 0x1104 <Timer_sint8_tInterruptEnable+0x16>
    10fe:	61 30       	cpi	r22, 0x01	; 1
    1100:	31 f0       	breq	.+12     	; 0x110e <Timer_sint8_tInterruptEnable+0x20>
    1102:	3a c0       	rjmp	.+116    	; 0x1178 <Timer_sint8_tInterruptEnable+0x8a>
    1104:	89 b7       	in	r24, 0x39	; 57
    1106:	81 60       	ori	r24, 0x01	; 1
    1108:	89 bf       	out	0x39, r24	; 57
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	08 95       	ret
    110e:	89 b7       	in	r24, 0x39	; 57
    1110:	82 60       	ori	r24, 0x02	; 2
    1112:	89 bf       	out	0x39, r24	; 57
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	08 95       	ret
    1118:	62 30       	cpi	r22, 0x02	; 2
    111a:	99 f0       	breq	.+38     	; 0x1142 <Timer_sint8_tInterruptEnable+0x54>
    111c:	18 f4       	brcc	.+6      	; 0x1124 <Timer_sint8_tInterruptEnable+0x36>
    111e:	66 23       	and	r22, r22
    1120:	31 f0       	breq	.+12     	; 0x112e <Timer_sint8_tInterruptEnable+0x40>
    1122:	2c c0       	rjmp	.+88     	; 0x117c <Timer_sint8_tInterruptEnable+0x8e>
    1124:	63 30       	cpi	r22, 0x03	; 3
    1126:	41 f0       	breq	.+16     	; 0x1138 <Timer_sint8_tInterruptEnable+0x4a>
    1128:	64 30       	cpi	r22, 0x04	; 4
    112a:	81 f0       	breq	.+32     	; 0x114c <Timer_sint8_tInterruptEnable+0x5e>
    112c:	27 c0       	rjmp	.+78     	; 0x117c <Timer_sint8_tInterruptEnable+0x8e>
    112e:	89 b7       	in	r24, 0x39	; 57
    1130:	84 60       	ori	r24, 0x04	; 4
    1132:	89 bf       	out	0x39, r24	; 57
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	08 95       	ret
    1138:	89 b7       	in	r24, 0x39	; 57
    113a:	88 60       	ori	r24, 0x08	; 8
    113c:	89 bf       	out	0x39, r24	; 57
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	08 95       	ret
    1142:	89 b7       	in	r24, 0x39	; 57
    1144:	80 61       	ori	r24, 0x10	; 16
    1146:	89 bf       	out	0x39, r24	; 57
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	08 95       	ret
    114c:	89 b7       	in	r24, 0x39	; 57
    114e:	80 62       	ori	r24, 0x20	; 32
    1150:	89 bf       	out	0x39, r24	; 57
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	08 95       	ret
    1156:	66 23       	and	r22, r22
    1158:	19 f0       	breq	.+6      	; 0x1160 <Timer_sint8_tInterruptEnable+0x72>
    115a:	61 30       	cpi	r22, 0x01	; 1
    115c:	31 f0       	breq	.+12     	; 0x116a <Timer_sint8_tInterruptEnable+0x7c>
    115e:	10 c0       	rjmp	.+32     	; 0x1180 <Timer_sint8_tInterruptEnable+0x92>
    1160:	89 b7       	in	r24, 0x39	; 57
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	89 bf       	out	0x39, r24	; 57
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	08 95       	ret
    116a:	89 b7       	in	r24, 0x39	; 57
    116c:	80 68       	ori	r24, 0x80	; 128
    116e:	89 bf       	out	0x39, r24	; 57
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	08 95       	ret
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	08 95       	ret
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	08 95       	ret
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	08 95       	ret
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	08 95       	ret

00001184 <Timer_sint8_tStop>:

uint8_t Timer_sint8_tStop(uint8_t timer)
{
	if(timer <= TMR2_CHOICE)
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	d0 f5       	brcc	.+116    	; 0x11fc <Timer_sint8_tStop+0x78>
	{
		switch(timer)
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	79 f0       	breq	.+30     	; 0x11aa <Timer_sint8_tStop+0x26>
    118c:	18 f0       	brcs	.+6      	; 0x1194 <Timer_sint8_tStop+0x10>
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	b9 f0       	breq	.+46     	; 0x11c0 <Timer_sint8_tStop+0x3c>
    1192:	36 c0       	rjmp	.+108    	; 0x1200 <Timer_sint8_tStop+0x7c>
		{
			case TMR0_CHOICE:
			CLR_BIT(TCCR0,0);
    1194:	83 b7       	in	r24, 0x33	; 51
    1196:	8e 7f       	andi	r24, 0xFE	; 254
    1198:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0,1);
    119a:	83 b7       	in	r24, 0x33	; 51
    119c:	8d 7f       	andi	r24, 0xFD	; 253
    119e:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0,2);
    11a0:	83 b7       	in	r24, 0x33	; 51
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	83 bf       	out	0x33, r24	; 51
			return E_OK;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	08 95       	ret
			break;
			case TMR1_CHOICE:
			CLR_BIT(TCCR1B,0);
    11aa:	8e b5       	in	r24, 0x2e	; 46
    11ac:	8e 7f       	andi	r24, 0xFE	; 254
    11ae:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,1);
    11b0:	8e b5       	in	r24, 0x2e	; 46
    11b2:	8d 7f       	andi	r24, 0xFD	; 253
    11b4:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,2);
    11b6:	8e b5       	in	r24, 0x2e	; 46
    11b8:	8b 7f       	andi	r24, 0xFB	; 251
    11ba:	8e bd       	out	0x2e, r24	; 46
			return E_OK;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	08 95       	ret
			break;
			case TMR2_CHOICE:
			CLR_BIT(TCCR2,0);
    11c0:	85 b5       	in	r24, 0x25	; 37
    11c2:	8e 7f       	andi	r24, 0xFE	; 254
    11c4:	85 bd       	out	0x25, r24	; 37
			CLR_BIT(TCCR2,1);
    11c6:	85 b5       	in	r24, 0x25	; 37
    11c8:	8d 7f       	andi	r24, 0xFD	; 253
    11ca:	85 bd       	out	0x25, r24	; 37
			CLR_BIT(TCCR2,2);
    11cc:	85 b5       	in	r24, 0x25	; 37
    11ce:	8b 7f       	andi	r24, 0xFB	; 251
    11d0:	85 bd       	out	0x25, r24	; 37
			Timer2_counter = ZERO;
    11d2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Timer2_counter>
    11d6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Timer2_counter+0x1>
    11da:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Timer2_counter+0x2>
    11de:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Timer2_counter+0x3>
			Timer2_delayflag = ZERO;
    11e2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Timer2_delayflag>
			gau8_TMRDelyPriority[u8_IndexToBeExecuted] = ZERO;
    11e6:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <u8_IndexToBeExecuted>
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	e1 54       	subi	r30, 0x41	; 65
    11ee:	fe 4f       	sbci	r31, 0xFE	; 254
    11f0:	10 82       	st	Z, r1
			u8_IndexToBeExecuted = EMPTY_INDEX;
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_IndexToBeExecuted>
			return E_OK;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	08 95       	ret
			break;
		}
	}
	return E_NOK;
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	08 95       	ret
    1200:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1202:	08 95       	ret

00001204 <__vector_5>:
void __vector_5 (void)
{
    1204:	1f 92       	push	r1
    1206:	0f 92       	push	r0
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	0f 92       	push	r0
    120c:	11 24       	eor	r1, r1
    120e:	2f 93       	push	r18
    1210:	3f 93       	push	r19
    1212:	4f 93       	push	r20
    1214:	5f 93       	push	r21
    1216:	6f 93       	push	r22
    1218:	7f 93       	push	r23
    121a:	8f 93       	push	r24
    121c:	9f 93       	push	r25
    121e:	af 93       	push	r26
    1220:	bf 93       	push	r27
    1222:	ef 93       	push	r30
    1224:	ff 93       	push	r31
	Timer_sint8_tSetTMRValue(TMR2_CHOICE,255);
    1226:	6f ef       	ldi	r22, 0xFF	; 255
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	0e 94 65 08 	call	0x10ca	; 0x10ca <Timer_sint8_tSetTMRValue>
	Timer2_counter++;
    1230:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Timer2_counter>
    1234:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Timer2_counter+0x1>
    1238:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <Timer2_counter+0x2>
    123c:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <Timer2_counter+0x3>
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	a1 1d       	adc	r26, r1
    1244:	b1 1d       	adc	r27, r1
    1246:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Timer2_counter>
    124a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Timer2_counter+0x1>
    124e:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <Timer2_counter+0x2>
    1252:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <Timer2_counter+0x3>
}
    1256:	ff 91       	pop	r31
    1258:	ef 91       	pop	r30
    125a:	bf 91       	pop	r27
    125c:	af 91       	pop	r26
    125e:	9f 91       	pop	r25
    1260:	8f 91       	pop	r24
    1262:	7f 91       	pop	r23
    1264:	6f 91       	pop	r22
    1266:	5f 91       	pop	r21
    1268:	4f 91       	pop	r20
    126a:	3f 91       	pop	r19
    126c:	2f 91       	pop	r18
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_9>:

void __vector_9 (void)
{
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
	Timer_sint8_tSetTMRValue(TMR1_CHOICE,255);
    129a:	6f ef       	ldi	r22, 0xFF	; 255
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	0e 94 65 08 	call	0x10ca	; 0x10ca <Timer_sint8_tSetTMRValue>
	Timer1_counter++;
    12a4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Timer1_counter>
    12a8:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <Timer1_counter+0x1>
    12ac:	a0 91 75 00 	lds	r26, 0x0075	; 0x800075 <Timer1_counter+0x2>
    12b0:	b0 91 76 00 	lds	r27, 0x0076	; 0x800076 <Timer1_counter+0x3>
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	a1 1d       	adc	r26, r1
    12b8:	b1 1d       	adc	r27, r1
    12ba:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Timer1_counter>
    12be:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Timer1_counter+0x1>
    12c2:	a0 93 75 00 	sts	0x0075, r26	; 0x800075 <Timer1_counter+0x2>
    12c6:	b0 93 76 00 	sts	0x0076, r27	; 0x800076 <Timer1_counter+0x3>
}
    12ca:	ff 91       	pop	r31
    12cc:	ef 91       	pop	r30
    12ce:	bf 91       	pop	r27
    12d0:	af 91       	pop	r26
    12d2:	9f 91       	pop	r25
    12d4:	8f 91       	pop	r24
    12d6:	7f 91       	pop	r23
    12d8:	6f 91       	pop	r22
    12da:	5f 91       	pop	r21
    12dc:	4f 91       	pop	r20
    12de:	3f 91       	pop	r19
    12e0:	2f 91       	pop	r18
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	1f 90       	pop	r1
    12ea:	18 95       	reti

000012ec <__vector_11>:

void __vector_11 (void)
{
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
	Timer_sint8_tSetTMRValue(TMR0_CHOICE,255);
    130e:	6f ef       	ldi	r22, 0xFF	; 255
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	0e 94 65 08 	call	0x10ca	; 0x10ca <Timer_sint8_tSetTMRValue>
	Timer0_counter++;
    1318:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Timer0_counter>
    131c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Timer0_counter+0x1>
    1320:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <Timer0_counter+0x2>
    1324:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <Timer0_counter+0x3>
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	a1 1d       	adc	r26, r1
    132c:	b1 1d       	adc	r27, r1
    132e:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Timer0_counter>
    1332:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Timer0_counter+0x1>
    1336:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <Timer0_counter+0x2>
    133a:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <Timer0_counter+0x3>
}
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <Timer_NonBlockingdelay>:

uint8_t Timer_NonBlockingdelay(uint8_t timer, uint32_t time, uint8_t u8_statePriority)
{
    1360:	cf 92       	push	r12
    1362:	df 92       	push	r13
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	cf 93       	push	r28
    136a:	6a 01       	movw	r12, r20
    136c:	7b 01       	movw	r14, r22
    136e:	c2 2f       	mov	r28, r18
	uint8_t retval = ERROR;
	switch (timer)
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	09 f0       	breq	.+2      	; 0x1376 <Timer_NonBlockingdelay+0x16>
    1374:	60 c0       	rjmp	.+192    	; 0x1436 <Timer_NonBlockingdelay+0xd6>
		{
			break;
		}
		case TMR2_CHOICE:
		{
			if(ZERO == Timer2_delayflag)
    1376:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Timer2_delayflag>
    137a:	81 11       	cpse	r24, r1
    137c:	23 c0       	rjmp	.+70     	; 0x13c4 <Timer_NonBlockingdelay+0x64>
			{
				Timer_sint8_tSetTMRValue(TMR2_CHOICE,255);
    137e:	6f ef       	ldi	r22, 0xFF	; 255
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	0e 94 65 08 	call	0x10ca	; 0x10ca <Timer_sint8_tSetTMRValue>
				Timer_sint8_tInterruptEnable(TMR2_CHOICE,TOIE_CHOICE);
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	0e 94 77 08 	call	0x10ee	; 0x10ee <Timer_sint8_tInterruptEnable>
				Timer_sint8_tInit(TMR2_CHOICE,NORMAL,PRS8);
    1390:	21 e0       	ldi	r18, 0x01	; 1
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	0e 94 24 06 	call	0xc48	; 0xc48 <Timer_sint8_tInit>
				Timer2_delayflag = ONE;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Timer2_delayflag>
				for (uint8_t i = ZERO; i < PRIORITY_NUMBERS; i++)
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	0b c0       	rjmp	.+22     	; 0x13c0 <Timer_NonBlockingdelay+0x60>
				{
					if (gau8_TMRDelyPriority[i] != ZERO)
    13aa:	e8 2f       	mov	r30, r24
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	e1 54       	subi	r30, 0x41	; 65
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	90 81       	ld	r25, Z
    13b4:	99 23       	and	r25, r25
    13b6:	19 f0       	breq	.+6      	; 0x13be <Timer_NonBlockingdelay+0x5e>
					{
						u8_IndexToBeExecuted = i;
    13b8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <u8_IndexToBeExecuted>
						break;
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <Timer_NonBlockingdelay+0x64>
			{
				Timer_sint8_tSetTMRValue(TMR2_CHOICE,255);
				Timer_sint8_tInterruptEnable(TMR2_CHOICE,TOIE_CHOICE);
				Timer_sint8_tInit(TMR2_CHOICE,NORMAL,PRS8);
				Timer2_delayflag = ONE;
				for (uint8_t i = ZERO; i < PRIORITY_NUMBERS; i++)
    13be:	8f 5f       	subi	r24, 0xFF	; 255
    13c0:	8a 30       	cpi	r24, 0x0A	; 10
    13c2:	98 f3       	brcs	.-26     	; 0x13aa <Timer_NonBlockingdelay+0x4a>
						break;
					}
				}
			}

			if((time < Timer2_counter) && (u8_statePriority == u8_IndexToBeExecuted))
    13c4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Timer2_counter>
    13c8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Timer2_counter+0x1>
    13cc:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <Timer2_counter+0x2>
    13d0:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <Timer2_counter+0x3>
    13d4:	c8 16       	cp	r12, r24
    13d6:	d9 06       	cpc	r13, r25
    13d8:	ea 06       	cpc	r14, r26
    13da:	fb 06       	cpc	r15, r27
    13dc:	80 f4       	brcc	.+32     	; 0x13fe <Timer_NonBlockingdelay+0x9e>
    13de:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <u8_IndexToBeExecuted>
    13e2:	8c 13       	cpse	r24, r28
    13e4:	0c c0       	rjmp	.+24     	; 0x13fe <Timer_NonBlockingdelay+0x9e>
			{
				Timer_sint8_tStop(TMR2_CHOICE);
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
				retval = SUCCESS;
				Timer_NonBlockingdelay(TMR2_CHOICE, 0, 9);
    13ec:	29 e0       	ldi	r18, 0x09	; 9
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	50 e0       	ldi	r21, 0x00	; 0
    13f2:	ba 01       	movw	r22, r20
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	0e 94 b0 09 	call	0x1360	; 0x1360 <Timer_NonBlockingdelay>
			}

			if((time < Timer2_counter) && (u8_statePriority == u8_IndexToBeExecuted))
			{
				Timer_sint8_tStop(TMR2_CHOICE);
				retval = SUCCESS;
    13fa:	c1 e0       	ldi	r28, 0x01	; 1
				Timer_NonBlockingdelay(TMR2_CHOICE, 0, 9);
    13fc:	21 c0       	rjmp	.+66     	; 0x1440 <Timer_NonBlockingdelay+0xe0>
				
			}
			else if (u8_statePriority != u8_IndexToBeExecuted)
    13fe:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <u8_IndexToBeExecuted>
    1402:	c8 17       	cp	r28, r24
    1404:	39 f0       	breq	.+14     	; 0x1414 <Timer_NonBlockingdelay+0xb4>
			{
				gau8_TMRDelyPriority[u8_statePriority] = time;
    1406:	ec 2f       	mov	r30, r28
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	e1 54       	subi	r30, 0x41	; 65
    140c:	fe 4f       	sbci	r31, 0xFE	; 254
    140e:	c0 82       	st	Z, r12
				retval = WAITING;
    1410:	c3 e0       	ldi	r28, 0x03	; 3
    1412:	16 c0       	rjmp	.+44     	; 0x1440 <Timer_NonBlockingdelay+0xe0>
			}
			else if ((time > Timer2_counter) && (u8_statePriority == u8_IndexToBeExecuted))
    1414:	40 91 6f 00 	lds	r20, 0x006F	; 0x80006f <Timer2_counter>
    1418:	50 91 70 00 	lds	r21, 0x0070	; 0x800070 <Timer2_counter+0x1>
    141c:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <Timer2_counter+0x2>
    1420:	70 91 72 00 	lds	r23, 0x0072	; 0x800072 <Timer2_counter+0x3>
    1424:	4c 15       	cp	r20, r12
    1426:	5d 05       	cpc	r21, r13
    1428:	6e 05       	cpc	r22, r14
    142a:	7f 05       	cpc	r23, r15
    142c:	30 f4       	brcc	.+12     	; 0x143a <Timer_NonBlockingdelay+0xda>
    142e:	c8 17       	cp	r28, r24
    1430:	31 f0       	breq	.+12     	; 0x143e <Timer_NonBlockingdelay+0xde>
			{
				retval = PENDING;
			}
			else
			{
				retval = ERROR;
    1432:	c0 e0       	ldi	r28, 0x00	; 0
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <Timer_NonBlockingdelay+0xe0>
	Timer0_counter++;
}

uint8_t Timer_NonBlockingdelay(uint8_t timer, uint32_t time, uint8_t u8_statePriority)
{
	uint8_t retval = ERROR;
    1436:	c0 e0       	ldi	r28, 0x00	; 0
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <Timer_NonBlockingdelay+0xe0>
			{
				retval = PENDING;
			}
			else
			{
				retval = ERROR;
    143a:	c0 e0       	ldi	r28, 0x00	; 0
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <Timer_NonBlockingdelay+0xe0>
				gau8_TMRDelyPriority[u8_statePriority] = time;
				retval = WAITING;
			}
			else if ((time > Timer2_counter) && (u8_statePriority == u8_IndexToBeExecuted))
			{
				retval = PENDING;
    143e:	c2 e0       	ldi	r28, 0x02	; 2
				retval = ERROR;
			}
			break;
		}
	}
	if (EMPTY_INDEX == u8_IndexToBeExecuted)
    1440:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <u8_IndexToBeExecuted>
    1444:	8f 3f       	cpi	r24, 0xFF	; 255
    1446:	69 f4       	brne	.+26     	; 0x1462 <Timer_NonBlockingdelay+0x102>
	{
		Timer_sint8_tStop(TMR2_CHOICE);
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer_sint8_tStop>
		Timer2_counter = ZERO;
    144e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Timer2_counter>
    1452:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Timer2_counter+0x1>
    1456:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Timer2_counter+0x2>
    145a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Timer2_counter+0x3>
		Timer2_delayflag = ZERO;
    145e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Timer2_delayflag>
	}
	return retval;
    1462:	8c 2f       	mov	r24, r28
    1464:	cf 91       	pop	r28
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	df 90       	pop	r13
    146c:	cf 90       	pop	r12
    146e:	08 95       	ret

00001470 <UART_Init>:
uint8_t UART_GetData(uint8_t UartNumber, ptr_uint8_t RxChar) {

   *(RxChar) = (uint8_t) UDR;

   return 0;
}
    1470:	8a b1       	in	r24, 0x0a	; 10
    1472:	80 61       	ori	r24, 0x10	; 16
    1474:	8a b9       	out	0x0a, r24	; 10
    1476:	8a b1       	in	r24, 0x0a	; 10
    1478:	88 60       	ori	r24, 0x08	; 8
    147a:	8a b9       	out	0x0a, r24	; 10
    147c:	8b b1       	in	r24, 0x0b	; 11
    147e:	8d 7f       	andi	r24, 0xFD	; 253
    1480:	8b b9       	out	0x0b, r24	; 11
    1482:	8a b1       	in	r24, 0x0a	; 10
    1484:	8b 7f       	andi	r24, 0xFB	; 251
    1486:	8a b9       	out	0x0a, r24	; 10
    1488:	80 b5       	in	r24, 0x20	; 32
    148a:	86 68       	ori	r24, 0x86	; 134
    148c:	80 bd       	out	0x20, r24	; 32
    148e:	83 e3       	ldi	r24, 0x33	; 51
    1490:	89 b9       	out	0x09, r24	; 9
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	08 95       	ret

00001496 <UART_TransmitChar>:
    1496:	6c b9       	out	0x0c, r22	; 12
    1498:	5d 9b       	sbis	0x0b, 5	; 11
    149a:	fe cf       	rjmp	.-4      	; 0x1498 <UART_TransmitChar+0x2>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	08 95       	ret

000014a0 <UART_ReceiveChar>:
    14a0:	5f 9b       	sbis	0x0b, 7	; 11
    14a2:	fe cf       	rjmp	.-4      	; 0x14a0 <UART_ReceiveChar>
    14a4:	8c b1       	in	r24, 0x0c	; 12
    14a6:	fb 01       	movw	r30, r22
    14a8:	80 83       	st	Z, r24
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	08 95       	ret

000014ae <UART_EnableInterrupt>:
    14ae:	81 11       	cpse	r24, r1
    14b0:	11 c0       	rjmp	.+34     	; 0x14d4 <UART_EnableInterrupt+0x26>
    14b2:	61 30       	cpi	r22, 0x01	; 1
    14b4:	41 f0       	breq	.+16     	; 0x14c6 <UART_EnableInterrupt+0x18>
    14b6:	18 f0       	brcs	.+6      	; 0x14be <UART_EnableInterrupt+0x10>
    14b8:	62 30       	cpi	r22, 0x02	; 2
    14ba:	49 f0       	breq	.+18     	; 0x14ce <UART_EnableInterrupt+0x20>
    14bc:	0b c0       	rjmp	.+22     	; 0x14d4 <UART_EnableInterrupt+0x26>
    14be:	8a b1       	in	r24, 0x0a	; 10
    14c0:	80 68       	ori	r24, 0x80	; 128
    14c2:	8a b9       	out	0x0a, r24	; 10
    14c4:	07 c0       	rjmp	.+14     	; 0x14d4 <UART_EnableInterrupt+0x26>
    14c6:	8a b1       	in	r24, 0x0a	; 10
    14c8:	80 64       	ori	r24, 0x40	; 64
    14ca:	8a b9       	out	0x0a, r24	; 10
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <UART_EnableInterrupt+0x26>
    14ce:	8a b1       	in	r24, 0x0a	; 10
    14d0:	80 62       	ori	r24, 0x20	; 32
    14d2:	8a b9       	out	0x0a, r24	; 10
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	08 95       	ret

000014d8 <UART_SetCallback>:
    14d8:	81 11       	cpse	r24, r1
    14da:	14 c0       	rjmp	.+40     	; 0x1504 <UART_SetCallback+0x2c>
    14dc:	61 30       	cpi	r22, 0x01	; 1
    14de:	49 f0       	breq	.+18     	; 0x14f2 <UART_SetCallback+0x1a>
    14e0:	18 f0       	brcs	.+6      	; 0x14e8 <UART_SetCallback+0x10>
    14e2:	62 30       	cpi	r22, 0x02	; 2
    14e4:	59 f0       	breq	.+22     	; 0x14fc <UART_SetCallback+0x24>
    14e6:	0e c0       	rjmp	.+28     	; 0x1504 <UART_SetCallback+0x2c>
    14e8:	50 93 ca 01 	sts	0x01CA, r21	; 0x8001ca <Gptr_uartRxInt+0x1>
    14ec:	40 93 c9 01 	sts	0x01C9, r20	; 0x8001c9 <Gptr_uartRxInt>
    14f0:	09 c0       	rjmp	.+18     	; 0x1504 <UART_SetCallback+0x2c>
    14f2:	50 93 cc 01 	sts	0x01CC, r21	; 0x8001cc <Gptr_uartTxInt+0x1>
    14f6:	40 93 cb 01 	sts	0x01CB, r20	; 0x8001cb <Gptr_uartTxInt>
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <UART_SetCallback+0x2c>
    14fc:	50 93 ce 01 	sts	0x01CE, r21	; 0x8001ce <Gptr_uartDataEmptyRegInt+0x1>
    1500:	40 93 cd 01 	sts	0x01CD, r20	; 0x8001cd <Gptr_uartDataEmptyRegInt>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	08 95       	ret

00001508 <__vector_13>:

void __vector_13(void) __attribute__((signal)); // USART, Rx Complete
void __vector_13(void) {
    1508:	1f 92       	push	r1
    150a:	0f 92       	push	r0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
    1512:	2f 93       	push	r18
    1514:	3f 93       	push	r19
    1516:	4f 93       	push	r20
    1518:	5f 93       	push	r21
    151a:	6f 93       	push	r22
    151c:	7f 93       	push	r23
    151e:	8f 93       	push	r24
    1520:	9f 93       	push	r25
    1522:	af 93       	push	r26
    1524:	bf 93       	push	r27
    1526:	ef 93       	push	r30
    1528:	ff 93       	push	r31
	Gptr_uartRxInt();
    152a:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <Gptr_uartRxInt>
    152e:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <Gptr_uartRxInt+0x1>
    1532:	09 95       	icall
}
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_14>:
void __vector_14(void) __attribute__((signal)); // USART Data Register Empty
void __vector_14(void) {
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
    1560:	2f 93       	push	r18
    1562:	3f 93       	push	r19
    1564:	4f 93       	push	r20
    1566:	5f 93       	push	r21
    1568:	6f 93       	push	r22
    156a:	7f 93       	push	r23
    156c:	8f 93       	push	r24
    156e:	9f 93       	push	r25
    1570:	af 93       	push	r26
    1572:	bf 93       	push	r27
    1574:	ef 93       	push	r30
    1576:	ff 93       	push	r31
	Gptr_uartDataEmptyRegInt();
    1578:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <Gptr_uartDataEmptyRegInt>
    157c:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <Gptr_uartDataEmptyRegInt+0x1>
    1580:	09 95       	icall
}
    1582:	ff 91       	pop	r31
    1584:	ef 91       	pop	r30
    1586:	bf 91       	pop	r27
    1588:	af 91       	pop	r26
    158a:	9f 91       	pop	r25
    158c:	8f 91       	pop	r24
    158e:	7f 91       	pop	r23
    1590:	6f 91       	pop	r22
    1592:	5f 91       	pop	r21
    1594:	4f 91       	pop	r20
    1596:	3f 91       	pop	r19
    1598:	2f 91       	pop	r18
    159a:	0f 90       	pop	r0
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	0f 90       	pop	r0
    15a0:	1f 90       	pop	r1
    15a2:	18 95       	reti

000015a4 <__vector_15>:
void __vector_15(void) __attribute__((signal)); // USART, Tx Complete
void __vector_15(void) {
    15a4:	1f 92       	push	r1
    15a6:	0f 92       	push	r0
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	0f 92       	push	r0
    15ac:	11 24       	eor	r1, r1
    15ae:	2f 93       	push	r18
    15b0:	3f 93       	push	r19
    15b2:	4f 93       	push	r20
    15b4:	5f 93       	push	r21
    15b6:	6f 93       	push	r22
    15b8:	7f 93       	push	r23
    15ba:	8f 93       	push	r24
    15bc:	9f 93       	push	r25
    15be:	af 93       	push	r26
    15c0:	bf 93       	push	r27
    15c2:	ef 93       	push	r30
    15c4:	ff 93       	push	r31
	Gptr_uartTxInt();
    15c6:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <Gptr_uartTxInt>
    15ca:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <Gptr_uartTxInt+0x1>
    15ce:	09 95       	icall
}
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	bf 91       	pop	r27
    15d6:	af 91       	pop	r26
    15d8:	9f 91       	pop	r25
    15da:	8f 91       	pop	r24
    15dc:	7f 91       	pop	r23
    15de:	6f 91       	pop	r22
    15e0:	5f 91       	pop	r21
    15e2:	4f 91       	pop	r20
    15e4:	3f 91       	pop	r19
    15e6:	2f 91       	pop	r18
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__tablejump2__>:
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	05 90       	lpm	r0, Z+
    15f8:	f4 91       	lpm	r31, Z
    15fa:	e0 2d       	mov	r30, r0
    15fc:	09 94       	ijmp

000015fe <_exit>:
    15fe:	f8 94       	cli

00001600 <__stop_program>:
    1600:	ff cf       	rjmp	.-2      	; 0x1600 <__stop_program>
