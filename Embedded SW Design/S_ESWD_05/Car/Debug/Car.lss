
Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000019ee  00001a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  00800074  00800074  00001a96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ac8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fa2  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014b6  00000000  00000000  00004de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026b5  00000000  00000000  0000629c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e0  00000000  00000000  00008954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ed6  00000000  00000000  00009034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dcb  00000000  00000000  00009f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000bcd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
       8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
       c:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__vector_3>
      10:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__vector_4>
      14:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__vector_5>
      18:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      1c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      20:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      24:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__vector_9>
      28:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      2c:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__vector_11>
      30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      34:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      38:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      3c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      44:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      48:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      4c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      50:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      54:	cd 04       	cpc	r12, r13
      56:	82 05       	cpc	r24, r2
      58:	82 05       	cpc	r24, r2
      5a:	82 05       	cpc	r24, r2
      5c:	da 04       	cpc	r13, r10
      5e:	e7 04       	cpc	r14, r7
      60:	82 05       	cpc	r24, r2
      62:	f4 04       	cpc	r15, r4
      64:	5c 05       	cpc	r21, r12
      66:	01 05       	cpc	r16, r1
      68:	0e 05       	cpc	r16, r14
      6a:	1b 05       	cpc	r17, r11
      6c:	28 05       	cpc	r18, r8
      6e:	35 05       	cpc	r19, r5
      70:	42 05       	cpc	r20, r2
      72:	4f 05       	cpc	r20, r15
      74:	69 05       	cpc	r22, r9
      76:	76 05       	cpc	r23, r6
      78:	13 06       	cpc	r1, r19
      7a:	1e 06       	cpc	r1, r30
      7c:	29 06       	cpc	r2, r25
      7e:	34 06       	cpc	r3, r20
      80:	3f 06       	cpc	r3, r31
      82:	4a 06       	cpc	r4, r26
      84:	55 06       	cpc	r5, r21
      86:	77 06       	cpc	r7, r23
      88:	7a 06       	cpc	r7, r26
      8a:	7e 06       	cpc	r7, r30
      8c:	ab 06       	cpc	r10, r27
      8e:	ab 06       	cpc	r10, r27
      90:	81 06       	cpc	r8, r17
      92:	84 06       	cpc	r8, r20
      94:	87 06       	cpc	r8, r23
      96:	8b 06       	cpc	r8, r27
      98:	8e 06       	cpc	r8, r30
      9a:	91 06       	cpc	r9, r17
      9c:	95 06       	cpc	r9, r21
      9e:	98 06       	cpc	r9, r24
      a0:	9b 06       	cpc	r9, r27
      a2:	9f 06       	cpc	r9, r31
      a4:	a2 06       	cpc	r10, r18
      a6:	a5 06       	cpc	r10, r21
      a8:	a8 06       	cpc	r10, r24

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf e5       	ldi	r28, 0x5F	; 95
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	10 e0       	ldi	r17, 0x00	; 0
      b8:	a0 e6       	ldi	r26, 0x60	; 96
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	ee ee       	ldi	r30, 0xEE	; 238
      be:	f9 e1       	ldi	r31, 0x19	; 25
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	a4 37       	cpi	r26, 0x74	; 116
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	a4 e7       	ldi	r26, 0x74	; 116
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	ac 3a       	cpi	r26, 0xAC	; 172
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
      dc:	0e 94 37 09 	call	0x126e	; 0x126e <main>
      e0:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <_exit>

000000e4 <__bad_interrupt>:
      e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e8 <SYS_Init>:

/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
uint8_t SYS_Init()
{
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	62 97       	sbiw	r28, 0x12	; 18
      f2:	0f b6       	in	r0, 0x3f	; 63
      f4:	f8 94       	cli
      f6:	de bf       	out	0x3e, r29	; 62
      f8:	0f be       	out	0x3f, r0	; 63
      fa:	cd bf       	out	0x3d, r28	; 61
	GIE_voidEnable();
      fc:	0e 94 b6 03 	call	0x76c	; 0x76c <GIE_voidEnable>
	Sensing_Init();
     100:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Sensing_Init>
	Steering_InitFunction();
     104:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Steering_InitFunction>
	ST_Task_Config_t sensingTask = {ONE, ZERO, ZERO, THREE, Sensing_MainFunction};
     108:	86 e0       	ldi	r24, 0x06	; 6
     10a:	e2 e6       	ldi	r30, 0x62	; 98
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	de 01       	movw	r26, r28
     110:	11 96       	adiw	r26, 0x01	; 1
     112:	01 90       	ld	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	8a 95       	dec	r24
     118:	e1 f7       	brne	.-8      	; 0x112 <SYS_Init+0x2a>
	ST_Task_Config_t crashingTask = {ZERO, ONE, ONE, THREE, Crashing_MainFunction};
     11a:	86 e0       	ldi	r24, 0x06	; 6
     11c:	e8 e6       	ldi	r30, 0x68	; 104
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	de 01       	movw	r26, r28
     122:	17 96       	adiw	r26, 0x07	; 7
     124:	01 90       	ld	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	8a 95       	dec	r24
     12a:	e1 f7       	brne	.-8      	; 0x124 <SYS_Init+0x3c>
	ST_Task_Config_t steeringTask = {TWO, TWO, TWO, THREE, Steering_MainFunction};
     12c:	86 e0       	ldi	r24, 0x06	; 6
     12e:	ee e6       	ldi	r30, 0x6E	; 110
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	de 01       	movw	r26, r28
     134:	1d 96       	adiw	r26, 0x0d	; 13
     136:	01 90       	ld	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	8a 95       	dec	r24
     13c:	e1 f7       	brne	.-8      	; 0x136 <SYS_Init+0x4e>
	TMU_CreateTask(&sensingTask);
     13e:	ce 01       	movw	r24, r28
     140:	01 96       	adiw	r24, 0x01	; 1
     142:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <TMU_CreateTask>
	TMU_CreateTask(&crashingTask);
     146:	ce 01       	movw	r24, r28
     148:	07 96       	adiw	r24, 0x07	; 7
     14a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <TMU_CreateTask>
	TMU_CreateTask(&steeringTask);
     14e:	ce 01       	movw	r24, r28
     150:	0d 96       	adiw	r24, 0x0d	; 13
     152:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <TMU_CreateTask>
	TMU_Init();
     156:	0e 94 ce 08 	call	0x119c	; 0x119c <TMU_Init>
	/* Replace with your application code */
	return E_OK;
}
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	62 96       	adiw	r28, 0x12	; 18
     15e:	0f b6       	in	r0, 0x3f	; 63
     160:	f8 94       	cli
     162:	de bf       	out	0x3e, r29	; 62
     164:	0f be       	out	0x3f, r0	; 63
     166:	cd bf       	out	0x3d, r28	; 61
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <SYS_Update>:

uint8_t SYS_Update()
{
	TMU_Run();
     16e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <TMU_Run>
	return E_OK;
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	08 95       	ret

00000176 <CrashingModule_GetDirection>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
E_STATUS CrashingModule_GetDirection(ptr_uint8_t MotorDirection)
{
	if (NULL_PTR == MotorDirection)
     176:	00 97       	sbiw	r24, 0x00	; 0
     178:	19 f4       	brne	.+6      	; 0x180 <CrashingModule_GetDirection+0xa>
	{
		gu8_RetValMotorDirection = E_NOK;
     17a:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <gu8_RetValMotorDirection>
     17e:	0d c0       	rjmp	.+26     	; 0x19a <CrashingModule_GetDirection+0x24>
	}
	else if ((*MotorDirection >= STATE_MOTOR_STOP) && (*MotorDirection <= STATE_MOTOR_LEFT) )
     180:	fc 01       	movw	r30, r24
     182:	20 81       	ld	r18, Z
     184:	25 30       	cpi	r18, 0x05	; 5
     186:	38 f4       	brcc	.+14     	; 0x196 <CrashingModule_GetDirection+0x20>
	{
		*MotorDirection = gu8o_MotorDirection;
     188:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <gu8o_MotorDirection>
     18c:	20 83       	st	Z, r18
		gu8_RetValMotorDirection = E_OK;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <gu8_RetValMotorDirection>
     194:	02 c0       	rjmp	.+4      	; 0x19a <CrashingModule_GetDirection+0x24>
	}
	else
	{
		gu8_RetValMotorDirection = E_NOK;
     196:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <gu8_RetValMotorDirection>
	}
	return gu8_RetValMotorDirection;
     19a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <gu8_RetValMotorDirection>
}
     19e:	08 95       	ret

000001a0 <CrashingModule_GetSpeed>:



E_STATUS CrashingModule_GetSpeed(ptr_uint8_t Speed)
{
	if (NULL_PTR == Speed)
     1a0:	00 97       	sbiw	r24, 0x00	; 0
     1a2:	19 f4       	brne	.+6      	; 0x1aa <CrashingModule_GetSpeed+0xa>
	{
		gu8_RetValMotorDirection = E_NOK;
     1a4:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <gu8_RetValMotorDirection>
     1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <CrashingModule_GetSpeed+0x24>
	}
	else if ((*Speed >= MOTOR_MIN_SPEED) && (*Speed <= MOTOR_MAX_SPEED) )
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 81       	ld	r18, Z
     1ae:	25 36       	cpi	r18, 0x65	; 101
     1b0:	38 f4       	brcc	.+14     	; 0x1c0 <CrashingModule_GetSpeed+0x20>
	{
		*Speed = gu8o_MotorSpeed;
     1b2:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <gu8o_MotorSpeed>
     1b6:	20 83       	st	Z, r18
		gu8_RetValMotorDirection = E_OK;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <gu8_RetValMotorDirection>
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <CrashingModule_GetSpeed+0x24>
	}
	else
	{
		gu8_RetValMotorDirection = E_NOK;
     1c0:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <gu8_RetValMotorDirection>
	}
	
	return gu8_RetValMotorDirection;
     1c4:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <gu8_RetValMotorDirection>
}
     1c8:	08 95       	ret

000001ca <Crashing_MainFunction>:
float32_t gf32i_SensorDistance;
extern volatile uint8_t gu8o_MotorSpeed;
extern volatile uint8_t gu8o_MotorDirection;

void Crashing_MainFunction()
{
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
	SensingGetDistance(&gf32i_SensorDistance);
     1d2:	8f e8       	ldi	r24, 0x8F	; 143
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 45 01 	call	0x28a	; 0x28a <SensingGetDistance>
	if(gf32i_SensorDistance > MAX_DISTANCE)
     1da:	c0 90 8f 00 	lds	r12, 0x008F	; 0x80008f <gf32i_SensorDistance>
     1de:	d0 90 90 00 	lds	r13, 0x0090	; 0x800090 <gf32i_SensorDistance+0x1>
     1e2:	e0 90 91 00 	lds	r14, 0x0091	; 0x800091 <gf32i_SensorDistance+0x2>
     1e6:	f0 90 92 00 	lds	r15, 0x0092	; 0x800092 <gf32i_SensorDistance+0x3>
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	48 e5       	ldi	r20, 0x58	; 88
     1f0:	52 e4       	ldi	r21, 0x42	; 66
     1f2:	c7 01       	movw	r24, r14
     1f4:	b6 01       	movw	r22, r12
     1f6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__gesf2>
     1fa:	18 16       	cp	r1, r24
     1fc:	3c f4       	brge	.+14     	; 0x20c <Crashing_MainFunction+0x42>
	{
		gu8o_MotorSpeed = MIN_SPEED;
     1fe:	86 e4       	ldi	r24, 0x46	; 70
     200:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <gu8o_MotorSpeed>
		gu8o_MotorDirection = STATE_MOTOR_FORWARD;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <gu8o_MotorDirection>
     20a:	3a c0       	rjmp	.+116    	; 0x280 <Crashing_MainFunction+0xb6>
	}
	else if((gf32i_SensorDistance >= RANGE_DISTANCE) && (gf32i_SensorDistance <= MAX_DISTANCE))
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	4c e3       	ldi	r20, 0x3C	; 60
     212:	52 e4       	ldi	r21, 0x42	; 66
     214:	c7 01       	movw	r24, r14
     216:	b6 01       	movw	r22, r12
     218:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__gesf2>
     21c:	88 23       	and	r24, r24
     21e:	8c f0       	brlt	.+34     	; 0x242 <Crashing_MainFunction+0x78>
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	48 e5       	ldi	r20, 0x58	; 88
     226:	52 e4       	ldi	r21, 0x42	; 66
     228:	c7 01       	movw	r24, r14
     22a:	b6 01       	movw	r22, r12
     22c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__cmpsf2>
     230:	18 16       	cp	r1, r24
     232:	3c f0       	brlt	.+14     	; 0x242 <Crashing_MainFunction+0x78>
	{
		gu8o_MotorSpeed = MAX_SPEED;
     234:	8f e5       	ldi	r24, 0x5F	; 95
     236:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <gu8o_MotorSpeed>
		gu8o_MotorDirection = STATE_MOTOR_RIGHT;
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <gu8o_MotorDirection>
     240:	1f c0       	rjmp	.+62     	; 0x280 <Crashing_MainFunction+0xb6>
	}
	else if ((gf32i_SensorDistance < RANGE_DISTANCE) &&(gf32i_SensorDistance >= MIN_DISTANCE))
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	4c e3       	ldi	r20, 0x3C	; 60
     248:	52 e4       	ldi	r21, 0x42	; 66
     24a:	c7 01       	movw	r24, r14
     24c:	b6 01       	movw	r22, r12
     24e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__cmpsf2>
     252:	88 23       	and	r24, r24
     254:	8c f4       	brge	.+34     	; 0x278 <Crashing_MainFunction+0xae>
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	50 e4       	ldi	r21, 0x40	; 64
     25e:	c7 01       	movw	r24, r14
     260:	b6 01       	movw	r22, r12
     262:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__gesf2>
     266:	88 23       	and	r24, r24
     268:	3c f0       	brlt	.+14     	; 0x278 <Crashing_MainFunction+0xae>
	{
		gu8o_MotorSpeed = MIN_SPEED;
     26a:	86 e4       	ldi	r24, 0x46	; 70
     26c:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <gu8o_MotorSpeed>
		gu8o_MotorDirection = STATE_MOTOR_BACKWARD;
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <gu8o_MotorDirection>
     276:	04 c0       	rjmp	.+8      	; 0x280 <Crashing_MainFunction+0xb6>
	}
	else
	{
		gu8o_MotorSpeed = ZERO;
     278:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <gu8o_MotorSpeed>
		gu8o_MotorDirection = STATE_MOTOR_STOP;
     27c:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <gu8o_MotorDirection>
	}
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	df 90       	pop	r13
     286:	cf 90       	pop	r12
     288:	08 95       	ret

0000028a <SensingGetDistance>:
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
E_STATUS SensingGetDistance(ptr_float32_t Sensor_distance)
{
	
	if (Sensor_distance == NULL_PTR)
     28a:	00 97       	sbiw	r24, 0x00	; 0
     28c:	79 f0       	breq	.+30     	; 0x2ac <SensingGetDistance+0x22>
	{
		return E_NOK;
	}
	(*Sensor_distance)=gf32o_SensorDistance;
     28e:	40 91 93 00 	lds	r20, 0x0093	; 0x800093 <gf32o_SensorDistance>
     292:	50 91 94 00 	lds	r21, 0x0094	; 0x800094 <gf32o_SensorDistance+0x1>
     296:	60 91 95 00 	lds	r22, 0x0095	; 0x800095 <gf32o_SensorDistance+0x2>
     29a:	70 91 96 00 	lds	r23, 0x0096	; 0x800096 <gf32o_SensorDistance+0x3>
     29e:	fc 01       	movw	r30, r24
     2a0:	40 83       	st	Z, r20
     2a2:	51 83       	std	Z+1, r21	; 0x01
     2a4:	62 83       	std	Z+2, r22	; 0x02
     2a6:	73 83       	std	Z+3, r23	; 0x03
	return E_OK;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	08 95       	ret
E_STATUS SensingGetDistance(ptr_float32_t Sensor_distance)
{
	
	if (Sensor_distance == NULL_PTR)
	{
		return E_NOK;
     2ac:	80 e0       	ldi	r24, 0x00	; 0
	}
	(*Sensor_distance)=gf32o_SensorDistance;
	return E_OK;
}
     2ae:	08 95       	ret

000002b0 <Sensing_Init>:
uint8_t u8_SensorInit = E_NOK;
/******************************************************************************
*                         LOCAL FUNCTIONS IMPLEMENTATION					  *
*******************************************************************************/
E_STATUS Sensing_Init(void)
{
     2b0:	cf 93       	push	r28
	uint8_t count = ZERO;
     2b2:	c0 e0       	ldi	r28, 0x00	; 0
	while (count != 3)
     2b4:	0a c0       	rjmp	.+20     	; 0x2ca <Sensing_Init+0x1a>
	{
		if (E_NOK == ULTRASONIC_INIT())
     2b6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <ULTRASONIC_INIT>
     2ba:	81 11       	cpse	r24, r1
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <Sensing_Init+0x12>
		{
			count++;
     2be:	cf 5f       	subi	r28, 0xFF	; 255
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <Sensing_Init+0x1a>
		}
		else
		{
			u8_SensorInit = E_OK;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
			break;
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <Sensing_Init+0x1e>
*                         LOCAL FUNCTIONS IMPLEMENTATION					  *
*******************************************************************************/
E_STATUS Sensing_Init(void)
{
	uint8_t count = ZERO;
	while (count != 3)
     2ca:	c3 30       	cpi	r28, 0x03	; 3
     2cc:	a1 f7       	brne	.-24     	; 0x2b6 <Sensing_Init+0x6>
			u8_SensorInit = E_OK;
			break;
		}
	}
	return u8_SensorInit;
}
     2ce:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <Sensing_MainFunction>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
void Sensing_MainFunction(void)
{
	if (E_OK == u8_SensorInit)
     2d6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	29 f4       	brne	.+10     	; 0x2e8 <Sensing_MainFunction+0x12>
	{
		ULTRASONIC_GetDist(&gf32o_SensorDistance);
     2de:	83 e9       	ldi	r24, 0x93	; 147
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 0c 03 	call	0x618	; 0x618 <ULTRASONIC_GetDist>
     2e6:	08 95       	ret
	}
	else
	{
		gf32o_SensorDistance = ONE;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	a0 e8       	ldi	r26, 0x80	; 128
     2ee:	bf e3       	ldi	r27, 0x3F	; 63
     2f0:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <gf32o_SensorDistance>
     2f4:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <gf32o_SensorDistance+0x1>
     2f8:	a0 93 95 00 	sts	0x0095, r26	; 0x800095 <gf32o_SensorDistance+0x2>
     2fc:	b0 93 96 00 	sts	0x0096, r27	; 0x800096 <gf32o_SensorDistance+0x3>
     300:	08 95       	ret

00000302 <Steering_SetDirection>:

/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
E_STATUS Steering_SetDirection(ptr_uint8_t MotorDirection)
{
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	1f 92       	push	r1
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	8c 01       	movw	r16, r24
	uint8_t state;
	CrashingModule_GetDirection(&state);
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 bb 00 	call	0x176	; 0x176 <CrashingModule_GetDirection>
	if ((state >= STATE_MOTOR_STOP) && (state <= STATE_MOTOR_LEFT) )
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	85 30       	cpi	r24, 0x05	; 5
     31e:	30 f4       	brcc	.+12     	; 0x32c <Steering_SetDirection+0x2a>
	{
		*MotorDirection = state;
     320:	f8 01       	movw	r30, r16
     322:	80 83       	st	Z, r24
		gu8i_RetValMotorDirection = E_OK;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <gu8i_RetValMotorDirection>
     32a:	02 c0       	rjmp	.+4      	; 0x330 <Steering_SetDirection+0x2e>
	}
	else
	{
		gu8i_RetValMotorDirection = E_NOK;
     32c:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <gu8i_RetValMotorDirection>
	}
	
	return gu8i_RetValMotorDirection;
     330:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <gu8i_RetValMotorDirection>
}
     334:	0f 90       	pop	r0
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	08 95       	ret

00000340 <Steering_SetSpeed>:

E_STATUS Steering_SetSpeed(ptr_uint8_t MotorSpeed)
{
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	1f 92       	push	r1
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	8c 01       	movw	r16, r24
	uint8_t state;
	CrashingModule_GetSpeed(&state);
     350:	ce 01       	movw	r24, r28
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <CrashingModule_GetSpeed>
	if (!((state >= MOTOR_MIN_SPEED)  && (state <= MOTOR_MAX_SPEED)))
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	85 36       	cpi	r24, 0x65	; 101
     35c:	18 f0       	brcs	.+6      	; 0x364 <Steering_SetSpeed+0x24>
	{
		gu8i_RetValMotorDirection = E_NOK;
     35e:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <gu8i_RetValMotorDirection>
     362:	05 c0       	rjmp	.+10     	; 0x36e <Steering_SetSpeed+0x2e>
	}
	else
	{
		*MotorSpeed = state;
     364:	f8 01       	movw	r30, r16
     366:	80 83       	st	Z, r24
		gu8i_RetValMotorDirection = E_OK;
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <gu8i_RetValMotorDirection>
	}
	
	return gu8i_RetValMotorDirection;
     36e:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <gu8i_RetValMotorDirection>
}
     372:	0f 90       	pop	r0
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	08 95       	ret

0000037e <Steering_InitData>:


E_STATUS Steering_InitData()
{
	uint8_t u8_retval = E_NOK;
	if ((E_OK == Steering_SetDirection(&gu8i_MotorDirection)) && (E_OK == Steering_SetSpeed(&gu8i_MotorSpeed)))
     37e:	89 e9       	ldi	r24, 0x99	; 153
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 81 01 	call	0x302	; 0x302 <Steering_SetDirection>
     386:	81 30       	cpi	r24, 0x01	; 1
     388:	39 f4       	brne	.+14     	; 0x398 <Steering_InitData+0x1a>
     38a:	88 e9       	ldi	r24, 0x98	; 152
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 a0 01 	call	0x340	; 0x340 <Steering_SetSpeed>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	19 f4       	brne	.+6      	; 0x39c <Steering_InitData+0x1e>
     396:	08 95       	ret
	{
		u8_retval = E_OK;
	}
	else
	{
		u8_retval = E_NOK;
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	08 95       	ret
     39c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return u8_retval;
}
     39e:	08 95       	ret

000003a0 <Steering_InitFunction>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
E_STATUS Steering_InitFunction()
{
	if (E_OK == DC_MotorInit(Motor_LEFT))
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 3b 02 	call	0x476	; 0x476 <DC_MotorInit>
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	19 f4       	brne	.+6      	; 0x3b0 <Steering_InitFunction+0x10>
	{
		gu8_RetVal = E_OK;
     3aa:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gu8_RetVal>
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <Steering_InitFunction+0x14>
	}
	else
	{
		gu8_RetVal = E_NOK;
     3b0:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <gu8_RetVal>
	}
	if (E_OK == DC_MotorInit(Motor_RIGHT))
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	0e 94 3b 02 	call	0x476	; 0x476 <DC_MotorInit>
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	19 f4       	brne	.+6      	; 0x3c4 <Steering_InitFunction+0x24>
	{
		gu8_RetVal = E_OK;
     3be:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <gu8_RetVal>
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <Steering_InitFunction+0x28>
	}
	else
	{
		gu8_RetVal = E_NOK;
     3c4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <gu8_RetVal>
	}
	
	return gu8_RetVal;
}
     3c8:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gu8_RetVal>
     3cc:	08 95       	ret

000003ce <Steering_MainFunction>:

void Steering_MainFunction(void)
{
	if (E_OK == gu8_RetVal)
     3ce:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <gu8_RetVal>
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <Steering_MainFunction+0xa>
     3d6:	4e c0       	rjmp	.+156    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	{
		if (E_OK == Steering_InitData())
     3d8:	0e 94 bf 01 	call	0x37e	; 0x37e <Steering_InitData>
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	09 f0       	breq	.+2      	; 0x3e2 <Steering_MainFunction+0x14>
     3e0:	49 c0       	rjmp	.+146    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
		{
			switch (gu8i_MotorDirection)
     3e2:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <gu8i_MotorDirection>
     3e6:	82 30       	cpi	r24, 0x02	; 2
     3e8:	c1 f0       	breq	.+48     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     3ea:	28 f4       	brcc	.+10     	; 0x3f6 <Steering_MainFunction+0x28>
     3ec:	88 23       	and	r24, r24
     3ee:	e1 f1       	breq	.+120    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	31 f0       	breq	.+12     	; 0x400 <__EEPROM_REGION_LENGTH__>
     3f4:	08 95       	ret
     3f6:	83 30       	cpi	r24, 0x03	; 3
     3f8:	e9 f0       	breq	.+58     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     3fa:	84 30       	cpi	r24, 0x04	; 4
     3fc:	41 f1       	breq	.+80     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     3fe:	08 95       	ret
			{
				case (STATE_MOTOR_FORWARD):
				{
					DC_MotorStart(Motor_RIGHT, gu8i_MotorSpeed, Motor_FORWARD);
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu8i_MotorSpeed>
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	0e 94 75 02 	call	0x4ea	; 0x4ea <DC_MotorStart>
					DC_MotorStart(Motor_LEFT, gu8i_MotorSpeed, Motor_FORWARD);
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu8i_MotorSpeed>
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	0e 94 75 02 	call	0x4ea	; 0x4ea <DC_MotorStart>
					break;
     418:	08 95       	ret
				}
				case (STATE_MOTOR_BACKWARD):
				{
					DC_MotorStart(Motor_RIGHT, gu8i_MotorSpeed, Motor_BACKWARD);
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu8i_MotorSpeed>
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	0e 94 75 02 	call	0x4ea	; 0x4ea <DC_MotorStart>
					DC_MotorStart(Motor_LEFT, gu8i_MotorSpeed, Motor_BACKWARD);
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu8i_MotorSpeed>
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e 94 75 02 	call	0x4ea	; 0x4ea <DC_MotorStart>
					break;
     432:	08 95       	ret
				}
				case (STATE_MOTOR_RIGHT):
				{
					DC_MotorStart(Motor_RIGHT, gu8i_MotorSpeed, Motor_BACKWARD);
     434:	41 e0       	ldi	r20, 0x01	; 1
     436:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu8i_MotorSpeed>
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 75 02 	call	0x4ea	; 0x4ea <DC_MotorStart>
					DC_MotorStart(Motor_LEFT, gu8i_MotorSpeed, Motor_FORWARD);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu8i_MotorSpeed>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 75 02 	call	0x4ea	; 0x4ea <DC_MotorStart>
					break;
     44c:	08 95       	ret
				}
				case (STATE_MOTOR_LEFT):
				{
					DC_MotorStart(Motor_RIGHT, gu8i_MotorSpeed, Motor_FORWARD);
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu8i_MotorSpeed>
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	0e 94 75 02 	call	0x4ea	; 0x4ea <DC_MotorStart>
					DC_MotorStart(Motor_LEFT, gu8i_MotorSpeed, Motor_BACKWARD);
     45a:	41 e0       	ldi	r20, 0x01	; 1
     45c:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <gu8i_MotorSpeed>
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 75 02 	call	0x4ea	; 0x4ea <DC_MotorStart>
					break;
     466:	08 95       	ret
				}
				case (STATE_MOTOR_STOP):
				{
					DC_MotorStop(Motor_RIGHT);
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	0e 94 cd 02 	call	0x59a	; 0x59a <DC_MotorStop>
					DC_MotorStop(Motor_LEFT);
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	0e 94 cd 02 	call	0x59a	; 0x59a <DC_MotorStop>
     474:	08 95       	ret

00000476 <DC_MotorInit>:
*  Author: Ayman
*/

#include "DC_Motor.h"
Motor_ERROR_state_t DC_MotorInit(uint8_t Motor)
{
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
	if(!((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT)))
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	60 f5       	brcc	.+88     	; 0x4da <DC_MotorInit+0x64>
	{
		return E_NOK;
	}
	else
	{
		switch (Motor)
     482:	88 23       	and	r24, r24
     484:	19 f0       	breq	.+6      	; 0x48c <DC_MotorInit+0x16>
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	a1 f0       	breq	.+40     	; 0x4b2 <DC_MotorInit+0x3c>
     48a:	29 c0       	rjmp	.+82     	; 0x4de <DC_MotorInit+0x68>
		{
			case Motor_RIGHT:
			configs.port = Motor_RIGHT_FORWARD_PORT;
     48c:	c9 e8       	ldi	r28, 0x89	; 137
     48e:	d0 e0       	ldi	r29, 0x00	; 0
     490:	13 e0       	ldi	r17, 0x03	; 3
     492:	18 83       	st	Y, r17
			configs.pin = Motor_RIGHT_FORWARD_PIN;
     494:	19 83       	std	Y+1, r17	; 0x01
			configs.dir = OUTPUT;
     496:	01 e0       	ldi	r16, 0x01	; 1
     498:	0a 83       	std	Y+2, r16	; 0x02
			DIO_Init(&configs);
     49a:	ce 01       	movw	r24, r28
     49c:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
			configs.port = Motor_RIGHT_BACKWARD_PORT;
     4a0:	18 83       	st	Y, r17
			configs.pin = Motor_RIGHT_BACKWARD_PIN;
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	89 83       	std	Y+1, r24	; 0x01
			configs.dir = OUTPUT;
     4a6:	0a 83       	std	Y+2, r16	; 0x02
			DIO_Init(&configs);
     4a8:	ce 01       	movw	r24, r28
     4aa:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
			DIO_Init(&configs);
			break;
		}
	}
	
	return E_OK;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
			DIO_Init(&configs);
			configs.port = Motor_RIGHT_BACKWARD_PORT;
			configs.pin = Motor_RIGHT_BACKWARD_PIN;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
     4b0:	17 c0       	rjmp	.+46     	; 0x4e0 <DC_MotorInit+0x6a>
			case Motor_LEFT:
			configs.port = Motor_LEFT_FORWARD_PORT;
     4b2:	c9 e8       	ldi	r28, 0x89	; 137
     4b4:	d0 e0       	ldi	r29, 0x00	; 0
     4b6:	03 e0       	ldi	r16, 0x03	; 3
     4b8:	08 83       	st	Y, r16
			configs.pin = Motor_LEFT_FORWARD_PIN;
     4ba:	87 e0       	ldi	r24, 0x07	; 7
     4bc:	89 83       	std	Y+1, r24	; 0x01
			configs.dir = OUTPUT;
     4be:	11 e0       	ldi	r17, 0x01	; 1
     4c0:	1a 83       	std	Y+2, r17	; 0x02
			DIO_Init(&configs);
     4c2:	ce 01       	movw	r24, r28
     4c4:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
			configs.port = Motor_LEFT_BACKWARD_PORT;
     4c8:	08 83       	st	Y, r16
			configs.pin = Motor_LEFT_BACKWARD_PIN;
     4ca:	86 e0       	ldi	r24, 0x06	; 6
     4cc:	89 83       	std	Y+1, r24	; 0x01
			configs.dir = OUTPUT;
     4ce:	1a 83       	std	Y+2, r17	; 0x02
			DIO_Init(&configs);
     4d0:	ce 01       	movw	r24, r28
     4d2:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
			break;
		}
	}
	
	return E_OK;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
			DIO_Init(&configs);
			configs.port = Motor_LEFT_BACKWARD_PORT;
			configs.pin = Motor_LEFT_BACKWARD_PIN;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
     4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <DC_MotorInit+0x6a>
#include "DC_Motor.h"
Motor_ERROR_state_t DC_MotorInit(uint8_t Motor)
{
	if(!((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT)))
	{
		return E_NOK;
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <DC_MotorInit+0x6a>
			DIO_Init(&configs);
			break;
		}
	}
	
	return E_OK;
     4de:	81 e0       	ldi	r24, 0x01	; 1
}
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	08 95       	ret

000004ea <DC_MotorStart>:
Motor_ERROR_state_t DC_MotorStart(uint8_t Motor,uint8_t Motor_speed,uint8_t Motor_Direction)
{
     4ea:	cf 93       	push	r28
	
	if(!(((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT))&&((Motor_speed>=Motor_MIN_SPEED)&&(Motor_speed<=Motor_MAX_SPEED))
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	08 f0       	brcs	.+2      	; 0x4f2 <DC_MotorStart+0x8>
     4f0:	49 c0       	rjmp	.+146    	; 0x584 <DC_MotorStart+0x9a>
     4f2:	65 36       	cpi	r22, 0x65	; 101
     4f4:	08 f0       	brcs	.+2      	; 0x4f8 <DC_MotorStart+0xe>
     4f6:	48 c0       	rjmp	.+144    	; 0x588 <DC_MotorStart+0x9e>
     4f8:	42 30       	cpi	r20, 0x02	; 2
     4fa:	08 f0       	brcs	.+2      	; 0x4fe <DC_MotorStart+0x14>
     4fc:	47 c0       	rjmp	.+142    	; 0x58c <DC_MotorStart+0xa2>
     4fe:	c6 2f       	mov	r28, r22
	{
		return E_NOK;
	}
	else
	{
		switch (Motor)
     500:	88 23       	and	r24, r24
     502:	19 f0       	breq	.+6      	; 0x50a <DC_MotorStart+0x20>
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	09 f1       	breq	.+66     	; 0x54a <DC_MotorStart+0x60>
     508:	43 c0       	rjmp	.+134    	; 0x590 <DC_MotorStart+0xa6>
		{
			case Motor_RIGHT:
			switch (Motor_Direction)
     50a:	44 23       	and	r20, r20
     50c:	19 f0       	breq	.+6      	; 0x514 <DC_MotorStart+0x2a>
     50e:	41 30       	cpi	r20, 0x01	; 1
     510:	61 f0       	breq	.+24     	; 0x52a <DC_MotorStart+0x40>
     512:	15 c0       	rjmp	.+42     	; 0x53e <DC_MotorStart+0x54>
			{
				case Motor_FORWARD:
				DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, LOW);
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	62 e0       	ldi	r22, 0x02	; 2
     518:	83 e0       	ldi	r24, 0x03	; 3
     51a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
				DIO_WritePIN(Motor_RIGHT_FORWARD_PORT, Motor_RIGHT_FORWARD_PIN, HIGH);
     51e:	41 e0       	ldi	r20, 0x01	; 1
     520:	63 e0       	ldi	r22, 0x03	; 3
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
				break;
     528:	0a c0       	rjmp	.+20     	; 0x53e <DC_MotorStart+0x54>
				case Motor_BACKWARD:
				DIO_WritePIN(Motor_RIGHT_FORWARD_PORT, Motor_RIGHT_FORWARD_PIN, LOW);
     52a:	40 e0       	ldi	r20, 0x00	; 0
     52c:	63 e0       	ldi	r22, 0x03	; 3
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
				DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, HIGH);
     534:	41 e0       	ldi	r20, 0x01	; 1
     536:	62 e0       	ldi	r22, 0x02	; 2
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
				break;
			}
			PWM_START(PWM_TIMER0, Motor_speed);
     53e:	6c 2f       	mov	r22, r28
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0e 94 c5 0a 	call	0x158a	; 0x158a <PWM_START>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE Motor LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     546:	81 e0       	ldi	r24, 0x01	; 1
				DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, HIGH);
				break;
			}
			PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE Motor RIGHT PWM REQUIRED SPEED
			break;
     548:	26 c0       	rjmp	.+76     	; 0x596 <DC_MotorStart+0xac>
			case Motor_LEFT:
			switch (Motor_Direction)
     54a:	44 23       	and	r20, r20
     54c:	19 f0       	breq	.+6      	; 0x554 <DC_MotorStart+0x6a>
     54e:	41 30       	cpi	r20, 0x01	; 1
     550:	69 f0       	breq	.+26     	; 0x56c <DC_MotorStart+0x82>
     552:	20 c0       	rjmp	.+64     	; 0x594 <DC_MotorStart+0xaa>
			{
				case Motor_FORWARD:
				DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	66 e0       	ldi	r22, 0x06	; 6
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
				DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, HIGH);
     55e:	41 e0       	ldi	r20, 0x01	; 1
     560:	67 e0       	ldi	r22, 0x07	; 7
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE Motor LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     568:	81 e0       	ldi	r24, 0x01	; 1
			switch (Motor_Direction)
			{
				case Motor_FORWARD:
				DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
				DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, HIGH);
				break;
     56a:	15 c0       	rjmp	.+42     	; 0x596 <DC_MotorStart+0xac>
				case Motor_BACKWARD:
				DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
     56c:	40 e0       	ldi	r20, 0x00	; 0
     56e:	67 e0       	ldi	r22, 0x07	; 7
     570:	83 e0       	ldi	r24, 0x03	; 3
     572:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
				DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, HIGH);
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	66 e0       	ldi	r22, 0x06	; 6
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE Motor LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     580:	81 e0       	ldi	r24, 0x01	; 1
				DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, HIGH);
				break;
				case Motor_BACKWARD:
				DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
				DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, HIGH);
				break;
     582:	09 c0       	rjmp	.+18     	; 0x596 <DC_MotorStart+0xac>
{
	
	if(!(((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT))&&((Motor_speed>=Motor_MIN_SPEED)&&(Motor_speed<=Motor_MAX_SPEED))
	&&((Motor_Direction>=Motor_FORWARD)&&(Motor_Direction<=Motor_BACKWARD))))
	{
		return E_NOK;
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	07 c0       	rjmp	.+14     	; 0x596 <DC_MotorStart+0xac>
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	05 c0       	rjmp	.+10     	; 0x596 <DC_MotorStart+0xac>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	03 c0       	rjmp	.+6      	; 0x596 <DC_MotorStart+0xac>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE Motor LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	01 c0       	rjmp	.+2      	; 0x596 <DC_MotorStart+0xac>
     594:	81 e0       	ldi	r24, 0x01	; 1
}
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <DC_MotorStop>:
Motor_ERROR_state_t DC_MotorStop(uint8_t Motor)
{
	
	if(!((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT)))
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	e8 f4       	brcc	.+58     	; 0x5d8 <DC_MotorStop+0x3e>
	{
		return E_NOK;
	}
	else
	{
		switch (Motor)
     59e:	88 23       	and	r24, r24
     5a0:	19 f0       	breq	.+6      	; 0x5a8 <DC_MotorStop+0xe>
     5a2:	81 30       	cpi	r24, 0x01	; 1
     5a4:	69 f0       	breq	.+26     	; 0x5c0 <DC_MotorStop+0x26>
     5a6:	1a c0       	rjmp	.+52     	; 0x5dc <DC_MotorStop+0x42>
		{
			case Motor_RIGHT:
			DIO_WritePIN(Motor_RIGHT_FORWARD_PORT, Motor_RIGHT_FORWARD_PIN, LOW);
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	63 e0       	ldi	r22, 0x03	; 3
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
			DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, LOW);
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	62 e0       	ldi	r22, 0x02	; 2
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
			DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
			DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
			break;
		}
	}
	return E_OK;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
		switch (Motor)
		{
			case Motor_RIGHT:
			DIO_WritePIN(Motor_RIGHT_FORWARD_PORT, Motor_RIGHT_FORWARD_PIN, LOW);
			DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, LOW);
			break;
     5be:	08 95       	ret
			case Motor_LEFT:
			DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
     5c0:	40 e0       	ldi	r20, 0x00	; 0
     5c2:	67 e0       	ldi	r22, 0x07	; 7
     5c4:	83 e0       	ldi	r24, 0x03	; 3
     5c6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
			DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	66 e0       	ldi	r22, 0x06	; 6
     5ce:	83 e0       	ldi	r24, 0x03	; 3
     5d0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
			break;
		}
	}
	return E_OK;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
			DIO_WritePIN(Motor_RIGHT_BACKWARD_PORT, Motor_RIGHT_BACKWARD_PIN, LOW);
			break;
			case Motor_LEFT:
			DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
			DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
			break;
     5d6:	08 95       	ret
Motor_ERROR_state_t DC_MotorStop(uint8_t Motor)
{
	
	if(!((Motor>=Motor_RIGHT)&&(Motor<=Motor_LEFT)))
	{
		return E_NOK;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	08 95       	ret
			DIO_WritePIN(Motor_LEFT_FORWARD_PORT, Motor_LEFT_FORWARD_PIN, LOW);
			DIO_WritePIN(Motor_LEFT_BACKWARD_PORT, Motor_LEFT_BACKWARD_PIN, LOW);
			break;
		}
	}
	return E_OK;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	08 95       	ret

000005e0 <ULTRASONIC_INIT>:
uint16_t g_timer1=0;
uint8_t g_tick=0;


E_STATUS ULTRASONIC_INIT(void)
{
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
	if(((ULTRASONIC_Trigger_PORT >= DIO_PORTA) && (ULTRASONIC_Trigger_PORT <= DIO_PORTD))
	&&((ULTRASONIC_Trigger_PIN>=PIN_0)&&(ULTRASONIC_Trigger_PIN<=PIN_7)))
	{
		configs.port = ULTRASONIC_Trigger_PORT;
     5e6:	c9 e8       	ldi	r28, 0x89	; 137
     5e8:	d0 e0       	ldi	r29, 0x00	; 0
     5ea:	11 e0       	ldi	r17, 0x01	; 1
     5ec:	18 83       	st	Y, r17
		configs.pin = ULTRASONIC_Trigger_PIN;
     5ee:	19 82       	std	Y+1, r1	; 0x01
		configs.dir = OUTPUT;
     5f0:	1a 83       	std	Y+2, r17	; 0x02
		DIO_Init(&configs);
     5f2:	ce 01       	movw	r24, r28
     5f4:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
		configs.port = ULTRASONIC_ECHO_PORT;
     5f8:	18 83       	st	Y, r17
		configs.pin = ULTRASONIC_ECHO_PIN;
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	89 83       	std	Y+1, r24	; 0x01
		configs.dir = INPUT;
     5fe:	1a 82       	std	Y+2, r1	; 0x02
		DIO_Init(&configs);
     600:	ce 01       	movw	r24, r28
     602:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
		external_interrupt_init(interrupt2,rising_edge);
     606:	63 e0       	ldi	r22, 0x03	; 3
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <external_interrupt_init>
	}
	else
	{
		return E_NOK;
	}
}
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	08 95       	ret

00000618 <ULTRASONIC_GetDist>:


E_STATUS ULTRASONIC_GetDist(ptr_float32_t distance)
{
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
	
	DIO_WritePIN(ULTRASONIC_Trigger_PORT, ULTRASONIC_Trigger_PIN, LOW);
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));


void _delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     630:	85 e0       	ldi	r24, 0x05	; 5
     632:	8a 95       	dec	r24
     634:	f1 f7       	brne	.-4      	; 0x632 <ULTRASONIC_GetDist+0x1a>
	_delay_us(2);
	DIO_WritePIN(ULTRASONIC_Trigger_PORT, ULTRASONIC_Trigger_PIN, HIGH);
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
     640:	8a e1       	ldi	r24, 0x1A	; 26
     642:	8a 95       	dec	r24
     644:	f1 f7       	brne	.-4      	; 0x642 <ULTRASONIC_GetDist+0x2a>
	_delay_us(10);
	DIO_WritePIN(ULTRASONIC_Trigger_PORT, ULTRASONIC_Trigger_PIN, LOW);
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <DIO_WritePIN>
	/*(registerReading*time of tick*speed of sound)/2*/
	/*time of tick =1024/8000000=128*10^-6 S = 128Ms*/
	/*dist = (Reading * 128 * 0.034)/2*/
	*distance=g_timer1*2.176;
     650:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <g_timer1>
     654:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <g_timer1+0x1>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 bf 0b 	call	0x177e	; 0x177e <__floatunsisf>
     660:	26 e9       	ldi	r18, 0x96	; 150
     662:	33 e4       	ldi	r19, 0x43	; 67
     664:	4b e0       	ldi	r20, 0x0B	; 11
     666:	50 e4       	ldi	r21, 0x40	; 64
     668:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__mulsf3>
     66c:	6b 01       	movw	r12, r22
     66e:	7c 01       	movw	r14, r24
     670:	68 83       	st	Y, r22
     672:	79 83       	std	Y+1, r23	; 0x01
     674:	8a 83       	std	Y+2, r24	; 0x02
     676:	9b 83       	std	Y+3, r25	; 0x03
	if (*distance >= 400)
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	48 ec       	ldi	r20, 0xC8	; 200
     67e:	53 e4       	ldi	r21, 0x43	; 67
     680:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__gesf2>
     684:	88 23       	and	r24, r24
     686:	4c f0       	brlt	.+18     	; 0x69a <ULTRASONIC_GetDist+0x82>
	{
		*distance = 400;
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	a8 ec       	ldi	r26, 0xC8	; 200
     68e:	b3 e4       	ldi	r27, 0x43	; 67
     690:	88 83       	st	Y, r24
     692:	99 83       	std	Y+1, r25	; 0x01
     694:	aa 83       	std	Y+2, r26	; 0x02
     696:	bb 83       	std	Y+3, r27	; 0x03
     698:	12 c0       	rjmp	.+36     	; 0x6be <ULTRASONIC_GetDist+0xa6>
	}
	else if (*distance <= 2)
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	50 e4       	ldi	r21, 0x40	; 64
     6a2:	c7 01       	movw	r24, r14
     6a4:	b6 01       	movw	r22, r12
     6a6:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__cmpsf2>
     6aa:	18 16       	cp	r1, r24
     6ac:	44 f0       	brlt	.+16     	; 0x6be <ULTRASONIC_GetDist+0xa6>
	{
		*distance = ONE;
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	a0 e8       	ldi	r26, 0x80	; 128
     6b4:	bf e3       	ldi	r27, 0x3F	; 63
     6b6:	88 83       	st	Y, r24
     6b8:	99 83       	std	Y+1, r25	; 0x01
     6ba:	aa 83       	std	Y+2, r26	; 0x02
     6bc:	bb 83       	std	Y+3, r27	; 0x03
	}
	return E_OK;
	
}
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	df 90       	pop	r13
     6ca:	cf 90       	pop	r12
     6cc:	08 95       	ret

000006ce <INT2_CallBack>:

void INT2_CallBack()
{
	if(g_tick==1)
     6ce:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_tick>
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	89 f4       	brne	.+34     	; 0x6f8 <INT2_CallBack+0x2a>
	{
		Timer_sint8_tSetTMRValue(TMR1_CHOICE, 0);
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Timer_sint8_tSetTMRValue>
		Timer_sint8_tInit(TMR1_CHOICE, NORMAL, PRS1024);
     6de:	26 e0       	ldi	r18, 0x06	; 6
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	0e 94 2d 04 	call	0x85a	; 0x85a <Timer_sint8_tInit>
		external_interrupt_init(interrupt2,falling_edge);
     6ee:	62 e0       	ldi	r22, 0x02	; 2
     6f0:	82 e0       	ldi	r24, 0x02	; 2
     6f2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <external_interrupt_init>
     6f6:	08 95       	ret
	}
	else if(g_tick==2)
     6f8:	82 30       	cpi	r24, 0x02	; 2
     6fa:	71 f4       	brne	.+28     	; 0x718 <INT2_CallBack+0x4a>
	{
		Timer_sint32_tTMRValue(TMR1_CHOICE, &g_timer1);
     6fc:	67 e7       	ldi	r22, 0x77	; 119
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timer_sint32_tTMRValue>
		external_interrupt_init(interrupt2,rising_edge);
     706:	63 e0       	ldi	r22, 0x03	; 3
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <external_interrupt_init>
		Timer_sint8_tStop(TMR1_CHOICE);
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0e 94 15 07 	call	0xe2a	; 0xe2a <Timer_sint8_tStop>
		g_tick=0;
     714:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <g_tick>
     718:	08 95       	ret

0000071a <__vector_3>:
		
	}
}

ISR(INT2_vect)
{
     71a:	1f 92       	push	r1
     71c:	0f 92       	push	r0
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	0f 92       	push	r0
     722:	11 24       	eor	r1, r1
     724:	2f 93       	push	r18
     726:	3f 93       	push	r19
     728:	4f 93       	push	r20
     72a:	5f 93       	push	r21
     72c:	6f 93       	push	r22
     72e:	7f 93       	push	r23
     730:	8f 93       	push	r24
     732:	9f 93       	push	r25
     734:	af 93       	push	r26
     736:	bf 93       	push	r27
     738:	ef 93       	push	r30
     73a:	ff 93       	push	r31
	g_tick++;
     73c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <g_tick>
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <g_tick>
	INT2_CallBack();
     746:	0e 94 67 03 	call	0x6ce	; 0x6ce <INT2_CallBack>
}
     74a:	ff 91       	pop	r31
     74c:	ef 91       	pop	r30
     74e:	bf 91       	pop	r27
     750:	af 91       	pop	r26
     752:	9f 91       	pop	r25
     754:	8f 91       	pop	r24
     756:	7f 91       	pop	r23
     758:	6f 91       	pop	r22
     75a:	5f 91       	pop	r21
     75c:	4f 91       	pop	r20
     75e:	3f 91       	pop	r19
     760:	2f 91       	pop	r18
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
     766:	0f 90       	pop	r0
     768:	1f 90       	pop	r1
     76a:	18 95       	reti

0000076c <GIE_voidEnable>:
#include "GIE_int.h"

/* Description : Enable global interrupt	*/
void GIE_voidEnable(void)
{
	SET_BIT(SREG,GIE_uint8_t_BIT_INDEX);
     76c:	8f b7       	in	r24, 0x3f	; 63
     76e:	80 68       	ori	r24, 0x80	; 128
     770:	8f bf       	out	0x3f, r24	; 63
     772:	08 95       	ret

00000774 <PM_Enable>:
#include "PM.h"

E_STATUS PM_Enable(EN_PMSLEEP_MODES_t mode)
{
	uint8_t u8_retval = E_NOK;
	switch (mode)
     774:	82 30       	cpi	r24, 0x02	; 2
     776:	49 f1       	breq	.+82     	; 0x7ca <PM_Enable+0x56>
     778:	28 f4       	brcc	.+10     	; 0x784 <PM_Enable+0x10>
     77a:	88 23       	and	r24, r24
     77c:	51 f0       	breq	.+20     	; 0x792 <PM_Enable+0x1e>
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	b1 f0       	breq	.+44     	; 0x7ae <PM_Enable+0x3a>
     782:	5b c0       	rjmp	.+182    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     784:	84 30       	cpi	r24, 0x04	; 4
     786:	e9 f1       	breq	.+122    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     788:	70 f1       	brcs	.+92     	; 0x7e6 <PM_Enable+0x72>
     78a:	85 30       	cpi	r24, 0x05	; 5
     78c:	09 f4       	brne	.+2      	; 0x790 <PM_Enable+0x1c>
     78e:	47 c0       	rjmp	.+142    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     790:	54 c0       	rjmp	.+168    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
	{
		case(PM_SLEEP_MODE_IDLE):
		{
			RESET_BIT(MCUCR, SM0);
     792:	85 b7       	in	r24, 0x35	; 53
     794:	8f 7e       	andi	r24, 0xEF	; 239
     796:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR, SM1);
     798:	85 b7       	in	r24, 0x35	; 53
     79a:	8f 7d       	andi	r24, 0xDF	; 223
     79c:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR, SM2);
     79e:	85 b7       	in	r24, 0x35	; 53
     7a0:	8f 7b       	andi	r24, 0xBF	; 191
     7a2:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SE);
     7a4:	85 b7       	in	r24, 0x35	; 53
     7a6:	80 68       	ori	r24, 0x80	; 128
     7a8:	85 bf       	out	0x35, r24	; 53
			u8_retval = E_OK;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
			break;
     7ac:	08 95       	ret
		}
		case(PM_SLEEP_MODE_ADC):
		{
			SET_BIT(MCUCR, SM0);
     7ae:	85 b7       	in	r24, 0x35	; 53
     7b0:	80 61       	ori	r24, 0x10	; 16
     7b2:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR, SM1);
     7b4:	85 b7       	in	r24, 0x35	; 53
     7b6:	8f 7d       	andi	r24, 0xDF	; 223
     7b8:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR, SM2);
     7ba:	85 b7       	in	r24, 0x35	; 53
     7bc:	8f 7b       	andi	r24, 0xBF	; 191
     7be:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SE);
     7c0:	85 b7       	in	r24, 0x35	; 53
     7c2:	80 68       	ori	r24, 0x80	; 128
     7c4:	85 bf       	out	0x35, r24	; 53
			u8_retval = E_OK;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
			break;
     7c8:	08 95       	ret
		}
		case(PM_SLEEP_MODE_PWR_DOWN):
		{
			RESET_BIT(MCUCR, SM0);
     7ca:	85 b7       	in	r24, 0x35	; 53
     7cc:	8f 7e       	andi	r24, 0xEF	; 239
     7ce:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SM1);
     7d0:	85 b7       	in	r24, 0x35	; 53
     7d2:	80 62       	ori	r24, 0x20	; 32
     7d4:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR, SM2);
     7d6:	85 b7       	in	r24, 0x35	; 53
     7d8:	8f 7b       	andi	r24, 0xBF	; 191
     7da:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SE);
     7dc:	85 b7       	in	r24, 0x35	; 53
     7de:	80 68       	ori	r24, 0x80	; 128
     7e0:	85 bf       	out	0x35, r24	; 53
			u8_retval = E_OK;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
			break;
     7e4:	08 95       	ret
		}
		case(PM_SLEEP_MODE_PWR_SAVE):
		{
			SET_BIT(MCUCR, SM0);
     7e6:	85 b7       	in	r24, 0x35	; 53
     7e8:	80 61       	ori	r24, 0x10	; 16
     7ea:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SM1);
     7ec:	85 b7       	in	r24, 0x35	; 53
     7ee:	80 62       	ori	r24, 0x20	; 32
     7f0:	85 bf       	out	0x35, r24	; 53
			RESET_BIT(MCUCR, SM2);
     7f2:	85 b7       	in	r24, 0x35	; 53
     7f4:	8f 7b       	andi	r24, 0xBF	; 191
     7f6:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SE);
     7f8:	85 b7       	in	r24, 0x35	; 53
     7fa:	80 68       	ori	r24, 0x80	; 128
     7fc:	85 bf       	out	0x35, r24	; 53
			u8_retval = E_OK;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
			break;
     800:	08 95       	ret
		}
		case(PM_SLEEP_MODE_STANDBY):
		{
			RESET_BIT(MCUCR, SM0);
     802:	85 b7       	in	r24, 0x35	; 53
     804:	8f 7e       	andi	r24, 0xEF	; 239
     806:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SM1);
     808:	85 b7       	in	r24, 0x35	; 53
     80a:	80 62       	ori	r24, 0x20	; 32
     80c:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SM2);
     80e:	85 b7       	in	r24, 0x35	; 53
     810:	80 64       	ori	r24, 0x40	; 64
     812:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SE);
     814:	85 b7       	in	r24, 0x35	; 53
     816:	80 68       	ori	r24, 0x80	; 128
     818:	85 bf       	out	0x35, r24	; 53
			u8_retval = E_OK;
     81a:	81 e0       	ldi	r24, 0x01	; 1
			break;
     81c:	08 95       	ret
		}
		case(PM_SLEEP_MODE_EXT_STANDBY):
		{
			SET_BIT(MCUCR, SM0);
     81e:	85 b7       	in	r24, 0x35	; 53
     820:	80 61       	ori	r24, 0x10	; 16
     822:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SM1);
     824:	85 b7       	in	r24, 0x35	; 53
     826:	80 62       	ori	r24, 0x20	; 32
     828:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SM2);
     82a:	85 b7       	in	r24, 0x35	; 53
     82c:	80 64       	ori	r24, 0x40	; 64
     82e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, SE);
     830:	85 b7       	in	r24, 0x35	; 53
     832:	80 68       	ori	r24, 0x80	; 128
     834:	85 bf       	out	0x35, r24	; 53
			u8_retval = E_OK;
     836:	81 e0       	ldi	r24, 0x01	; 1
			break;
     838:	08 95       	ret
		}
		default:
		{
			u8_retval = E_NOK;
     83a:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return u8_retval;
}
     83c:	08 95       	ret

0000083e <PM_Disable>:

/* Description : Disable Power Sleep Mode	*/
E_STATUS PM_Disable(void)
{
	uint8_t u8_retval = E_OK;
	RESET_BIT(MCUCR, SM0);
     83e:	85 b7       	in	r24, 0x35	; 53
     840:	8f 7e       	andi	r24, 0xEF	; 239
     842:	85 bf       	out	0x35, r24	; 53
	RESET_BIT(MCUCR, SM1);
     844:	85 b7       	in	r24, 0x35	; 53
     846:	8f 7d       	andi	r24, 0xDF	; 223
     848:	85 bf       	out	0x35, r24	; 53
	RESET_BIT(MCUCR, SM2);
     84a:	85 b7       	in	r24, 0x35	; 53
     84c:	8f 7b       	andi	r24, 0xBF	; 191
     84e:	85 bf       	out	0x35, r24	; 53
	RESET_BIT(MCUCR, SE);
     850:	85 b7       	in	r24, 0x35	; 53
     852:	8f 77       	andi	r24, 0x7F	; 127
     854:	85 bf       	out	0x35, r24	; 53
	return u8_retval;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	08 95       	ret

0000085a <Timer_sint8_tInit>:
			break;
		}
		break;
	}
	return E_NOK;
}
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	08 f0       	brcs	.+2      	; 0x860 <__stack+0x1>
     85e:	30 c2       	rjmp	.+1120   	; 0xcc0 <__stack+0x461>
     860:	62 31       	cpi	r22, 0x12	; 18
     862:	08 f0       	brcs	.+2      	; 0x866 <__stack+0x7>
     864:	2f c2       	rjmp	.+1118   	; 0xcc4 <__stack+0x465>
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	09 f4       	brne	.+2      	; 0x86c <__stack+0xd>
     86a:	8c c0       	rjmp	.+280    	; 0x984 <__stack+0x125>
     86c:	20 f0       	brcs	.+8      	; 0x876 <__stack+0x17>
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	09 f4       	brne	.+2      	; 0x874 <__stack+0x15>
     872:	ac c1       	rjmp	.+856    	; 0xbcc <__stack+0x36d>
     874:	29 c2       	rjmp	.+1106   	; 0xcc8 <__stack+0x469>
     876:	61 30       	cpi	r22, 0x01	; 1
     878:	69 f0       	breq	.+26     	; 0x894 <__stack+0x35>
     87a:	28 f0       	brcs	.+10     	; 0x886 <__stack+0x27>
     87c:	62 30       	cpi	r22, 0x02	; 2
     87e:	89 f0       	breq	.+34     	; 0x8a2 <__stack+0x43>
     880:	63 30       	cpi	r22, 0x03	; 3
     882:	b1 f0       	breq	.+44     	; 0x8b0 <__stack+0x51>
     884:	23 c2       	rjmp	.+1094   	; 0xccc <__stack+0x46d>
     886:	83 b7       	in	r24, 0x33	; 51
     888:	87 7f       	andi	r24, 0xF7	; 247
     88a:	83 bf       	out	0x33, r24	; 51
     88c:	83 b7       	in	r24, 0x33	; 51
     88e:	8f 7b       	andi	r24, 0xBF	; 191
     890:	83 bf       	out	0x33, r24	; 51
     892:	14 c0       	rjmp	.+40     	; 0x8bc <__stack+0x5d>
     894:	83 b7       	in	r24, 0x33	; 51
     896:	87 7f       	andi	r24, 0xF7	; 247
     898:	83 bf       	out	0x33, r24	; 51
     89a:	83 b7       	in	r24, 0x33	; 51
     89c:	80 64       	ori	r24, 0x40	; 64
     89e:	83 bf       	out	0x33, r24	; 51
     8a0:	0d c0       	rjmp	.+26     	; 0x8bc <__stack+0x5d>
     8a2:	83 b7       	in	r24, 0x33	; 51
     8a4:	88 60       	ori	r24, 0x08	; 8
     8a6:	83 bf       	out	0x33, r24	; 51
     8a8:	83 b7       	in	r24, 0x33	; 51
     8aa:	8f 7b       	andi	r24, 0xBF	; 191
     8ac:	83 bf       	out	0x33, r24	; 51
     8ae:	06 c0       	rjmp	.+12     	; 0x8bc <__stack+0x5d>
     8b0:	83 b7       	in	r24, 0x33	; 51
     8b2:	88 60       	ori	r24, 0x08	; 8
     8b4:	83 bf       	out	0x33, r24	; 51
     8b6:	83 b7       	in	r24, 0x33	; 51
     8b8:	80 64       	ori	r24, 0x40	; 64
     8ba:	83 bf       	out	0x33, r24	; 51
     8bc:	23 30       	cpi	r18, 0x03	; 3
     8be:	31 05       	cpc	r19, r1
     8c0:	41 05       	cpc	r20, r1
     8c2:	51 05       	cpc	r21, r1
     8c4:	99 f1       	breq	.+102    	; 0x92c <__stack+0xcd>
     8c6:	58 f4       	brcc	.+22     	; 0x8de <__stack+0x7f>
     8c8:	21 15       	cp	r18, r1
     8ca:	31 05       	cpc	r19, r1
     8cc:	41 05       	cpc	r20, r1
     8ce:	51 05       	cpc	r21, r1
     8d0:	b9 f0       	breq	.+46     	; 0x900 <__stack+0xa1>
     8d2:	21 30       	cpi	r18, 0x01	; 1
     8d4:	31 05       	cpc	r19, r1
     8d6:	41 05       	cpc	r20, r1
     8d8:	51 05       	cpc	r21, r1
     8da:	e9 f0       	breq	.+58     	; 0x916 <__stack+0xb7>
     8dc:	f9 c1       	rjmp	.+1010   	; 0xcd0 <__stack+0x471>
     8de:	26 30       	cpi	r18, 0x06	; 6
     8e0:	31 05       	cpc	r19, r1
     8e2:	41 05       	cpc	r20, r1
     8e4:	51 05       	cpc	r21, r1
     8e6:	c1 f1       	breq	.+112    	; 0x958 <__stack+0xf9>
     8e8:	27 30       	cpi	r18, 0x07	; 7
     8ea:	31 05       	cpc	r19, r1
     8ec:	41 05       	cpc	r20, r1
     8ee:	51 05       	cpc	r21, r1
     8f0:	f1 f1       	breq	.+124    	; 0x96e <__stack+0x10f>
     8f2:	25 30       	cpi	r18, 0x05	; 5
     8f4:	31 05       	cpc	r19, r1
     8f6:	41 05       	cpc	r20, r1
     8f8:	51 05       	cpc	r21, r1
     8fa:	09 f0       	breq	.+2      	; 0x8fe <__stack+0x9f>
     8fc:	e9 c1       	rjmp	.+978    	; 0xcd0 <__stack+0x471>
     8fe:	21 c0       	rjmp	.+66     	; 0x942 <__stack+0xe3>
     900:	83 b7       	in	r24, 0x33	; 51
     902:	81 60       	ori	r24, 0x01	; 1
     904:	83 bf       	out	0x33, r24	; 51
     906:	83 b7       	in	r24, 0x33	; 51
     908:	8d 7f       	andi	r24, 0xFD	; 253
     90a:	83 bf       	out	0x33, r24	; 51
     90c:	83 b7       	in	r24, 0x33	; 51
     90e:	8b 7f       	andi	r24, 0xFB	; 251
     910:	83 bf       	out	0x33, r24	; 51
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	08 95       	ret
     916:	83 b7       	in	r24, 0x33	; 51
     918:	8e 7f       	andi	r24, 0xFE	; 254
     91a:	83 bf       	out	0x33, r24	; 51
     91c:	83 b7       	in	r24, 0x33	; 51
     91e:	82 60       	ori	r24, 0x02	; 2
     920:	83 bf       	out	0x33, r24	; 51
     922:	83 b7       	in	r24, 0x33	; 51
     924:	8b 7f       	andi	r24, 0xFB	; 251
     926:	83 bf       	out	0x33, r24	; 51
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	08 95       	ret
     92c:	83 b7       	in	r24, 0x33	; 51
     92e:	8e 7f       	andi	r24, 0xFE	; 254
     930:	83 bf       	out	0x33, r24	; 51
     932:	83 b7       	in	r24, 0x33	; 51
     934:	82 60       	ori	r24, 0x02	; 2
     936:	83 bf       	out	0x33, r24	; 51
     938:	83 b7       	in	r24, 0x33	; 51
     93a:	84 60       	ori	r24, 0x04	; 4
     93c:	83 bf       	out	0x33, r24	; 51
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	08 95       	ret
     942:	83 b7       	in	r24, 0x33	; 51
     944:	8e 7f       	andi	r24, 0xFE	; 254
     946:	83 bf       	out	0x33, r24	; 51
     948:	83 b7       	in	r24, 0x33	; 51
     94a:	8d 7f       	andi	r24, 0xFD	; 253
     94c:	83 bf       	out	0x33, r24	; 51
     94e:	83 b7       	in	r24, 0x33	; 51
     950:	84 60       	ori	r24, 0x04	; 4
     952:	83 bf       	out	0x33, r24	; 51
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	08 95       	ret
     958:	83 b7       	in	r24, 0x33	; 51
     95a:	81 60       	ori	r24, 0x01	; 1
     95c:	83 bf       	out	0x33, r24	; 51
     95e:	83 b7       	in	r24, 0x33	; 51
     960:	8d 7f       	andi	r24, 0xFD	; 253
     962:	83 bf       	out	0x33, r24	; 51
     964:	83 b7       	in	r24, 0x33	; 51
     966:	84 60       	ori	r24, 0x04	; 4
     968:	83 bf       	out	0x33, r24	; 51
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	08 95       	ret
     96e:	83 b7       	in	r24, 0x33	; 51
     970:	8e 7f       	andi	r24, 0xFE	; 254
     972:	83 bf       	out	0x33, r24	; 51
     974:	83 b7       	in	r24, 0x33	; 51
     976:	8d 7f       	andi	r24, 0xFD	; 253
     978:	83 bf       	out	0x33, r24	; 51
     97a:	83 b7       	in	r24, 0x33	; 51
     97c:	8b 7f       	andi	r24, 0xFB	; 251
     97e:	83 bf       	out	0x33, r24	; 51
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	08 95       	ret
     984:	86 2f       	mov	r24, r22
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	82 31       	cpi	r24, 0x12	; 18
     98a:	91 05       	cpc	r25, r1
     98c:	08 f0       	brcs	.+2      	; 0x990 <__stack+0x131>
     98e:	ba c0       	rjmp	.+372    	; 0xb04 <__stack+0x2a5>
     990:	fc 01       	movw	r30, r24
     992:	e6 5d       	subi	r30, 0xD6	; 214
     994:	ff 4f       	sbci	r31, 0xFF	; 255
     996:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__tablejump2__>
     99a:	8f b5       	in	r24, 0x2f	; 47
     99c:	8e 7f       	andi	r24, 0xFE	; 254
     99e:	8f bd       	out	0x2f, r24	; 47
     9a0:	8f b5       	in	r24, 0x2f	; 47
     9a2:	8d 7f       	andi	r24, 0xFD	; 253
     9a4:	8f bd       	out	0x2f, r24	; 47
     9a6:	8e b5       	in	r24, 0x2e	; 46
     9a8:	87 7f       	andi	r24, 0xF7	; 247
     9aa:	8e bd       	out	0x2e, r24	; 46
     9ac:	8e b5       	in	r24, 0x2e	; 46
     9ae:	8f 7e       	andi	r24, 0xEF	; 239
     9b0:	8e bd       	out	0x2e, r24	; 46
     9b2:	a8 c0       	rjmp	.+336    	; 0xb04 <__stack+0x2a5>
     9b4:	8f b5       	in	r24, 0x2f	; 47
     9b6:	81 60       	ori	r24, 0x01	; 1
     9b8:	8f bd       	out	0x2f, r24	; 47
     9ba:	8f b5       	in	r24, 0x2f	; 47
     9bc:	8d 7f       	andi	r24, 0xFD	; 253
     9be:	8f bd       	out	0x2f, r24	; 47
     9c0:	8e b5       	in	r24, 0x2e	; 46
     9c2:	87 7f       	andi	r24, 0xF7	; 247
     9c4:	8e bd       	out	0x2e, r24	; 46
     9c6:	8e b5       	in	r24, 0x2e	; 46
     9c8:	8f 7e       	andi	r24, 0xEF	; 239
     9ca:	8e bd       	out	0x2e, r24	; 46
     9cc:	9b c0       	rjmp	.+310    	; 0xb04 <__stack+0x2a5>
     9ce:	8f b5       	in	r24, 0x2f	; 47
     9d0:	8e 7f       	andi	r24, 0xFE	; 254
     9d2:	8f bd       	out	0x2f, r24	; 47
     9d4:	8f b5       	in	r24, 0x2f	; 47
     9d6:	82 60       	ori	r24, 0x02	; 2
     9d8:	8f bd       	out	0x2f, r24	; 47
     9da:	8e b5       	in	r24, 0x2e	; 46
     9dc:	87 7f       	andi	r24, 0xF7	; 247
     9de:	8e bd       	out	0x2e, r24	; 46
     9e0:	8e b5       	in	r24, 0x2e	; 46
     9e2:	8f 7e       	andi	r24, 0xEF	; 239
     9e4:	8e bd       	out	0x2e, r24	; 46
     9e6:	8e c0       	rjmp	.+284    	; 0xb04 <__stack+0x2a5>
     9e8:	8f b5       	in	r24, 0x2f	; 47
     9ea:	81 60       	ori	r24, 0x01	; 1
     9ec:	8f bd       	out	0x2f, r24	; 47
     9ee:	8f b5       	in	r24, 0x2f	; 47
     9f0:	82 60       	ori	r24, 0x02	; 2
     9f2:	8f bd       	out	0x2f, r24	; 47
     9f4:	8e b5       	in	r24, 0x2e	; 46
     9f6:	87 7f       	andi	r24, 0xF7	; 247
     9f8:	8e bd       	out	0x2e, r24	; 46
     9fa:	8e b5       	in	r24, 0x2e	; 46
     9fc:	8f 7e       	andi	r24, 0xEF	; 239
     9fe:	8e bd       	out	0x2e, r24	; 46
     a00:	81 c0       	rjmp	.+258    	; 0xb04 <__stack+0x2a5>
     a02:	8f b5       	in	r24, 0x2f	; 47
     a04:	8e 7f       	andi	r24, 0xFE	; 254
     a06:	8f bd       	out	0x2f, r24	; 47
     a08:	8f b5       	in	r24, 0x2f	; 47
     a0a:	8d 7f       	andi	r24, 0xFD	; 253
     a0c:	8f bd       	out	0x2f, r24	; 47
     a0e:	8e b5       	in	r24, 0x2e	; 46
     a10:	88 60       	ori	r24, 0x08	; 8
     a12:	8e bd       	out	0x2e, r24	; 46
     a14:	8e b5       	in	r24, 0x2e	; 46
     a16:	8f 7e       	andi	r24, 0xEF	; 239
     a18:	8e bd       	out	0x2e, r24	; 46
     a1a:	74 c0       	rjmp	.+232    	; 0xb04 <__stack+0x2a5>
     a1c:	8f b5       	in	r24, 0x2f	; 47
     a1e:	81 60       	ori	r24, 0x01	; 1
     a20:	8f bd       	out	0x2f, r24	; 47
     a22:	8f b5       	in	r24, 0x2f	; 47
     a24:	8d 7f       	andi	r24, 0xFD	; 253
     a26:	8f bd       	out	0x2f, r24	; 47
     a28:	8e b5       	in	r24, 0x2e	; 46
     a2a:	88 60       	ori	r24, 0x08	; 8
     a2c:	8e bd       	out	0x2e, r24	; 46
     a2e:	8e b5       	in	r24, 0x2e	; 46
     a30:	8f 7e       	andi	r24, 0xEF	; 239
     a32:	8e bd       	out	0x2e, r24	; 46
     a34:	67 c0       	rjmp	.+206    	; 0xb04 <__stack+0x2a5>
     a36:	8f b5       	in	r24, 0x2f	; 47
     a38:	8e 7f       	andi	r24, 0xFE	; 254
     a3a:	8f bd       	out	0x2f, r24	; 47
     a3c:	8f b5       	in	r24, 0x2f	; 47
     a3e:	82 60       	ori	r24, 0x02	; 2
     a40:	8f bd       	out	0x2f, r24	; 47
     a42:	8e b5       	in	r24, 0x2e	; 46
     a44:	88 60       	ori	r24, 0x08	; 8
     a46:	8e bd       	out	0x2e, r24	; 46
     a48:	8e b5       	in	r24, 0x2e	; 46
     a4a:	8f 7e       	andi	r24, 0xEF	; 239
     a4c:	8e bd       	out	0x2e, r24	; 46
     a4e:	5a c0       	rjmp	.+180    	; 0xb04 <__stack+0x2a5>
     a50:	8f b5       	in	r24, 0x2f	; 47
     a52:	81 60       	ori	r24, 0x01	; 1
     a54:	8f bd       	out	0x2f, r24	; 47
     a56:	8f b5       	in	r24, 0x2f	; 47
     a58:	82 60       	ori	r24, 0x02	; 2
     a5a:	8f bd       	out	0x2f, r24	; 47
     a5c:	8e b5       	in	r24, 0x2e	; 46
     a5e:	88 60       	ori	r24, 0x08	; 8
     a60:	8e bd       	out	0x2e, r24	; 46
     a62:	8e b5       	in	r24, 0x2e	; 46
     a64:	8f 7e       	andi	r24, 0xEF	; 239
     a66:	8e bd       	out	0x2e, r24	; 46
     a68:	4d c0       	rjmp	.+154    	; 0xb04 <__stack+0x2a5>
     a6a:	8f b5       	in	r24, 0x2f	; 47
     a6c:	8e 7f       	andi	r24, 0xFE	; 254
     a6e:	8f bd       	out	0x2f, r24	; 47
     a70:	8f b5       	in	r24, 0x2f	; 47
     a72:	8d 7f       	andi	r24, 0xFD	; 253
     a74:	8f bd       	out	0x2f, r24	; 47
     a76:	8e b5       	in	r24, 0x2e	; 46
     a78:	87 7f       	andi	r24, 0xF7	; 247
     a7a:	8e bd       	out	0x2e, r24	; 46
     a7c:	8e b5       	in	r24, 0x2e	; 46
     a7e:	80 61       	ori	r24, 0x10	; 16
     a80:	8e bd       	out	0x2e, r24	; 46
     a82:	40 c0       	rjmp	.+128    	; 0xb04 <__stack+0x2a5>
     a84:	8f b5       	in	r24, 0x2f	; 47
     a86:	81 60       	ori	r24, 0x01	; 1
     a88:	8f bd       	out	0x2f, r24	; 47
     a8a:	8f b5       	in	r24, 0x2f	; 47
     a8c:	8d 7f       	andi	r24, 0xFD	; 253
     a8e:	8f bd       	out	0x2f, r24	; 47
     a90:	8e b5       	in	r24, 0x2e	; 46
     a92:	87 7f       	andi	r24, 0xF7	; 247
     a94:	8e bd       	out	0x2e, r24	; 46
     a96:	8e b5       	in	r24, 0x2e	; 46
     a98:	80 61       	ori	r24, 0x10	; 16
     a9a:	8e bd       	out	0x2e, r24	; 46
     a9c:	33 c0       	rjmp	.+102    	; 0xb04 <__stack+0x2a5>
     a9e:	8f b5       	in	r24, 0x2f	; 47
     aa0:	81 60       	ori	r24, 0x01	; 1
     aa2:	8f bd       	out	0x2f, r24	; 47
     aa4:	8f b5       	in	r24, 0x2f	; 47
     aa6:	82 60       	ori	r24, 0x02	; 2
     aa8:	8f bd       	out	0x2f, r24	; 47
     aaa:	8e b5       	in	r24, 0x2e	; 46
     aac:	87 7f       	andi	r24, 0xF7	; 247
     aae:	8e bd       	out	0x2e, r24	; 46
     ab0:	8e b5       	in	r24, 0x2e	; 46
     ab2:	80 61       	ori	r24, 0x10	; 16
     ab4:	8e bd       	out	0x2e, r24	; 46
     ab6:	26 c0       	rjmp	.+76     	; 0xb04 <__stack+0x2a5>
     ab8:	8f b5       	in	r24, 0x2f	; 47
     aba:	8e 7f       	andi	r24, 0xFE	; 254
     abc:	8f bd       	out	0x2f, r24	; 47
     abe:	8f b5       	in	r24, 0x2f	; 47
     ac0:	8d 7f       	andi	r24, 0xFD	; 253
     ac2:	8f bd       	out	0x2f, r24	; 47
     ac4:	8e b5       	in	r24, 0x2e	; 46
     ac6:	88 60       	ori	r24, 0x08	; 8
     ac8:	8e bd       	out	0x2e, r24	; 46
     aca:	8e b5       	in	r24, 0x2e	; 46
     acc:	80 61       	ori	r24, 0x10	; 16
     ace:	8e bd       	out	0x2e, r24	; 46
     ad0:	19 c0       	rjmp	.+50     	; 0xb04 <__stack+0x2a5>
     ad2:	8f b5       	in	r24, 0x2f	; 47
     ad4:	8e 7f       	andi	r24, 0xFE	; 254
     ad6:	8f bd       	out	0x2f, r24	; 47
     ad8:	8f b5       	in	r24, 0x2f	; 47
     ada:	82 60       	ori	r24, 0x02	; 2
     adc:	8f bd       	out	0x2f, r24	; 47
     ade:	8e b5       	in	r24, 0x2e	; 46
     ae0:	88 60       	ori	r24, 0x08	; 8
     ae2:	8e bd       	out	0x2e, r24	; 46
     ae4:	8e b5       	in	r24, 0x2e	; 46
     ae6:	80 61       	ori	r24, 0x10	; 16
     ae8:	8e bd       	out	0x2e, r24	; 46
     aea:	0c c0       	rjmp	.+24     	; 0xb04 <__stack+0x2a5>
     aec:	8f b5       	in	r24, 0x2f	; 47
     aee:	81 60       	ori	r24, 0x01	; 1
     af0:	8f bd       	out	0x2f, r24	; 47
     af2:	8f b5       	in	r24, 0x2f	; 47
     af4:	82 60       	ori	r24, 0x02	; 2
     af6:	8f bd       	out	0x2f, r24	; 47
     af8:	8e b5       	in	r24, 0x2e	; 46
     afa:	88 60       	ori	r24, 0x08	; 8
     afc:	8e bd       	out	0x2e, r24	; 46
     afe:	8e b5       	in	r24, 0x2e	; 46
     b00:	80 61       	ori	r24, 0x10	; 16
     b02:	8e bd       	out	0x2e, r24	; 46
     b04:	23 30       	cpi	r18, 0x03	; 3
     b06:	31 05       	cpc	r19, r1
     b08:	41 05       	cpc	r20, r1
     b0a:	51 05       	cpc	r21, r1
     b0c:	99 f1       	breq	.+102    	; 0xb74 <__stack+0x315>
     b0e:	58 f4       	brcc	.+22     	; 0xb26 <__stack+0x2c7>
     b10:	21 15       	cp	r18, r1
     b12:	31 05       	cpc	r19, r1
     b14:	41 05       	cpc	r20, r1
     b16:	51 05       	cpc	r21, r1
     b18:	b9 f0       	breq	.+46     	; 0xb48 <__stack+0x2e9>
     b1a:	21 30       	cpi	r18, 0x01	; 1
     b1c:	31 05       	cpc	r19, r1
     b1e:	41 05       	cpc	r20, r1
     b20:	51 05       	cpc	r21, r1
     b22:	e9 f0       	breq	.+58     	; 0xb5e <__stack+0x2ff>
     b24:	d7 c0       	rjmp	.+430    	; 0xcd4 <__stack+0x475>
     b26:	26 30       	cpi	r18, 0x06	; 6
     b28:	31 05       	cpc	r19, r1
     b2a:	41 05       	cpc	r20, r1
     b2c:	51 05       	cpc	r21, r1
     b2e:	c1 f1       	breq	.+112    	; 0xba0 <__stack+0x341>
     b30:	27 30       	cpi	r18, 0x07	; 7
     b32:	31 05       	cpc	r19, r1
     b34:	41 05       	cpc	r20, r1
     b36:	51 05       	cpc	r21, r1
     b38:	f1 f1       	breq	.+124    	; 0xbb6 <__stack+0x357>
     b3a:	25 30       	cpi	r18, 0x05	; 5
     b3c:	31 05       	cpc	r19, r1
     b3e:	41 05       	cpc	r20, r1
     b40:	51 05       	cpc	r21, r1
     b42:	09 f0       	breq	.+2      	; 0xb46 <__stack+0x2e7>
     b44:	c7 c0       	rjmp	.+398    	; 0xcd4 <__stack+0x475>
     b46:	21 c0       	rjmp	.+66     	; 0xb8a <__stack+0x32b>
     b48:	8e b5       	in	r24, 0x2e	; 46
     b4a:	81 60       	ori	r24, 0x01	; 1
     b4c:	8e bd       	out	0x2e, r24	; 46
     b4e:	8e b5       	in	r24, 0x2e	; 46
     b50:	8d 7f       	andi	r24, 0xFD	; 253
     b52:	8e bd       	out	0x2e, r24	; 46
     b54:	8e b5       	in	r24, 0x2e	; 46
     b56:	8b 7f       	andi	r24, 0xFB	; 251
     b58:	8e bd       	out	0x2e, r24	; 46
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	08 95       	ret
     b5e:	8e b5       	in	r24, 0x2e	; 46
     b60:	8e 7f       	andi	r24, 0xFE	; 254
     b62:	8e bd       	out	0x2e, r24	; 46
     b64:	8e b5       	in	r24, 0x2e	; 46
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	8e bd       	out	0x2e, r24	; 46
     b6a:	8e b5       	in	r24, 0x2e	; 46
     b6c:	8b 7f       	andi	r24, 0xFB	; 251
     b6e:	8e bd       	out	0x2e, r24	; 46
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	08 95       	ret
     b74:	8e b5       	in	r24, 0x2e	; 46
     b76:	81 60       	ori	r24, 0x01	; 1
     b78:	8e bd       	out	0x2e, r24	; 46
     b7a:	8e b5       	in	r24, 0x2e	; 46
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	8e bd       	out	0x2e, r24	; 46
     b80:	8e b5       	in	r24, 0x2e	; 46
     b82:	8b 7f       	andi	r24, 0xFB	; 251
     b84:	8e bd       	out	0x2e, r24	; 46
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	08 95       	ret
     b8a:	8e b5       	in	r24, 0x2e	; 46
     b8c:	8e 7f       	andi	r24, 0xFE	; 254
     b8e:	8e bd       	out	0x2e, r24	; 46
     b90:	8e b5       	in	r24, 0x2e	; 46
     b92:	8d 7f       	andi	r24, 0xFD	; 253
     b94:	8e bd       	out	0x2e, r24	; 46
     b96:	8e b5       	in	r24, 0x2e	; 46
     b98:	84 60       	ori	r24, 0x04	; 4
     b9a:	8e bd       	out	0x2e, r24	; 46
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	08 95       	ret
     ba0:	8e b5       	in	r24, 0x2e	; 46
     ba2:	81 60       	ori	r24, 0x01	; 1
     ba4:	8e bd       	out	0x2e, r24	; 46
     ba6:	8e b5       	in	r24, 0x2e	; 46
     ba8:	8d 7f       	andi	r24, 0xFD	; 253
     baa:	8e bd       	out	0x2e, r24	; 46
     bac:	8e b5       	in	r24, 0x2e	; 46
     bae:	84 60       	ori	r24, 0x04	; 4
     bb0:	8e bd       	out	0x2e, r24	; 46
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	08 95       	ret
     bb6:	8e b5       	in	r24, 0x2e	; 46
     bb8:	8e 7f       	andi	r24, 0xFE	; 254
     bba:	8e bd       	out	0x2e, r24	; 46
     bbc:	8e b5       	in	r24, 0x2e	; 46
     bbe:	8d 7f       	andi	r24, 0xFD	; 253
     bc0:	8e bd       	out	0x2e, r24	; 46
     bc2:	8e b5       	in	r24, 0x2e	; 46
     bc4:	8b 7f       	andi	r24, 0xFB	; 251
     bc6:	8e bd       	out	0x2e, r24	; 46
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	08 95       	ret
     bcc:	61 30       	cpi	r22, 0x01	; 1
     bce:	69 f0       	breq	.+26     	; 0xbea <__stack+0x38b>
     bd0:	28 f0       	brcs	.+10     	; 0xbdc <__stack+0x37d>
     bd2:	62 30       	cpi	r22, 0x02	; 2
     bd4:	89 f0       	breq	.+34     	; 0xbf8 <__stack+0x399>
     bd6:	63 30       	cpi	r22, 0x03	; 3
     bd8:	b1 f0       	breq	.+44     	; 0xc06 <__stack+0x3a7>
     bda:	1b c0       	rjmp	.+54     	; 0xc12 <__stack+0x3b3>
     bdc:	85 b5       	in	r24, 0x25	; 37
     bde:	87 7f       	andi	r24, 0xF7	; 247
     be0:	85 bd       	out	0x25, r24	; 37
     be2:	85 b5       	in	r24, 0x25	; 37
     be4:	8f 7b       	andi	r24, 0xBF	; 191
     be6:	85 bd       	out	0x25, r24	; 37
     be8:	14 c0       	rjmp	.+40     	; 0xc12 <__stack+0x3b3>
     bea:	85 b5       	in	r24, 0x25	; 37
     bec:	87 7f       	andi	r24, 0xF7	; 247
     bee:	85 bd       	out	0x25, r24	; 37
     bf0:	85 b5       	in	r24, 0x25	; 37
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	85 bd       	out	0x25, r24	; 37
     bf6:	0d c0       	rjmp	.+26     	; 0xc12 <__stack+0x3b3>
     bf8:	85 b5       	in	r24, 0x25	; 37
     bfa:	88 60       	ori	r24, 0x08	; 8
     bfc:	85 bd       	out	0x25, r24	; 37
     bfe:	85 b5       	in	r24, 0x25	; 37
     c00:	8f 7b       	andi	r24, 0xBF	; 191
     c02:	85 bd       	out	0x25, r24	; 37
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <__stack+0x3b3>
     c06:	85 b5       	in	r24, 0x25	; 37
     c08:	88 60       	ori	r24, 0x08	; 8
     c0a:	85 bd       	out	0x25, r24	; 37
     c0c:	85 b5       	in	r24, 0x25	; 37
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	85 bd       	out	0x25, r24	; 37
     c12:	f9 01       	movw	r30, r18
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	e7 30       	cpi	r30, 0x07	; 7
     c18:	f1 05       	cpc	r31, r1
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <__stack+0x3bf>
     c1c:	5d c0       	rjmp	.+186    	; 0xcd8 <__stack+0x479>
     c1e:	e4 5c       	subi	r30, 0xC4	; 196
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__tablejump2__>
     c26:	85 b5       	in	r24, 0x25	; 37
     c28:	8e 7f       	andi	r24, 0xFE	; 254
     c2a:	85 bd       	out	0x25, r24	; 37
     c2c:	85 b5       	in	r24, 0x25	; 37
     c2e:	82 60       	ori	r24, 0x02	; 2
     c30:	85 bd       	out	0x25, r24	; 37
     c32:	85 b5       	in	r24, 0x25	; 37
     c34:	8b 7f       	andi	r24, 0xFB	; 251
     c36:	85 bd       	out	0x25, r24	; 37
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	08 95       	ret
     c3c:	85 b5       	in	r24, 0x25	; 37
     c3e:	81 60       	ori	r24, 0x01	; 1
     c40:	85 bd       	out	0x25, r24	; 37
     c42:	85 b5       	in	r24, 0x25	; 37
     c44:	82 60       	ori	r24, 0x02	; 2
     c46:	85 bd       	out	0x25, r24	; 37
     c48:	85 b5       	in	r24, 0x25	; 37
     c4a:	8b 7f       	andi	r24, 0xFB	; 251
     c4c:	85 bd       	out	0x25, r24	; 37
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	08 95       	ret
     c52:	85 b5       	in	r24, 0x25	; 37
     c54:	8e 7f       	andi	r24, 0xFE	; 254
     c56:	85 bd       	out	0x25, r24	; 37
     c58:	85 b5       	in	r24, 0x25	; 37
     c5a:	8d 7f       	andi	r24, 0xFD	; 253
     c5c:	85 bd       	out	0x25, r24	; 37
     c5e:	85 b5       	in	r24, 0x25	; 37
     c60:	84 60       	ori	r24, 0x04	; 4
     c62:	85 bd       	out	0x25, r24	; 37
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	08 95       	ret
     c68:	85 b5       	in	r24, 0x25	; 37
     c6a:	81 60       	ori	r24, 0x01	; 1
     c6c:	85 bd       	out	0x25, r24	; 37
     c6e:	85 b5       	in	r24, 0x25	; 37
     c70:	8d 7f       	andi	r24, 0xFD	; 253
     c72:	85 bd       	out	0x25, r24	; 37
     c74:	85 b5       	in	r24, 0x25	; 37
     c76:	84 60       	ori	r24, 0x04	; 4
     c78:	85 bd       	out	0x25, r24	; 37
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	08 95       	ret
     c7e:	85 b5       	in	r24, 0x25	; 37
     c80:	8e 7f       	andi	r24, 0xFE	; 254
     c82:	85 bd       	out	0x25, r24	; 37
     c84:	85 b5       	in	r24, 0x25	; 37
     c86:	82 60       	ori	r24, 0x02	; 2
     c88:	85 bd       	out	0x25, r24	; 37
     c8a:	85 b5       	in	r24, 0x25	; 37
     c8c:	84 60       	ori	r24, 0x04	; 4
     c8e:	85 bd       	out	0x25, r24	; 37
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	08 95       	ret
     c94:	85 b5       	in	r24, 0x25	; 37
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	85 bd       	out	0x25, r24	; 37
     c9a:	85 b5       	in	r24, 0x25	; 37
     c9c:	82 60       	ori	r24, 0x02	; 2
     c9e:	85 bd       	out	0x25, r24	; 37
     ca0:	85 b5       	in	r24, 0x25	; 37
     ca2:	84 60       	ori	r24, 0x04	; 4
     ca4:	85 bd       	out	0x25, r24	; 37
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	08 95       	ret
     caa:	85 b5       	in	r24, 0x25	; 37
     cac:	8e 7f       	andi	r24, 0xFE	; 254
     cae:	85 bd       	out	0x25, r24	; 37
     cb0:	85 b5       	in	r24, 0x25	; 37
     cb2:	8d 7f       	andi	r24, 0xFD	; 253
     cb4:	85 bd       	out	0x25, r24	; 37
     cb6:	85 b5       	in	r24, 0x25	; 37
     cb8:	8b 7f       	andi	r24, 0xFB	; 251
     cba:	85 bd       	out	0x25, r24	; 37
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	08 95       	ret
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	08 95       	ret
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	08 95       	ret
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	08 95       	ret
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 95       	ret
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	08 95       	ret
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	08 95       	ret
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	08 95       	ret

00000cdc <Timer_sint8_tSetTMRValue>:
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	82 31       	cpi	r24, 0x12	; 18
     ce0:	91 05       	cpc	r25, r1
     ce2:	c8 f5       	brcc	.+114    	; 0xd56 <Timer_sint8_tSetTMRValue+0x7a>
     ce4:	fc 01       	movw	r30, r24
     ce6:	ed 5b       	subi	r30, 0xBD	; 189
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__tablejump2__>
     cee:	62 bf       	out	0x32, r22	; 50
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	08 95       	ret
     cf4:	7d bd       	out	0x2d, r23	; 45
     cf6:	6c bd       	out	0x2c, r22	; 44
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	08 95       	ret
     cfc:	64 bd       	out	0x24, r22	; 36
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	08 95       	ret
     d02:	6d bd       	out	0x2d, r22	; 45
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	08 95       	ret
     d08:	6c bd       	out	0x2c, r22	; 44
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	08 95       	ret
     d0e:	7b bd       	out	0x2b, r23	; 43
     d10:	6a bd       	out	0x2a, r22	; 42
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	08 95       	ret
     d16:	6b bd       	out	0x2b, r22	; 43
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	08 95       	ret
     d1c:	6a bd       	out	0x2a, r22	; 42
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	08 95       	ret
     d22:	79 bd       	out	0x29, r23	; 41
     d24:	68 bd       	out	0x28, r22	; 40
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	08 95       	ret
     d2a:	69 bd       	out	0x29, r22	; 41
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	08 95       	ret
     d30:	68 bd       	out	0x28, r22	; 40
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	08 95       	ret
     d36:	77 bd       	out	0x27, r23	; 39
     d38:	66 bd       	out	0x26, r22	; 38
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	08 95       	ret
     d3e:	67 bd       	out	0x27, r22	; 39
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	08 95       	ret
     d44:	66 bd       	out	0x26, r22	; 38
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	08 95       	ret
     d4a:	63 bd       	out	0x23, r22	; 35
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret
     d50:	6c bf       	out	0x3c, r22	; 60
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	08 95       	ret
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	08 95       	ret

00000d5a <Timer_sint8_tInterruptEnable>:
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	99 f0       	breq	.+38     	; 0xd84 <Timer_sint8_tInterruptEnable+0x2a>
     d5e:	18 f0       	brcs	.+6      	; 0xd66 <Timer_sint8_tInterruptEnable+0xc>
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	79 f1       	breq	.+94     	; 0xdc2 <Timer_sint8_tInterruptEnable+0x68>
     d64:	3d c0       	rjmp	.+122    	; 0xde0 <Timer_sint8_tInterruptEnable+0x86>
     d66:	66 23       	and	r22, r22
     d68:	19 f0       	breq	.+6      	; 0xd70 <Timer_sint8_tInterruptEnable+0x16>
     d6a:	61 30       	cpi	r22, 0x01	; 1
     d6c:	31 f0       	breq	.+12     	; 0xd7a <Timer_sint8_tInterruptEnable+0x20>
     d6e:	3a c0       	rjmp	.+116    	; 0xde4 <Timer_sint8_tInterruptEnable+0x8a>
     d70:	89 b7       	in	r24, 0x39	; 57
     d72:	81 60       	ori	r24, 0x01	; 1
     d74:	89 bf       	out	0x39, r24	; 57
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	08 95       	ret
     d7a:	89 b7       	in	r24, 0x39	; 57
     d7c:	82 60       	ori	r24, 0x02	; 2
     d7e:	89 bf       	out	0x39, r24	; 57
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	08 95       	ret
     d84:	62 30       	cpi	r22, 0x02	; 2
     d86:	99 f0       	breq	.+38     	; 0xdae <Timer_sint8_tInterruptEnable+0x54>
     d88:	18 f4       	brcc	.+6      	; 0xd90 <Timer_sint8_tInterruptEnable+0x36>
     d8a:	66 23       	and	r22, r22
     d8c:	31 f0       	breq	.+12     	; 0xd9a <Timer_sint8_tInterruptEnable+0x40>
     d8e:	2c c0       	rjmp	.+88     	; 0xde8 <Timer_sint8_tInterruptEnable+0x8e>
     d90:	63 30       	cpi	r22, 0x03	; 3
     d92:	41 f0       	breq	.+16     	; 0xda4 <Timer_sint8_tInterruptEnable+0x4a>
     d94:	64 30       	cpi	r22, 0x04	; 4
     d96:	81 f0       	breq	.+32     	; 0xdb8 <Timer_sint8_tInterruptEnable+0x5e>
     d98:	27 c0       	rjmp	.+78     	; 0xde8 <Timer_sint8_tInterruptEnable+0x8e>
     d9a:	89 b7       	in	r24, 0x39	; 57
     d9c:	84 60       	ori	r24, 0x04	; 4
     d9e:	89 bf       	out	0x39, r24	; 57
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	08 95       	ret
     da4:	89 b7       	in	r24, 0x39	; 57
     da6:	88 60       	ori	r24, 0x08	; 8
     da8:	89 bf       	out	0x39, r24	; 57
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	08 95       	ret
     dae:	89 b7       	in	r24, 0x39	; 57
     db0:	80 61       	ori	r24, 0x10	; 16
     db2:	89 bf       	out	0x39, r24	; 57
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	08 95       	ret
     db8:	89 b7       	in	r24, 0x39	; 57
     dba:	80 62       	ori	r24, 0x20	; 32
     dbc:	89 bf       	out	0x39, r24	; 57
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	08 95       	ret
     dc2:	66 23       	and	r22, r22
     dc4:	19 f0       	breq	.+6      	; 0xdcc <Timer_sint8_tInterruptEnable+0x72>
     dc6:	61 30       	cpi	r22, 0x01	; 1
     dc8:	31 f0       	breq	.+12     	; 0xdd6 <Timer_sint8_tInterruptEnable+0x7c>
     dca:	10 c0       	rjmp	.+32     	; 0xdec <Timer_sint8_tInterruptEnable+0x92>
     dcc:	89 b7       	in	r24, 0x39	; 57
     dce:	80 64       	ori	r24, 0x40	; 64
     dd0:	89 bf       	out	0x39, r24	; 57
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	08 95       	ret
     dd6:	89 b7       	in	r24, 0x39	; 57
     dd8:	80 68       	ori	r24, 0x80	; 128
     dda:	89 bf       	out	0x39, r24	; 57
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	08 95       	ret
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	08 95       	ret
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	08 95       	ret
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	08 95       	ret
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	08 95       	ret

00000df0 <Timer_sint32_tTMRValue>:
uint8_t Timer_sint32_tTMRValue(uint8_t timer,uint16_t*TimerCountsValue)
{
	switch(timer)
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	59 f0       	breq	.+22     	; 0xe0a <Timer_sint32_tTMRValue+0x1a>
     df4:	18 f0       	brcs	.+6      	; 0xdfc <Timer_sint32_tTMRValue+0xc>
     df6:	82 30       	cpi	r24, 0x02	; 2
     df8:	79 f0       	breq	.+30     	; 0xe18 <Timer_sint32_tTMRValue+0x28>
     dfa:	15 c0       	rjmp	.+42     	; 0xe26 <Timer_sint32_tTMRValue+0x36>
	{
		case TMR0_CHOICE:
		(*TimerCountsValue)=TCNT0;
     dfc:	82 b7       	in	r24, 0x32	; 50
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	fb 01       	movw	r30, r22
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24
		return E_OK;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	08 95       	ret
		break;
		case TMR1_CHOICE:
		(*TimerCountsValue)=TCNT1;
     e0a:	8c b5       	in	r24, 0x2c	; 44
     e0c:	9d b5       	in	r25, 0x2d	; 45
     e0e:	fb 01       	movw	r30, r22
     e10:	91 83       	std	Z+1, r25	; 0x01
     e12:	80 83       	st	Z, r24
		return E_OK;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	08 95       	ret
		break;
		case TMR2_CHOICE:
		(*TimerCountsValue)=TCNT2;
     e18:	84 b5       	in	r24, 0x24	; 36
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	fb 01       	movw	r30, r22
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
		return E_OK;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	08 95       	ret
		break;

	}
	return E_NOK;
     e26:	80 e0       	ldi	r24, 0x00	; 0
}
     e28:	08 95       	ret

00000e2a <Timer_sint8_tStop>:

uint8_t Timer_sint8_tStop(uint8_t timer)
{
	if(timer <= TMR2_CHOICE)
     e2a:	83 30       	cpi	r24, 0x03	; 3
     e2c:	38 f5       	brcc	.+78     	; 0xe7c <Timer_sint8_tStop+0x52>
	{
		switch (timer)
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	79 f0       	breq	.+30     	; 0xe50 <Timer_sint8_tStop+0x26>
     e32:	18 f0       	brcs	.+6      	; 0xe3a <Timer_sint8_tStop+0x10>
     e34:	82 30       	cpi	r24, 0x02	; 2
     e36:	b9 f0       	breq	.+46     	; 0xe66 <Timer_sint8_tStop+0x3c>
     e38:	23 c0       	rjmp	.+70     	; 0xe80 <Timer_sint8_tStop+0x56>
		{
			case TMR0_CHOICE:
			CLR_BIT(TCCR0,0);
     e3a:	83 b7       	in	r24, 0x33	; 51
     e3c:	8e 7f       	andi	r24, 0xFE	; 254
     e3e:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0,1);
     e40:	83 b7       	in	r24, 0x33	; 51
     e42:	8d 7f       	andi	r24, 0xFD	; 253
     e44:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0,2);
     e46:	83 b7       	in	r24, 0x33	; 51
     e48:	8b 7f       	andi	r24, 0xFB	; 251
     e4a:	83 bf       	out	0x33, r24	; 51
			return E_OK;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	08 95       	ret
			break;
			case TMR1_CHOICE:
			CLR_BIT(TCCR1B,0);
     e50:	8e b5       	in	r24, 0x2e	; 46
     e52:	8e 7f       	andi	r24, 0xFE	; 254
     e54:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,1);
     e56:	8e b5       	in	r24, 0x2e	; 46
     e58:	8d 7f       	andi	r24, 0xFD	; 253
     e5a:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,2);
     e5c:	8e b5       	in	r24, 0x2e	; 46
     e5e:	8b 7f       	andi	r24, 0xFB	; 251
     e60:	8e bd       	out	0x2e, r24	; 46
			return E_OK;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	08 95       	ret
			break;
			case TMR2_CHOICE:
			CLR_BIT(TCCR2,0);
     e66:	85 b5       	in	r24, 0x25	; 37
     e68:	8e 7f       	andi	r24, 0xFE	; 254
     e6a:	85 bd       	out	0x25, r24	; 37
			CLR_BIT(TCCR2,1);
     e6c:	85 b5       	in	r24, 0x25	; 37
     e6e:	8d 7f       	andi	r24, 0xFD	; 253
     e70:	85 bd       	out	0x25, r24	; 37
			CLR_BIT(TCCR2,2);
     e72:	85 b5       	in	r24, 0x25	; 37
     e74:	8b 7f       	andi	r24, 0xFB	; 251
     e76:	85 bd       	out	0x25, r24	; 37
			return E_OK;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	08 95       	ret
			break;
		}
	}
	return E_NOK;
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	08 95       	ret
     e80:	80 e0       	ldi	r24, 0x00	; 0
	
}
     e82:	08 95       	ret

00000e84 <__vector_5>:


void __vector_5 (void)
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	6f 93       	push	r22
     e98:	7f 93       	push	r23
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	af 93       	push	r26
     ea0:	bf 93       	push	r27
     ea2:	ef 93       	push	r30
     ea4:	ff 93       	push	r31
	Timer_sint8_tSetTMRValue(TMR2_CHOICE,255);
     ea6:	6f ef       	ldi	r22, 0xFF	; 255
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Timer_sint8_tSetTMRValue>
	Timer2_counter++;
     eb0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <Timer2_counter>
     eb4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <Timer2_counter+0x1>
     eb8:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <Timer2_counter+0x2>
     ebc:	b0 91 7c 00 	lds	r27, 0x007C	; 0x80007c <Timer2_counter+0x3>
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	a1 1d       	adc	r26, r1
     ec4:	b1 1d       	adc	r27, r1
     ec6:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <Timer2_counter>
     eca:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <Timer2_counter+0x1>
     ece:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <Timer2_counter+0x2>
     ed2:	b0 93 7c 00 	sts	0x007C, r27	; 0x80007c <Timer2_counter+0x3>
}
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <__vector_9>:

void __vector_9 (void)
{
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	2f 93       	push	r18
     f04:	3f 93       	push	r19
     f06:	4f 93       	push	r20
     f08:	5f 93       	push	r21
     f0a:	6f 93       	push	r22
     f0c:	7f 93       	push	r23
     f0e:	8f 93       	push	r24
     f10:	9f 93       	push	r25
     f12:	af 93       	push	r26
     f14:	bf 93       	push	r27
     f16:	ef 93       	push	r30
     f18:	ff 93       	push	r31
	Timer_sint8_tSetTMRValue(TMR1_CHOICE,255);
     f1a:	6f ef       	ldi	r22, 0xFF	; 255
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Timer_sint8_tSetTMRValue>
	Timer1_counter++;
     f24:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Timer1_counter>
     f28:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <Timer1_counter+0x1>
     f2c:	a0 91 7f 00 	lds	r26, 0x007F	; 0x80007f <Timer1_counter+0x2>
     f30:	b0 91 80 00 	lds	r27, 0x0080	; 0x800080 <Timer1_counter+0x3>
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	a1 1d       	adc	r26, r1
     f38:	b1 1d       	adc	r27, r1
     f3a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <Timer1_counter>
     f3e:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <Timer1_counter+0x1>
     f42:	a0 93 7f 00 	sts	0x007F, r26	; 0x80007f <Timer1_counter+0x2>
     f46:	b0 93 80 00 	sts	0x0080, r27	; 0x800080 <Timer1_counter+0x3>
}
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	bf 91       	pop	r27
     f50:	af 91       	pop	r26
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	7f 91       	pop	r23
     f58:	6f 91       	pop	r22
     f5a:	5f 91       	pop	r21
     f5c:	4f 91       	pop	r20
     f5e:	3f 91       	pop	r19
     f60:	2f 91       	pop	r18
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__vector_11>:

void __vector_11 (void)
{
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	2f 93       	push	r18
     f78:	3f 93       	push	r19
     f7a:	4f 93       	push	r20
     f7c:	5f 93       	push	r21
     f7e:	6f 93       	push	r22
     f80:	7f 93       	push	r23
     f82:	8f 93       	push	r24
     f84:	9f 93       	push	r25
     f86:	af 93       	push	r26
     f88:	bf 93       	push	r27
     f8a:	ef 93       	push	r30
     f8c:	ff 93       	push	r31
	Timer_sint8_tSetTMRValue(TMR0_CHOICE,255);
     f8e:	6f ef       	ldi	r22, 0xFF	; 255
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Timer_sint8_tSetTMRValue>
	Timer0_counter++;
     f98:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <Timer0_counter>
     f9c:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <Timer0_counter+0x1>
     fa0:	a0 91 83 00 	lds	r26, 0x0083	; 0x800083 <Timer0_counter+0x2>
     fa4:	b0 91 84 00 	lds	r27, 0x0084	; 0x800084 <Timer0_counter+0x3>
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	a1 1d       	adc	r26, r1
     fac:	b1 1d       	adc	r27, r1
     fae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <Timer0_counter>
     fb2:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <Timer0_counter+0x1>
     fb6:	a0 93 83 00 	sts	0x0083, r26	; 0x800083 <Timer0_counter+0x2>
     fba:	b0 93 84 00 	sts	0x0084, r27	; 0x800084 <Timer0_counter+0x3>
}
     fbe:	ff 91       	pop	r31
     fc0:	ef 91       	pop	r30
     fc2:	bf 91       	pop	r27
     fc4:	af 91       	pop	r26
     fc6:	9f 91       	pop	r25
     fc8:	8f 91       	pop	r24
     fca:	7f 91       	pop	r23
     fcc:	6f 91       	pop	r22
     fce:	5f 91       	pop	r21
     fd0:	4f 91       	pop	r20
     fd2:	3f 91       	pop	r19
     fd4:	2f 91       	pop	r18
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 90       	pop	r0
     fdc:	1f 90       	pop	r1
     fde:	18 95       	reti

00000fe0 <TMU_GetLCM>:

E_STATUS TMU_DeleteTask(uint8_t u8_TaskID)
{
	gast_Tasks[u8_TaskID].pvf_Task = NULL_PTR;
	return E_OK;
}
     fe0:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     fe4:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <gu8_LCM>
     fe8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <u8_Counter>
     fec:	29 c0       	rjmp	.+82     	; 0x1040 <TMU_GetLCM+0x60>
     fee:	82 2f       	mov	r24, r18
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	fc 01       	movw	r30, r24
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	e8 0f       	add	r30, r24
     ffa:	f9 1f       	adc	r31, r25
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	e6 56       	subi	r30, 0x66	; 102
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	33 81       	ldd	r19, Z+3	; 0x03
    1006:	33 23       	and	r19, r19
    1008:	c1 f0       	breq	.+48     	; 0x103a <TMU_GetLCM+0x5a>
    100a:	83 2f       	mov	r24, r19
    100c:	64 2f       	mov	r22, r20
    100e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__udivmodqi4>
    1012:	91 11       	cpse	r25, r1
    1014:	0b c0       	rjmp	.+22     	; 0x102c <TMU_GetLCM+0x4c>
    1016:	83 2f       	mov	r24, r19
    1018:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <__udivmodqi4>
    101c:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <gu8_LCM>
    1020:	98 9f       	mul	r25, r24
    1022:	80 2d       	mov	r24, r0
    1024:	11 24       	eor	r1, r1
    1026:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <gu8_LCM>
    102a:	07 c0       	rjmp	.+14     	; 0x103a <TMU_GetLCM+0x5a>
    102c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <gu8_LCM>
    1030:	83 9f       	mul	r24, r19
    1032:	30 2d       	mov	r19, r0
    1034:	11 24       	eor	r1, r1
    1036:	30 93 86 00 	sts	0x0086, r19	; 0x800086 <gu8_LCM>
    103a:	2f 5f       	subi	r18, 0xFF	; 255
    103c:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <u8_Counter>
    1040:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <u8_Counter>
    1044:	23 30       	cpi	r18, 0x03	; 3
    1046:	98 f2       	brcs	.-90     	; 0xfee <TMU_GetLCM+0xe>
    1048:	08 95       	ret

0000104a <TMU_TasksSchedular>:
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <u8_MaxPriority>
    1050:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <u8_Counter>
    1054:	3e c0       	rjmp	.+124    	; 0x10d2 <TMU_TasksSchedular+0x88>
    1056:	82 2f       	mov	r24, r18
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	fc 01       	movw	r30, r24
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	e8 0f       	add	r30, r24
    1062:	f9 1f       	adc	r31, r25
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	e6 56       	subi	r30, 0x66	; 102
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	44 81       	ldd	r20, Z+4	; 0x04
    106e:	55 81       	ldd	r21, Z+5	; 0x05
    1070:	45 2b       	or	r20, r21
    1072:	61 f1       	breq	.+88     	; 0x10cc <TMU_TasksSchedular+0x82>
    1074:	fc 01       	movw	r30, r24
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	e8 0f       	add	r30, r24
    107c:	f9 1f       	adc	r31, r25
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	e6 56       	subi	r30, 0x66	; 102
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	31 81       	ldd	r19, Z+1	; 0x01
    1088:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <u8_MaxPriority>
    108c:	34 17       	cp	r19, r20
    108e:	70 f4       	brcc	.+28     	; 0x10ac <TMU_TasksSchedular+0x62>
    1090:	fc 01       	movw	r30, r24
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	e8 0f       	add	r30, r24
    1098:	f9 1f       	adc	r31, r25
    109a:	ee 0f       	add	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	e6 56       	subi	r30, 0x66	; 102
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	42 81       	ldd	r20, Z+2	; 0x02
    10a4:	41 11       	cpse	r20, r1
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <TMU_TasksSchedular+0x62>
    10a8:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <u8_MaxPriority>
    10ac:	fc 01       	movw	r30, r24
    10ae:	ee 0f       	add	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	e8 0f       	add	r30, r24
    10b4:	f9 1f       	adc	r31, r25
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	e6 56       	subi	r30, 0x66	; 102
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	83 81       	ldd	r24, Z+3	; 0x03
    10c0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    10c4:	89 17       	cp	r24, r25
    10c6:	10 f4       	brcc	.+4      	; 0x10cc <TMU_TasksSchedular+0x82>
    10c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    10cc:	2f 5f       	subi	r18, 0xFF	; 255
    10ce:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <u8_Counter>
    10d2:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <u8_Counter>
    10d6:	23 30       	cpi	r18, 0x03	; 3
    10d8:	08 f4       	brcc	.+2      	; 0x10dc <TMU_TasksSchedular+0x92>
    10da:	bd cf       	rjmp	.-134    	; 0x1056 <TMU_TasksSchedular+0xc>
    10dc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <u8_Counter>
    10e0:	51 c0       	rjmp	.+162    	; 0x1184 <TMU_TasksSchedular+0x13a>
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	fc 01       	movw	r30, r24
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	e8 0f       	add	r30, r24
    10ec:	f9 1f       	adc	r31, r25
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	e6 56       	subi	r30, 0x66	; 102
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	22 81       	ldd	r18, Z+2	; 0x02
    10f8:	21 11       	cpse	r18, r1
    10fa:	32 c0       	rjmp	.+100    	; 0x1160 <TMU_TasksSchedular+0x116>
    10fc:	fc 01       	movw	r30, r24
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	e8 0f       	add	r30, r24
    1104:	f9 1f       	adc	r31, r25
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	e6 56       	subi	r30, 0x66	; 102
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	41 81       	ldd	r20, Z+1	; 0x01
    1110:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <u8_MaxPriority>
    1114:	43 13       	cpse	r20, r19
    1116:	24 c0       	rjmp	.+72     	; 0x1160 <TMU_TasksSchedular+0x116>
    1118:	fc 01       	movw	r30, r24
    111a:	ee 0f       	add	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	e8 0f       	add	r30, r24
    1120:	f9 1f       	adc	r31, r25
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	e6 56       	subi	r30, 0x66	; 102
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	04 80       	ldd	r0, Z+4	; 0x04
    112c:	f5 81       	ldd	r31, Z+5	; 0x05
    112e:	e0 2d       	mov	r30, r0
    1130:	30 97       	sbiw	r30, 0x00	; 0
    1132:	19 f1       	breq	.+70     	; 0x117a <TMU_TasksSchedular+0x130>
    1134:	09 95       	icall
    1136:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <u8_Counter>
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	fc 01       	movw	r30, r24
    113e:	ee 0f       	add	r30, r30
    1140:	ff 1f       	adc	r31, r31
    1142:	df 01       	movw	r26, r30
    1144:	a8 0f       	add	r26, r24
    1146:	b9 1f       	adc	r27, r25
    1148:	aa 0f       	add	r26, r26
    114a:	bb 1f       	adc	r27, r27
    114c:	a6 56       	subi	r26, 0x66	; 102
    114e:	bf 4f       	sbci	r27, 0xFF	; 255
    1150:	13 96       	adiw	r26, 0x03	; 3
    1152:	2c 91       	ld	r18, X
    1154:	13 97       	sbiw	r26, 0x03	; 3
    1156:	fd 01       	movw	r30, r26
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	82 0f       	add	r24, r18
    115c:	82 83       	std	Z+2, r24	; 0x02
    115e:	0d c0       	rjmp	.+26     	; 0x117a <TMU_TasksSchedular+0x130>
    1160:	22 23       	and	r18, r18
    1162:	59 f0       	breq	.+22     	; 0x117a <TMU_TasksSchedular+0x130>
    1164:	fc 01       	movw	r30, r24
    1166:	ee 0f       	add	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	e8 0f       	add	r30, r24
    116c:	f9 1f       	adc	r31, r25
    116e:	ee 0f       	add	r30, r30
    1170:	ff 1f       	adc	r31, r31
    1172:	e6 56       	subi	r30, 0x66	; 102
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	21 50       	subi	r18, 0x01	; 1
    1178:	22 83       	std	Z+2, r18	; 0x02
    117a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <u8_Counter>
    117e:	8f 5f       	subi	r24, 0xFF	; 255
    1180:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <u8_Counter>
    1184:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <u8_Counter>
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	08 f4       	brcc	.+2      	; 0x118e <TMU_TasksSchedular+0x144>
    118c:	aa cf       	rjmp	.-172    	; 0x10e2 <TMU_TasksSchedular+0x98>
    118e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <gu8_LCM>
    1192:	81 11       	cpse	r24, r1
    1194:	02 c0       	rjmp	.+4      	; 0x119a <TMU_TasksSchedular+0x150>
    1196:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TMU_GetLCM>
    119a:	08 95       	ret

0000119c <TMU_Init>:
    119c:	23 e0       	ldi	r18, 0x03	; 3
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	62 e0       	ldi	r22, 0x02	; 2
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	0e 94 2d 04 	call	0x85a	; 0x85a <Timer_sint8_tInit>
    11ac:	6a ef       	ldi	r22, 0xFA	; 250
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	80 e1       	ldi	r24, 0x10	; 16
    11b2:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Timer_sint8_tSetTMRValue>
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	0e 94 ad 06 	call	0xd5a	; 0xd5a <Timer_sint8_tInterruptEnable>
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	08 95       	ret

000011c2 <TMU_Run>:
    11c2:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <gu8_TMUSchedularState>
    11c6:	88 23       	and	r24, r24
    11c8:	19 f0       	breq	.+6      	; 0x11d0 <TMU_Run+0xe>
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	51 f0       	breq	.+20     	; 0x11e2 <TMU_Run+0x20>
    11ce:	0e c0       	rjmp	.+28     	; 0x11ec <TMU_Run+0x2a>
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	0e 94 ba 03 	call	0x774	; 0x774 <PM_Enable>
    11d6:	0e 94 25 08 	call	0x104a	; 0x104a <TMU_TasksSchedular>
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gu8_TMUSchedularState>
    11e0:	05 c0       	rjmp	.+10     	; 0x11ec <TMU_Run+0x2a>
    11e2:	0e 94 1f 04 	call	0x83e	; 0x83e <PM_Disable>
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <gu8_TMUSchedularState>
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	08 95       	ret

000011f0 <TMU_CreateTask>:
    11f0:	fc 01       	movw	r30, r24
    11f2:	20 81       	ld	r18, Z
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	d9 01       	movw	r26, r18
    11f8:	aa 0f       	add	r26, r26
    11fa:	bb 1f       	adc	r27, r27
    11fc:	a2 0f       	add	r26, r18
    11fe:	b3 1f       	adc	r27, r19
    1200:	aa 0f       	add	r26, r26
    1202:	bb 1f       	adc	r27, r27
    1204:	a6 56       	subi	r26, 0x66	; 102
    1206:	bf 4f       	sbci	r27, 0xFF	; 255
    1208:	96 e0       	ldi	r25, 0x06	; 6
    120a:	01 90       	ld	r0, Z+
    120c:	0d 92       	st	X+, r0
    120e:	9a 95       	dec	r25
    1210:	e1 f7       	brne	.-8      	; 0x120a <TMU_CreateTask+0x1a>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	08 95       	ret

00001216 <Timer2_CompareCallBackFunction>:


void Timer2_CompareCallBackFunction()
{
	gu8_TMULoadCounter++;
    1216:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <gu8_TMULoadCounter>
    121a:	8f 5f       	subi	r24, 0xFF	; 255
    121c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <gu8_TMULoadCounter>
	gu8_TMUSchedularState = STATE_SCHEDULAR_ACTIVE;
    1220:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <gu8_TMUSchedularState>
    1224:	08 95       	ret

00001226 <__vector_4>:
}


ISR(TIMER2_COMP_vect)
{
    1226:	1f 92       	push	r1
    1228:	0f 92       	push	r0
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	0f 92       	push	r0
    122e:	11 24       	eor	r1, r1
    1230:	2f 93       	push	r18
    1232:	3f 93       	push	r19
    1234:	4f 93       	push	r20
    1236:	5f 93       	push	r21
    1238:	6f 93       	push	r22
    123a:	7f 93       	push	r23
    123c:	8f 93       	push	r24
    123e:	9f 93       	push	r25
    1240:	af 93       	push	r26
    1242:	bf 93       	push	r27
    1244:	ef 93       	push	r30
    1246:	ff 93       	push	r31
	Timer2_CompareCallBackFunction();
    1248:	0e 94 0b 09 	call	0x1216	; 0x1216 <Timer2_CompareCallBackFunction>
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	bf 91       	pop	r27
    1252:	af 91       	pop	r26
    1254:	9f 91       	pop	r25
    1256:	8f 91       	pop	r24
    1258:	7f 91       	pop	r23
    125a:	6f 91       	pop	r22
    125c:	5f 91       	pop	r21
    125e:	4f 91       	pop	r20
    1260:	3f 91       	pop	r19
    1262:	2f 91       	pop	r18
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	0f 90       	pop	r0
    126a:	1f 90       	pop	r1
    126c:	18 95       	reti

0000126e <main>:

#include "APP/Car/CarControl.h"

int main(void)
{
	SYS_Init();
    126e:	0e 94 74 00 	call	0xe8	; 0xe8 <SYS_Init>
	
	while (1)
	{
		
		SYS_Update();
    1272:	0e 94 b7 00 	call	0x16e	; 0x16e <SYS_Update>
    1276:	fd cf       	rjmp	.-6      	; 0x1272 <main+0x4>

00001278 <DIO_Init>:
*/

#include "dio.h"

E_STATUS DIO_Init(ST_DIO_config_t *configurations)
{
    1278:	fc 01       	movw	r30, r24
	E_STATUS au8_error = E_NOK;
	if (((configurations->port <= DIO_PORTD) && (configurations->port >= DIO_PORTA)) &&
    127a:	90 81       	ld	r25, Z
    127c:	94 30       	cpi	r25, 0x04	; 4
    127e:	08 f0       	brcs	.+2      	; 0x1282 <DIO_Init+0xa>
    1280:	8e c0       	rjmp	.+284    	; 0x139e <DIO_Init+0x126>
		((configurations->pin <= PIN_7) && (configurations->pin >= PIN_0)))
    1282:	81 81       	ldd	r24, Z+1	; 0x01
#include "dio.h"

E_STATUS DIO_Init(ST_DIO_config_t *configurations)
{
	E_STATUS au8_error = E_NOK;
	if (((configurations->port <= DIO_PORTD) && (configurations->port >= DIO_PORTA)) &&
    1284:	88 30       	cpi	r24, 0x08	; 8
    1286:	08 f0       	brcs	.+2      	; 0x128a <DIO_Init+0x12>
    1288:	8c c0       	rjmp	.+280    	; 0x13a2 <DIO_Init+0x12a>
		((configurations->pin <= PIN_7) && (configurations->pin >= PIN_0)))
	{
		switch (configurations->port)
    128a:	91 30       	cpi	r25, 0x01	; 1
    128c:	41 f1       	breq	.+80     	; 0x12de <DIO_Init+0x66>
    128e:	38 f0       	brcs	.+14     	; 0x129e <DIO_Init+0x26>
    1290:	92 30       	cpi	r25, 0x02	; 2
    1292:	09 f4       	brne	.+2      	; 0x1296 <DIO_Init+0x1e>
    1294:	44 c0       	rjmp	.+136    	; 0x131e <DIO_Init+0xa6>
    1296:	93 30       	cpi	r25, 0x03	; 3
    1298:	09 f4       	brne	.+2      	; 0x129c <DIO_Init+0x24>
    129a:	61 c0       	rjmp	.+194    	; 0x135e <DIO_Init+0xe6>
    129c:	84 c0       	rjmp	.+264    	; 0x13a6 <DIO_Init+0x12e>
		{
		case DIO_PORTA:
		{
			if (configurations->dir == OUTPUT)
    129e:	92 81       	ldd	r25, Z+2	; 0x02
    12a0:	91 30       	cpi	r25, 0x01	; 1
    12a2:	71 f4       	brne	.+28     	; 0x12c0 <DIO_Init+0x48>
			{
				SET_BIT(PORTA_DIR, configurations->pin);
    12a4:	4a b3       	in	r20, 0x1a	; 26
    12a6:	21 e0       	ldi	r18, 0x01	; 1
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	b9 01       	movw	r22, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_Init+0x3a>
    12ae:	66 0f       	add	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	8a 95       	dec	r24
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_Init+0x36>
    12b6:	cb 01       	movw	r24, r22
    12b8:	84 2b       	or	r24, r20
    12ba:	8a bb       	out	0x1a, r24	; 26
				au8_error = E_OK;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	08 95       	ret
			}
			else
			{
				RESET_BIT(PORTA_DIR, configurations->pin);
    12c0:	4a b3       	in	r20, 0x1a	; 26
    12c2:	21 e0       	ldi	r18, 0x01	; 1
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	b9 01       	movw	r22, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_Init+0x56>
    12ca:	66 0f       	add	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	8a 95       	dec	r24
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_Init+0x52>
    12d2:	cb 01       	movw	r24, r22
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8a bb       	out	0x1a, r24	; 26

#include "dio.h"

E_STATUS DIO_Init(ST_DIO_config_t *configurations)
{
	E_STATUS au8_error = E_NOK;
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	08 95       	ret

			break;
		}
		case DIO_PORTB:
		{
			if (configurations->dir == OUTPUT)
    12de:	92 81       	ldd	r25, Z+2	; 0x02
    12e0:	91 30       	cpi	r25, 0x01	; 1
    12e2:	71 f4       	brne	.+28     	; 0x1300 <DIO_Init+0x88>
			{
				SET_BIT(PORTB_DIR, configurations->pin);
    12e4:	47 b3       	in	r20, 0x17	; 23
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	b9 01       	movw	r22, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_Init+0x7a>
    12ee:	66 0f       	add	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_Init+0x76>
    12f6:	cb 01       	movw	r24, r22
    12f8:	84 2b       	or	r24, r20
    12fa:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				RESET_BIT(PORTB_DIR, configurations->pin);
			}
			au8_error = E_OK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	08 95       	ret
			{
				SET_BIT(PORTB_DIR, configurations->pin);
			}
			else
			{
				RESET_BIT(PORTB_DIR, configurations->pin);
    1300:	47 b3       	in	r20, 0x17	; 23
    1302:	21 e0       	ldi	r18, 0x01	; 1
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	b9 01       	movw	r22, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_Init+0x96>
    130a:	66 0f       	add	r22, r22
    130c:	77 1f       	adc	r23, r23
    130e:	8a 95       	dec	r24
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_Init+0x92>
    1312:	cb 01       	movw	r24, r22
    1314:	80 95       	com	r24
    1316:	84 23       	and	r24, r20
    1318:	87 bb       	out	0x17, r24	; 23
			}
			au8_error = E_OK;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	08 95       	ret
			break;
		}
		case DIO_PORTC:
		{
			if (configurations->dir == OUTPUT)
    131e:	92 81       	ldd	r25, Z+2	; 0x02
    1320:	91 30       	cpi	r25, 0x01	; 1
    1322:	71 f4       	brne	.+28     	; 0x1340 <DIO_Init+0xc8>
			{
				SET_BIT(PORTC_DIR, configurations->pin);
    1324:	44 b3       	in	r20, 0x14	; 20
    1326:	21 e0       	ldi	r18, 0x01	; 1
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	b9 01       	movw	r22, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_Init+0xba>
    132e:	66 0f       	add	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	8a 95       	dec	r24
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_Init+0xb6>
    1336:	cb 01       	movw	r24, r22
    1338:	84 2b       	or	r24, r20
    133a:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				RESET_BIT(PORTC_DIR, configurations->pin);
			}
			au8_error = E_OK;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	08 95       	ret
			{
				SET_BIT(PORTC_DIR, configurations->pin);
			}
			else
			{
				RESET_BIT(PORTC_DIR, configurations->pin);
    1340:	44 b3       	in	r20, 0x14	; 20
    1342:	21 e0       	ldi	r18, 0x01	; 1
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	b9 01       	movw	r22, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_Init+0xd6>
    134a:	66 0f       	add	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	8a 95       	dec	r24
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_Init+0xd2>
    1352:	cb 01       	movw	r24, r22
    1354:	80 95       	com	r24
    1356:	84 23       	and	r24, r20
    1358:	84 bb       	out	0x14, r24	; 20
			}
			au8_error = E_OK;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	08 95       	ret
			break;
		}
		case DIO_PORTD:
		{
			if (configurations->dir == OUTPUT)
    135e:	92 81       	ldd	r25, Z+2	; 0x02
    1360:	91 30       	cpi	r25, 0x01	; 1
    1362:	71 f4       	brne	.+28     	; 0x1380 <DIO_Init+0x108>
			{
				SET_BIT(PORTD_DIR, configurations->pin);
    1364:	41 b3       	in	r20, 0x11	; 17
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	b9 01       	movw	r22, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_Init+0xfa>
    136e:	66 0f       	add	r22, r22
    1370:	77 1f       	adc	r23, r23
    1372:	8a 95       	dec	r24
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_Init+0xf6>
    1376:	cb 01       	movw	r24, r22
    1378:	84 2b       	or	r24, r20
    137a:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				RESET_BIT(PORTD_DIR, configurations->pin);
			}
			au8_error = E_OK;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	08 95       	ret
			{
				SET_BIT(PORTD_DIR, configurations->pin);
			}
			else
			{
				RESET_BIT(PORTD_DIR, configurations->pin);
    1380:	41 b3       	in	r20, 0x11	; 17
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	b9 01       	movw	r22, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_Init+0x116>
    138a:	66 0f       	add	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	8a 95       	dec	r24
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_Init+0x112>
    1392:	cb 01       	movw	r24, r22
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	81 bb       	out	0x11, r24	; 17
			}
			au8_error = E_OK;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	08 95       	ret

#include "dio.h"

E_STATUS DIO_Init(ST_DIO_config_t *configurations)
{
	E_STATUS au8_error = E_NOK;
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	08 95       	ret
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	08 95       	ret
    13a6:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		}
	}
	return au8_error;
}
    13a8:	08 95       	ret

000013aa <DIO_WritePIN>:

E_STATUS DIO_WritePIN(uint8_t port, EN_pins pin, uint8_t data)
{
	E_STATUS au8_error = E_NOK;
	if (((port <= DIO_PORTD) && (port >= DIO_PORTA)) &&
    13aa:	84 30       	cpi	r24, 0x04	; 4
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <DIO_WritePIN+0x6>
    13ae:	78 c0       	rjmp	.+240    	; 0x14a0 <DIO_WritePIN+0xf6>
    13b0:	68 30       	cpi	r22, 0x08	; 8
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <DIO_WritePIN+0xc>
    13b4:	77 c0       	rjmp	.+238    	; 0x14a4 <DIO_WritePIN+0xfa>
		((pin <= PIN_7) && (pin >= PIN_0)))
	{
		au8_error = E_OK;
		switch (port)
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	11 f1       	breq	.+68     	; 0x13fe <DIO_WritePIN+0x54>
    13ba:	30 f0       	brcs	.+12     	; 0x13c8 <DIO_WritePIN+0x1e>
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	d1 f1       	breq	.+116    	; 0x1434 <DIO_WritePIN+0x8a>
    13c0:	83 30       	cpi	r24, 0x03	; 3
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <DIO_WritePIN+0x1c>
    13c4:	52 c0       	rjmp	.+164    	; 0x146a <DIO_WritePIN+0xc0>
    13c6:	70 c0       	rjmp	.+224    	; 0x14a8 <DIO_WritePIN+0xfe>
		{
		case DIO_PORTA:
		{
			if (data == HIGH)
    13c8:	41 30       	cpi	r20, 0x01	; 1
    13ca:	61 f4       	brne	.+24     	; 0x13e4 <DIO_WritePIN+0x3a>
			{
				SET_BIT(PORTA_DATA, pin);
    13cc:	2b b3       	in	r18, 0x1b	; 27
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_WritePIN+0x2e>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	6a 95       	dec	r22
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_WritePIN+0x2a>
    13dc:	82 2b       	or	r24, r18
    13de:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error = E_NOK;
	if (((port <= DIO_PORTD) && (port >= DIO_PORTA)) &&
		((pin <= PIN_7) && (pin >= PIN_0)))
	{
		au8_error = E_OK;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	08 95       	ret
			{
				SET_BIT(PORTA_DATA, pin);
			}
			else
			{
				RESET_BIT(PORTA_DATA, pin);
    13e4:	2b b3       	in	r18, 0x1b	; 27
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_WritePIN+0x46>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	6a 95       	dec	r22
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_WritePIN+0x42>
    13f4:	80 95       	com	r24
    13f6:	82 23       	and	r24, r18
    13f8:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error = E_NOK;
	if (((port <= DIO_PORTD) && (port >= DIO_PORTA)) &&
		((pin <= PIN_7) && (pin >= PIN_0)))
	{
		au8_error = E_OK;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	08 95       	ret
			}
			break;
		}
		case DIO_PORTB:
		{
			if (data == HIGH)
    13fe:	41 30       	cpi	r20, 0x01	; 1
    1400:	61 f4       	brne	.+24     	; 0x141a <DIO_WritePIN+0x70>
			{
				SET_BIT(PORTB_DATA, pin);
    1402:	28 b3       	in	r18, 0x18	; 24
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_WritePIN+0x64>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	6a 95       	dec	r22
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_WritePIN+0x60>
    1412:	82 2b       	or	r24, r18
    1414:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error = E_NOK;
	if (((port <= DIO_PORTD) && (port >= DIO_PORTA)) &&
		((pin <= PIN_7) && (pin >= PIN_0)))
	{
		au8_error = E_OK;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	08 95       	ret
			{
				SET_BIT(PORTB_DATA, pin);
			}
			else
			{
				RESET_BIT(PORTB_DATA, pin);
    141a:	28 b3       	in	r18, 0x18	; 24
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_WritePIN+0x7c>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	6a 95       	dec	r22
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_WritePIN+0x78>
    142a:	80 95       	com	r24
    142c:	82 23       	and	r24, r18
    142e:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error = E_NOK;
	if (((port <= DIO_PORTD) && (port >= DIO_PORTA)) &&
		((pin <= PIN_7) && (pin >= PIN_0)))
	{
		au8_error = E_OK;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	08 95       	ret
			}
			break;
		}
		case DIO_PORTC:
		{
			if (data == HIGH)
    1434:	41 30       	cpi	r20, 0x01	; 1
    1436:	61 f4       	brne	.+24     	; 0x1450 <DIO_WritePIN+0xa6>
			{
				SET_BIT(PORTC_DATA, pin);
    1438:	25 b3       	in	r18, 0x15	; 21
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_WritePIN+0x9a>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	6a 95       	dec	r22
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_WritePIN+0x96>
    1448:	82 2b       	or	r24, r18
    144a:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error = E_NOK;
	if (((port <= DIO_PORTD) && (port >= DIO_PORTA)) &&
		((pin <= PIN_7) && (pin >= PIN_0)))
	{
		au8_error = E_OK;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	08 95       	ret
			{
				SET_BIT(PORTC_DATA, pin);
			}
			else
			{
				RESET_BIT(PORTC_DATA, pin);
    1450:	25 b3       	in	r18, 0x15	; 21
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_WritePIN+0xb2>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	6a 95       	dec	r22
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_WritePIN+0xae>
    1460:	80 95       	com	r24
    1462:	82 23       	and	r24, r18
    1464:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error = E_NOK;
	if (((port <= DIO_PORTD) && (port >= DIO_PORTA)) &&
		((pin <= PIN_7) && (pin >= PIN_0)))
	{
		au8_error = E_OK;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	08 95       	ret
			}
			break;
		}
		case DIO_PORTD:
		{
			if (data == HIGH)
    146a:	41 30       	cpi	r20, 0x01	; 1
    146c:	61 f4       	brne	.+24     	; 0x1486 <DIO_WritePIN+0xdc>
			{
				SET_BIT(PORTD_DATA, pin);
    146e:	22 b3       	in	r18, 0x12	; 18
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_WritePIN+0xd0>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	6a 95       	dec	r22
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_WritePIN+0xcc>
    147e:	82 2b       	or	r24, r18
    1480:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error = E_NOK;
	if (((port <= DIO_PORTD) && (port >= DIO_PORTA)) &&
		((pin <= PIN_7) && (pin >= PIN_0)))
	{
		au8_error = E_OK;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	08 95       	ret
			{
				SET_BIT(PORTD_DATA, pin);
			}
			else
			{
				RESET_BIT(PORTD_DATA, pin);
    1486:	22 b3       	in	r18, 0x12	; 18
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_WritePIN+0xe8>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	6a 95       	dec	r22
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_WritePIN+0xe4>
    1496:	80 95       	com	r24
    1498:	82 23       	and	r24, r18
    149a:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error = E_NOK;
	if (((port <= DIO_PORTD) && (port >= DIO_PORTA)) &&
		((pin <= PIN_7) && (pin >= PIN_0)))
	{
		au8_error = E_OK;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	08 95       	ret
	return au8_error;
}

E_STATUS DIO_WritePIN(uint8_t port, EN_pins pin, uint8_t data)
{
	E_STATUS au8_error = E_NOK;
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	08 95       	ret
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	08 95       	ret
	if (((port <= DIO_PORTD) && (port >= DIO_PORTA)) &&
		((pin <= PIN_7) && (pin >= PIN_0)))
	{
		au8_error = E_OK;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
		}
	}
	return au8_error;
}
    14aa:	08 95       	ret

000014ac <external_interrupt_init>:

#include "interrupt.h"

E_STATUS external_interrupt_init(uint8_t external_INT_num, uint8_t edge)
{
	SET_BIT(SREG, PIN_7);
    14ac:	9f b7       	in	r25, 0x3f	; 63
    14ae:	90 68       	ori	r25, 0x80	; 128
    14b0:	9f bf       	out	0x3f, r25	; 63
	if((edge == low_lvl) || (edge == any_logic_lvl) || (edge == falling_edge) || (edge == rising_edge) )
    14b2:	64 30       	cpi	r22, 0x04	; 4
    14b4:	08 f0       	brcs	.+2      	; 0x14b8 <external_interrupt_init+0xc>
    14b6:	45 c0       	rjmp	.+138    	; 0x1542 <external_interrupt_init+0x96>
	{
		if(external_INT_num == interrupt0)
    14b8:	81 11       	cpse	r24, r1
    14ba:	14 c0       	rjmp	.+40     	; 0x14e4 <external_interrupt_init+0x38>
		{
			MCUCR =( MCUCR & 0xfc) | (edge & 0x03);
    14bc:	85 b7       	in	r24, 0x35	; 53
    14be:	8c 7f       	andi	r24, 0xFC	; 252
    14c0:	63 70       	andi	r22, 0x03	; 3
    14c2:	68 2b       	or	r22, r24
    14c4:	65 bf       	out	0x35, r22	; 53
			SET_BIT(GICR, int0_bit);
    14c6:	8b b7       	in	r24, 0x3b	; 59
    14c8:	80 64       	ori	r24, 0x40	; 64
    14ca:	8b bf       	out	0x3b, r24	; 59
			configs.port = DIO_PORTD;
    14cc:	e9 e8       	ldi	r30, 0x89	; 137
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	83 e0       	ldi	r24, 0x03	; 3
    14d2:	80 83       	st	Z, r24
			configs.pin = PIN_2;
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = INPUT;
    14d8:	12 82       	std	Z+2, r1	; 0x02
			DIO_Init(&configs);
    14da:	cf 01       	movw	r24, r30
    14dc:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
			return E_OK;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	08 95       	ret
	
		}
		else if(external_INT_num == interrupt1)
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	99 f4       	brne	.+38     	; 0x150e <external_interrupt_init+0x62>
		{
			MCUCR =( MCUCR & 0xf3) | (edge & 0x0c);
    14e8:	85 b7       	in	r24, 0x35	; 53
    14ea:	83 7f       	andi	r24, 0xF3	; 243
    14ec:	6c 70       	andi	r22, 0x0C	; 12
    14ee:	68 2b       	or	r22, r24
    14f0:	65 bf       	out	0x35, r22	; 53
			SET_BIT(GICR, int1_bit);
    14f2:	8b b7       	in	r24, 0x3b	; 59
    14f4:	80 68       	ori	r24, 0x80	; 128
    14f6:	8b bf       	out	0x3b, r24	; 59
			configs.port = DIO_PORTD;
    14f8:	e9 e8       	ldi	r30, 0x89	; 137
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	80 83       	st	Z, r24
			configs.pin = PIN_3;
    1500:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = INPUT;
    1502:	12 82       	std	Z+2, r1	; 0x02
			DIO_Init(&configs);
    1504:	cf 01       	movw	r24, r30
    1506:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
			return E_OK;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	08 95       	ret
	
		}
		else if(external_INT_num == interrupt2)
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	d1 f4       	brne	.+52     	; 0x1546 <external_interrupt_init+0x9a>
		{
			if(edge == falling_edge)
    1512:	62 30       	cpi	r22, 0x02	; 2
    1514:	21 f4       	brne	.+8      	; 0x151e <external_interrupt_init+0x72>
			{
				RESET_BIT(MCUCSR, ISC2);
    1516:	84 b7       	in	r24, 0x34	; 52
    1518:	8f 7b       	andi	r24, 0xBF	; 191
    151a:	84 bf       	out	0x34, r24	; 52
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <external_interrupt_init+0x78>
			}
			else
			{
				SET_BIT(MCUCSR, ISC2);
    151e:	84 b7       	in	r24, 0x34	; 52
    1520:	80 64       	ori	r24, 0x40	; 64
    1522:	84 bf       	out	0x34, r24	; 52
			}
			SET_BIT(GICR, int2_bit);
    1524:	8b b7       	in	r24, 0x3b	; 59
    1526:	80 62       	ori	r24, 0x20	; 32
    1528:	8b bf       	out	0x3b, r24	; 59
			configs.port = DIO_PORTB;
    152a:	e9 e8       	ldi	r30, 0x89	; 137
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 83       	st	Z, r24
			configs.pin = PIN_2;
    1532:	82 e0       	ldi	r24, 0x02	; 2
    1534:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = INPUT;
    1536:	12 82       	std	Z+2, r1	; 0x02
			DIO_Init(&configs);
    1538:	cf 01       	movw	r24, r30
    153a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
			return E_OK;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	08 95       	ret
			return E_NOK;
		}
	}
	else
	{
		return E_NOK;
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	08 95       	ret
			return E_OK;
			
		}
		else
		{
			return E_NOK;
    1546:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return E_NOK;
	}
}
    1548:	08 95       	ret

0000154a <PWM_InitPins>:
/******************************************************************************
*                         LOCAL FUNCTIONS									  *
*******************************************************************************/
uint8_t PWM_InitPins(PWM_TIMER TimerNo)
{
	switch (TimerNo)
    154a:	88 23       	and	r24, r24
    154c:	19 f0       	breq	.+6      	; 0x1554 <PWM_InitPins+0xa>
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	69 f0       	breq	.+26     	; 0x156c <PWM_InitPins+0x22>
    1552:	19 c0       	rjmp	.+50     	; 0x1586 <PWM_InitPins+0x3c>
	{
		{
			case  PWM_TIMER0:
			configs.port = DIO_PORTB;
    1554:	e9 e8       	ldi	r30, 0x89	; 137
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	80 83       	st	Z, r24
			configs.pin = PIN_3;
    155c:	93 e0       	ldi	r25, 0x03	; 3
    155e:	91 83       	std	Z+1, r25	; 0x01
			configs.dir = OUTPUT;
    1560:	82 83       	std	Z+2, r24	; 0x02
			DIO_Init(&configs);
    1562:	cf 01       	movw	r24, r30
    1564:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
		default:
		{
			return E_NOK;
		}
	}
	return E_OK;
    1568:	81 e0       	ldi	r24, 0x01	; 1
			case  PWM_TIMER0:
			configs.port = DIO_PORTB;
			configs.pin = PIN_3;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
    156a:	08 95       	ret
		}
		case  PWM_TIMER2:
		{
			configs.port = DIO_PORTD;
    156c:	e9 e8       	ldi	r30, 0x89	; 137
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	80 83       	st	Z, r24
			configs.pin = PIN_7;
    1574:	87 e0       	ldi	r24, 0x07	; 7
    1576:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = OUTPUT;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	82 83       	std	Z+2, r24	; 0x02
			DIO_Init(&configs);
    157c:	cf 01       	movw	r24, r30
    157e:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_Init>
		default:
		{
			return E_NOK;
		}
	}
	return E_OK;
    1582:	81 e0       	ldi	r24, 0x01	; 1
		{
			configs.port = DIO_PORTD;
			configs.pin = PIN_7;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
    1584:	08 95       	ret
		}
		default:
		{
			return E_NOK;
    1586:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return E_OK;
}
    1588:	08 95       	ret

0000158a <PWM_START>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/

uint8_t PWM_START(PWM_TIMER TimerNo, uint8_t dutyCycle)
{
    158a:	cf 93       	push	r28
	if (dutyCycle > 100)
    158c:	65 36       	cpi	r22, 0x65	; 101
    158e:	08 f0       	brcs	.+2      	; 0x1592 <PWM_START+0x8>
    1590:	4e c0       	rjmp	.+156    	; 0x162e <PWM_START+0xa4>
    1592:	c8 2f       	mov	r28, r24
	{
		return E_NOK;
	}
	else
	{
		if (TimerNo == PWM_TIMER0)
    1594:	81 11       	cpse	r24, r1
    1596:	22 c0       	rjmp	.+68     	; 0x15dc <PWM_START+0x52>
		{
			TCCR0 |= PWM_TIMER0_MODE;
    1598:	83 b7       	in	r24, 0x33	; 51
    159a:	88 64       	ori	r24, 0x48	; 72
    159c:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= PWM_TIMER0_PRESCALER;
    159e:	83 b7       	in	r24, 0x33	; 51
    15a0:	81 60       	ori	r24, 0x01	; 1
    15a2:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= PWM_TIMER0_OC0_MODE;
    15a4:	83 b7       	in	r24, 0x33	; 51
    15a6:	80 62       	ori	r24, 0x20	; 32
    15a8:	83 bf       	out	0x33, r24	; 51
			if (PWM_TIMER0_OC0_MODE == PWM_OC0_NONINVERTING_MODE)
			{
				if (dutyCycle == 0)
    15aa:	61 11       	cpse	r22, r1
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <PWM_START+0x28>
				{
					OCR0 = 0;
    15ae:	1c be       	out	0x3c, r1	; 60
    15b0:	38 c0       	rjmp	.+112    	; 0x1622 <PWM_START+0x98>
				}
				else
				{
					OCR0 = 2.56 * dutyCycle - 1;
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__floatsisf>
    15bc:	2a e0       	ldi	r18, 0x0A	; 10
    15be:	37 ed       	ldi	r19, 0xD7	; 215
    15c0:	43 e2       	ldi	r20, 0x23	; 35
    15c2:	50 e4       	ldi	r21, 0x40	; 64
    15c4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__mulsf3>
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	0e 94 1e 0b 	call	0x163c	; 0x163c <__subsf3>
    15d4:	0e 94 90 0b 	call	0x1720	; 0x1720 <__fixunssfsi>
    15d8:	6c bf       	out	0x3c, r22	; 60
    15da:	23 c0       	rjmp	.+70     	; 0x1622 <PWM_START+0x98>
				{
					OCR0 = 255 - 2.56 * dutyCycle;
				}
			}
		}
		else if (TimerNo == PWM_TIMER2)
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	49 f5       	brne	.+82     	; 0x1632 <PWM_START+0xa8>
		{
			TCCR2 |= PWM_TIMER2_MODE;
    15e0:	85 b5       	in	r24, 0x25	; 37
    15e2:	88 64       	ori	r24, 0x48	; 72
    15e4:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= PWM_TIMER2_PRESCALER;
    15e6:	85 b5       	in	r24, 0x25	; 37
    15e8:	81 60       	ori	r24, 0x01	; 1
    15ea:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= PWM_TIMER2_OC0_MODE;
    15ec:	85 b5       	in	r24, 0x25	; 37
    15ee:	80 62       	ori	r24, 0x20	; 32
    15f0:	85 bd       	out	0x25, r24	; 37
			if (PWM_TIMER2_MODE == PWM_MODE_FASTPWM)
			{
				if (PWM_TIMER2_OC0_MODE == PWM_OC0_NONINVERTING_MODE)
				{
					if (dutyCycle == 0)
    15f2:	61 11       	cpse	r22, r1
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <PWM_START+0x70>
					{
						OCR2 = 0;
    15f6:	13 bc       	out	0x23, r1	; 35
    15f8:	14 c0       	rjmp	.+40     	; 0x1622 <PWM_START+0x98>
					}
					else
					{
						OCR2 = 2.56 * dutyCycle - 1;
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__floatsisf>
    1604:	2a e0       	ldi	r18, 0x0A	; 10
    1606:	37 ed       	ldi	r19, 0xD7	; 215
    1608:	43 e2       	ldi	r20, 0x23	; 35
    160a:	50 e4       	ldi	r21, 0x40	; 64
    160c:	0e 94 76 0c 	call	0x18ec	; 0x18ec <__mulsf3>
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e8       	ldi	r20, 0x80	; 128
    1616:	5f e3       	ldi	r21, 0x3F	; 63
    1618:	0e 94 1e 0b 	call	0x163c	; 0x163c <__subsf3>
    161c:	0e 94 90 0b 	call	0x1720	; 0x1720 <__fixunssfsi>
    1620:	63 bd       	out	0x23, r22	; 35
		{
			return E_NOK;
		}
	}

	if (E_NOK == PWM_InitPins(TimerNo))
    1622:	8c 2f       	mov	r24, r28
    1624:	0e 94 a5 0a 	call	0x154a	; 0x154a <PWM_InitPins>
    1628:	81 11       	cpse	r24, r1
    162a:	05 c0       	rjmp	.+10     	; 0x1636 <PWM_START+0xac>
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <PWM_START+0xae>

uint8_t PWM_START(PWM_TIMER TimerNo, uint8_t dutyCycle)
{
	if (dutyCycle > 100)
	{
		return E_NOK;
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <PWM_START+0xae>
				}
			}
		}
		else
		{
			return E_NOK;
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <PWM_START+0xae>
	}
	else
	{
		
	}
	return E_OK;
    1636:	81 e0       	ldi	r24, 0x01	; 1
}
    1638:	cf 91       	pop	r28
    163a:	08 95       	ret

0000163c <__subsf3>:
    163c:	50 58       	subi	r21, 0x80	; 128

0000163e <__addsf3>:
    163e:	bb 27       	eor	r27, r27
    1640:	aa 27       	eor	r26, r26
    1642:	0e 94 36 0b 	call	0x166c	; 0x166c <__addsf3x>
    1646:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__fp_round>
    164a:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fp_pscA>
    164e:	38 f0       	brcs	.+14     	; 0x165e <__addsf3+0x20>
    1650:	0e 94 30 0c 	call	0x1860	; 0x1860 <__fp_pscB>
    1654:	20 f0       	brcs	.+8      	; 0x165e <__addsf3+0x20>
    1656:	39 f4       	brne	.+14     	; 0x1666 <__addsf3+0x28>
    1658:	9f 3f       	cpi	r25, 0xFF	; 255
    165a:	19 f4       	brne	.+6      	; 0x1662 <__addsf3+0x24>
    165c:	26 f4       	brtc	.+8      	; 0x1666 <__addsf3+0x28>
    165e:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__fp_nan>
    1662:	0e f4       	brtc	.+2      	; 0x1666 <__addsf3+0x28>
    1664:	e0 95       	com	r30
    1666:	e7 fb       	bst	r30, 7
    1668:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_inf>

0000166c <__addsf3x>:
    166c:	e9 2f       	mov	r30, r25
    166e:	0e 94 48 0c 	call	0x1890	; 0x1890 <__fp_split3>
    1672:	58 f3       	brcs	.-42     	; 0x164a <__addsf3+0xc>
    1674:	ba 17       	cp	r27, r26
    1676:	62 07       	cpc	r22, r18
    1678:	73 07       	cpc	r23, r19
    167a:	84 07       	cpc	r24, r20
    167c:	95 07       	cpc	r25, r21
    167e:	20 f0       	brcs	.+8      	; 0x1688 <__addsf3x+0x1c>
    1680:	79 f4       	brne	.+30     	; 0x16a0 <__addsf3x+0x34>
    1682:	a6 f5       	brtc	.+104    	; 0x16ec <__addsf3x+0x80>
    1684:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__fp_zero>
    1688:	0e f4       	brtc	.+2      	; 0x168c <__addsf3x+0x20>
    168a:	e0 95       	com	r30
    168c:	0b 2e       	mov	r0, r27
    168e:	ba 2f       	mov	r27, r26
    1690:	a0 2d       	mov	r26, r0
    1692:	0b 01       	movw	r0, r22
    1694:	b9 01       	movw	r22, r18
    1696:	90 01       	movw	r18, r0
    1698:	0c 01       	movw	r0, r24
    169a:	ca 01       	movw	r24, r20
    169c:	a0 01       	movw	r20, r0
    169e:	11 24       	eor	r1, r1
    16a0:	ff 27       	eor	r31, r31
    16a2:	59 1b       	sub	r21, r25
    16a4:	99 f0       	breq	.+38     	; 0x16cc <__addsf3x+0x60>
    16a6:	59 3f       	cpi	r21, 0xF9	; 249
    16a8:	50 f4       	brcc	.+20     	; 0x16be <__addsf3x+0x52>
    16aa:	50 3e       	cpi	r21, 0xE0	; 224
    16ac:	68 f1       	brcs	.+90     	; 0x1708 <__addsf3x+0x9c>
    16ae:	1a 16       	cp	r1, r26
    16b0:	f0 40       	sbci	r31, 0x00	; 0
    16b2:	a2 2f       	mov	r26, r18
    16b4:	23 2f       	mov	r18, r19
    16b6:	34 2f       	mov	r19, r20
    16b8:	44 27       	eor	r20, r20
    16ba:	58 5f       	subi	r21, 0xF8	; 248
    16bc:	f3 cf       	rjmp	.-26     	; 0x16a4 <__addsf3x+0x38>
    16be:	46 95       	lsr	r20
    16c0:	37 95       	ror	r19
    16c2:	27 95       	ror	r18
    16c4:	a7 95       	ror	r26
    16c6:	f0 40       	sbci	r31, 0x00	; 0
    16c8:	53 95       	inc	r21
    16ca:	c9 f7       	brne	.-14     	; 0x16be <__addsf3x+0x52>
    16cc:	7e f4       	brtc	.+30     	; 0x16ec <__addsf3x+0x80>
    16ce:	1f 16       	cp	r1, r31
    16d0:	ba 0b       	sbc	r27, r26
    16d2:	62 0b       	sbc	r22, r18
    16d4:	73 0b       	sbc	r23, r19
    16d6:	84 0b       	sbc	r24, r20
    16d8:	ba f0       	brmi	.+46     	; 0x1708 <__addsf3x+0x9c>
    16da:	91 50       	subi	r25, 0x01	; 1
    16dc:	a1 f0       	breq	.+40     	; 0x1706 <__addsf3x+0x9a>
    16de:	ff 0f       	add	r31, r31
    16e0:	bb 1f       	adc	r27, r27
    16e2:	66 1f       	adc	r22, r22
    16e4:	77 1f       	adc	r23, r23
    16e6:	88 1f       	adc	r24, r24
    16e8:	c2 f7       	brpl	.-16     	; 0x16da <__addsf3x+0x6e>
    16ea:	0e c0       	rjmp	.+28     	; 0x1708 <__addsf3x+0x9c>
    16ec:	ba 0f       	add	r27, r26
    16ee:	62 1f       	adc	r22, r18
    16f0:	73 1f       	adc	r23, r19
    16f2:	84 1f       	adc	r24, r20
    16f4:	48 f4       	brcc	.+18     	; 0x1708 <__addsf3x+0x9c>
    16f6:	87 95       	ror	r24
    16f8:	77 95       	ror	r23
    16fa:	67 95       	ror	r22
    16fc:	b7 95       	ror	r27
    16fe:	f7 95       	ror	r31
    1700:	9e 3f       	cpi	r25, 0xFE	; 254
    1702:	08 f0       	brcs	.+2      	; 0x1706 <__addsf3x+0x9a>
    1704:	b0 cf       	rjmp	.-160    	; 0x1666 <__addsf3+0x28>
    1706:	93 95       	inc	r25
    1708:	88 0f       	add	r24, r24
    170a:	08 f0       	brcs	.+2      	; 0x170e <__addsf3x+0xa2>
    170c:	99 27       	eor	r25, r25
    170e:	ee 0f       	add	r30, r30
    1710:	97 95       	ror	r25
    1712:	87 95       	ror	r24
    1714:	08 95       	ret

00001716 <__cmpsf2>:
    1716:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fp_cmp>
    171a:	08 f4       	brcc	.+2      	; 0x171e <__cmpsf2+0x8>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	08 95       	ret

00001720 <__fixunssfsi>:
    1720:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__fp_splitA>
    1724:	88 f0       	brcs	.+34     	; 0x1748 <__fixunssfsi+0x28>
    1726:	9f 57       	subi	r25, 0x7F	; 127
    1728:	98 f0       	brcs	.+38     	; 0x1750 <__fixunssfsi+0x30>
    172a:	b9 2f       	mov	r27, r25
    172c:	99 27       	eor	r25, r25
    172e:	b7 51       	subi	r27, 0x17	; 23
    1730:	b0 f0       	brcs	.+44     	; 0x175e <__fixunssfsi+0x3e>
    1732:	e1 f0       	breq	.+56     	; 0x176c <__fixunssfsi+0x4c>
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	1a f0       	brmi	.+6      	; 0x1744 <__fixunssfsi+0x24>
    173e:	ba 95       	dec	r27
    1740:	c9 f7       	brne	.-14     	; 0x1734 <__fixunssfsi+0x14>
    1742:	14 c0       	rjmp	.+40     	; 0x176c <__fixunssfsi+0x4c>
    1744:	b1 30       	cpi	r27, 0x01	; 1
    1746:	91 f0       	breq	.+36     	; 0x176c <__fixunssfsi+0x4c>
    1748:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__fp_zero>
    174c:	b1 e0       	ldi	r27, 0x01	; 1
    174e:	08 95       	ret
    1750:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__fp_zero>
    1754:	67 2f       	mov	r22, r23
    1756:	78 2f       	mov	r23, r24
    1758:	88 27       	eor	r24, r24
    175a:	b8 5f       	subi	r27, 0xF8	; 248
    175c:	39 f0       	breq	.+14     	; 0x176c <__fixunssfsi+0x4c>
    175e:	b9 3f       	cpi	r27, 0xF9	; 249
    1760:	cc f3       	brlt	.-14     	; 0x1754 <__fixunssfsi+0x34>
    1762:	86 95       	lsr	r24
    1764:	77 95       	ror	r23
    1766:	67 95       	ror	r22
    1768:	b3 95       	inc	r27
    176a:	d9 f7       	brne	.-10     	; 0x1762 <__fixunssfsi+0x42>
    176c:	3e f4       	brtc	.+14     	; 0x177c <__fixunssfsi+0x5c>
    176e:	90 95       	com	r25
    1770:	80 95       	com	r24
    1772:	70 95       	com	r23
    1774:	61 95       	neg	r22
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	8f 4f       	sbci	r24, 0xFF	; 255
    177a:	9f 4f       	sbci	r25, 0xFF	; 255
    177c:	08 95       	ret

0000177e <__floatunsisf>:
    177e:	e8 94       	clt
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <__floatsisf+0x12>

00001782 <__floatsisf>:
    1782:	97 fb       	bst	r25, 7
    1784:	3e f4       	brtc	.+14     	; 0x1794 <__floatsisf+0x12>
    1786:	90 95       	com	r25
    1788:	80 95       	com	r24
    178a:	70 95       	com	r23
    178c:	61 95       	neg	r22
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	8f 4f       	sbci	r24, 0xFF	; 255
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	99 23       	and	r25, r25
    1796:	a9 f0       	breq	.+42     	; 0x17c2 <__floatsisf+0x40>
    1798:	f9 2f       	mov	r31, r25
    179a:	96 e9       	ldi	r25, 0x96	; 150
    179c:	bb 27       	eor	r27, r27
    179e:	93 95       	inc	r25
    17a0:	f6 95       	lsr	r31
    17a2:	87 95       	ror	r24
    17a4:	77 95       	ror	r23
    17a6:	67 95       	ror	r22
    17a8:	b7 95       	ror	r27
    17aa:	f1 11       	cpse	r31, r1
    17ac:	f8 cf       	rjmp	.-16     	; 0x179e <__floatsisf+0x1c>
    17ae:	fa f4       	brpl	.+62     	; 0x17ee <__floatsisf+0x6c>
    17b0:	bb 0f       	add	r27, r27
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <__floatsisf+0x36>
    17b4:	60 ff       	sbrs	r22, 0
    17b6:	1b c0       	rjmp	.+54     	; 0x17ee <__floatsisf+0x6c>
    17b8:	6f 5f       	subi	r22, 0xFF	; 255
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	16 c0       	rjmp	.+44     	; 0x17ee <__floatsisf+0x6c>
    17c2:	88 23       	and	r24, r24
    17c4:	11 f0       	breq	.+4      	; 0x17ca <__floatsisf+0x48>
    17c6:	96 e9       	ldi	r25, 0x96	; 150
    17c8:	11 c0       	rjmp	.+34     	; 0x17ec <__floatsisf+0x6a>
    17ca:	77 23       	and	r23, r23
    17cc:	21 f0       	breq	.+8      	; 0x17d6 <__floatsisf+0x54>
    17ce:	9e e8       	ldi	r25, 0x8E	; 142
    17d0:	87 2f       	mov	r24, r23
    17d2:	76 2f       	mov	r23, r22
    17d4:	05 c0       	rjmp	.+10     	; 0x17e0 <__floatsisf+0x5e>
    17d6:	66 23       	and	r22, r22
    17d8:	71 f0       	breq	.+28     	; 0x17f6 <__floatsisf+0x74>
    17da:	96 e8       	ldi	r25, 0x86	; 134
    17dc:	86 2f       	mov	r24, r22
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	2a f0       	brmi	.+10     	; 0x17ee <__floatsisf+0x6c>
    17e4:	9a 95       	dec	r25
    17e6:	66 0f       	add	r22, r22
    17e8:	77 1f       	adc	r23, r23
    17ea:	88 1f       	adc	r24, r24
    17ec:	da f7       	brpl	.-10     	; 0x17e4 <__floatsisf+0x62>
    17ee:	88 0f       	add	r24, r24
    17f0:	96 95       	lsr	r25
    17f2:	87 95       	ror	r24
    17f4:	97 f9       	bld	r25, 7
    17f6:	08 95       	ret

000017f8 <__fp_cmp>:
    17f8:	99 0f       	add	r25, r25
    17fa:	00 08       	sbc	r0, r0
    17fc:	55 0f       	add	r21, r21
    17fe:	aa 0b       	sbc	r26, r26
    1800:	e0 e8       	ldi	r30, 0x80	; 128
    1802:	fe ef       	ldi	r31, 0xFE	; 254
    1804:	16 16       	cp	r1, r22
    1806:	17 06       	cpc	r1, r23
    1808:	e8 07       	cpc	r30, r24
    180a:	f9 07       	cpc	r31, r25
    180c:	c0 f0       	brcs	.+48     	; 0x183e <__fp_cmp+0x46>
    180e:	12 16       	cp	r1, r18
    1810:	13 06       	cpc	r1, r19
    1812:	e4 07       	cpc	r30, r20
    1814:	f5 07       	cpc	r31, r21
    1816:	98 f0       	brcs	.+38     	; 0x183e <__fp_cmp+0x46>
    1818:	62 1b       	sub	r22, r18
    181a:	73 0b       	sbc	r23, r19
    181c:	84 0b       	sbc	r24, r20
    181e:	95 0b       	sbc	r25, r21
    1820:	39 f4       	brne	.+14     	; 0x1830 <__fp_cmp+0x38>
    1822:	0a 26       	eor	r0, r26
    1824:	61 f0       	breq	.+24     	; 0x183e <__fp_cmp+0x46>
    1826:	23 2b       	or	r18, r19
    1828:	24 2b       	or	r18, r20
    182a:	25 2b       	or	r18, r21
    182c:	21 f4       	brne	.+8      	; 0x1836 <__fp_cmp+0x3e>
    182e:	08 95       	ret
    1830:	0a 26       	eor	r0, r26
    1832:	09 f4       	brne	.+2      	; 0x1836 <__fp_cmp+0x3e>
    1834:	a1 40       	sbci	r26, 0x01	; 1
    1836:	a6 95       	lsr	r26
    1838:	8f ef       	ldi	r24, 0xFF	; 255
    183a:	81 1d       	adc	r24, r1
    183c:	81 1d       	adc	r24, r1
    183e:	08 95       	ret

00001840 <__fp_inf>:
    1840:	97 f9       	bld	r25, 7
    1842:	9f 67       	ori	r25, 0x7F	; 127
    1844:	80 e8       	ldi	r24, 0x80	; 128
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	08 95       	ret

0000184c <__fp_nan>:
    184c:	9f ef       	ldi	r25, 0xFF	; 255
    184e:	80 ec       	ldi	r24, 0xC0	; 192
    1850:	08 95       	ret

00001852 <__fp_pscA>:
    1852:	00 24       	eor	r0, r0
    1854:	0a 94       	dec	r0
    1856:	16 16       	cp	r1, r22
    1858:	17 06       	cpc	r1, r23
    185a:	18 06       	cpc	r1, r24
    185c:	09 06       	cpc	r0, r25
    185e:	08 95       	ret

00001860 <__fp_pscB>:
    1860:	00 24       	eor	r0, r0
    1862:	0a 94       	dec	r0
    1864:	12 16       	cp	r1, r18
    1866:	13 06       	cpc	r1, r19
    1868:	14 06       	cpc	r1, r20
    186a:	05 06       	cpc	r0, r21
    186c:	08 95       	ret

0000186e <__fp_round>:
    186e:	09 2e       	mov	r0, r25
    1870:	03 94       	inc	r0
    1872:	00 0c       	add	r0, r0
    1874:	11 f4       	brne	.+4      	; 0x187a <__fp_round+0xc>
    1876:	88 23       	and	r24, r24
    1878:	52 f0       	brmi	.+20     	; 0x188e <__fp_round+0x20>
    187a:	bb 0f       	add	r27, r27
    187c:	40 f4       	brcc	.+16     	; 0x188e <__fp_round+0x20>
    187e:	bf 2b       	or	r27, r31
    1880:	11 f4       	brne	.+4      	; 0x1886 <__fp_round+0x18>
    1882:	60 ff       	sbrs	r22, 0
    1884:	04 c0       	rjmp	.+8      	; 0x188e <__fp_round+0x20>
    1886:	6f 5f       	subi	r22, 0xFF	; 255
    1888:	7f 4f       	sbci	r23, 0xFF	; 255
    188a:	8f 4f       	sbci	r24, 0xFF	; 255
    188c:	9f 4f       	sbci	r25, 0xFF	; 255
    188e:	08 95       	ret

00001890 <__fp_split3>:
    1890:	57 fd       	sbrc	r21, 7
    1892:	90 58       	subi	r25, 0x80	; 128
    1894:	44 0f       	add	r20, r20
    1896:	55 1f       	adc	r21, r21
    1898:	59 f0       	breq	.+22     	; 0x18b0 <__fp_splitA+0x10>
    189a:	5f 3f       	cpi	r21, 0xFF	; 255
    189c:	71 f0       	breq	.+28     	; 0x18ba <__fp_splitA+0x1a>
    189e:	47 95       	ror	r20

000018a0 <__fp_splitA>:
    18a0:	88 0f       	add	r24, r24
    18a2:	97 fb       	bst	r25, 7
    18a4:	99 1f       	adc	r25, r25
    18a6:	61 f0       	breq	.+24     	; 0x18c0 <__fp_splitA+0x20>
    18a8:	9f 3f       	cpi	r25, 0xFF	; 255
    18aa:	79 f0       	breq	.+30     	; 0x18ca <__fp_splitA+0x2a>
    18ac:	87 95       	ror	r24
    18ae:	08 95       	ret
    18b0:	12 16       	cp	r1, r18
    18b2:	13 06       	cpc	r1, r19
    18b4:	14 06       	cpc	r1, r20
    18b6:	55 1f       	adc	r21, r21
    18b8:	f2 cf       	rjmp	.-28     	; 0x189e <__fp_split3+0xe>
    18ba:	46 95       	lsr	r20
    18bc:	f1 df       	rcall	.-30     	; 0x18a0 <__fp_splitA>
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <__fp_splitA+0x30>
    18c0:	16 16       	cp	r1, r22
    18c2:	17 06       	cpc	r1, r23
    18c4:	18 06       	cpc	r1, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	f1 cf       	rjmp	.-30     	; 0x18ac <__fp_splitA+0xc>
    18ca:	86 95       	lsr	r24
    18cc:	71 05       	cpc	r23, r1
    18ce:	61 05       	cpc	r22, r1
    18d0:	08 94       	sec
    18d2:	08 95       	ret

000018d4 <__fp_zero>:
    18d4:	e8 94       	clt

000018d6 <__fp_szero>:
    18d6:	bb 27       	eor	r27, r27
    18d8:	66 27       	eor	r22, r22
    18da:	77 27       	eor	r23, r23
    18dc:	cb 01       	movw	r24, r22
    18de:	97 f9       	bld	r25, 7
    18e0:	08 95       	ret

000018e2 <__gesf2>:
    18e2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__fp_cmp>
    18e6:	08 f4       	brcc	.+2      	; 0x18ea <__gesf2+0x8>
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	08 95       	ret

000018ec <__mulsf3>:
    18ec:	0e 94 89 0c 	call	0x1912	; 0x1912 <__mulsf3x>
    18f0:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__fp_round>
    18f4:	0e 94 29 0c 	call	0x1852	; 0x1852 <__fp_pscA>
    18f8:	38 f0       	brcs	.+14     	; 0x1908 <__mulsf3+0x1c>
    18fa:	0e 94 30 0c 	call	0x1860	; 0x1860 <__fp_pscB>
    18fe:	20 f0       	brcs	.+8      	; 0x1908 <__mulsf3+0x1c>
    1900:	95 23       	and	r25, r21
    1902:	11 f0       	breq	.+4      	; 0x1908 <__mulsf3+0x1c>
    1904:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_inf>
    1908:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__fp_nan>
    190c:	11 24       	eor	r1, r1
    190e:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_szero>

00001912 <__mulsf3x>:
    1912:	0e 94 48 0c 	call	0x1890	; 0x1890 <__fp_split3>
    1916:	70 f3       	brcs	.-36     	; 0x18f4 <__mulsf3+0x8>

00001918 <__mulsf3_pse>:
    1918:	95 9f       	mul	r25, r21
    191a:	c1 f3       	breq	.-16     	; 0x190c <__mulsf3+0x20>
    191c:	95 0f       	add	r25, r21
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	55 1f       	adc	r21, r21
    1922:	62 9f       	mul	r22, r18
    1924:	f0 01       	movw	r30, r0
    1926:	72 9f       	mul	r23, r18
    1928:	bb 27       	eor	r27, r27
    192a:	f0 0d       	add	r31, r0
    192c:	b1 1d       	adc	r27, r1
    192e:	63 9f       	mul	r22, r19
    1930:	aa 27       	eor	r26, r26
    1932:	f0 0d       	add	r31, r0
    1934:	b1 1d       	adc	r27, r1
    1936:	aa 1f       	adc	r26, r26
    1938:	64 9f       	mul	r22, r20
    193a:	66 27       	eor	r22, r22
    193c:	b0 0d       	add	r27, r0
    193e:	a1 1d       	adc	r26, r1
    1940:	66 1f       	adc	r22, r22
    1942:	82 9f       	mul	r24, r18
    1944:	22 27       	eor	r18, r18
    1946:	b0 0d       	add	r27, r0
    1948:	a1 1d       	adc	r26, r1
    194a:	62 1f       	adc	r22, r18
    194c:	73 9f       	mul	r23, r19
    194e:	b0 0d       	add	r27, r0
    1950:	a1 1d       	adc	r26, r1
    1952:	62 1f       	adc	r22, r18
    1954:	83 9f       	mul	r24, r19
    1956:	a0 0d       	add	r26, r0
    1958:	61 1d       	adc	r22, r1
    195a:	22 1f       	adc	r18, r18
    195c:	74 9f       	mul	r23, r20
    195e:	33 27       	eor	r19, r19
    1960:	a0 0d       	add	r26, r0
    1962:	61 1d       	adc	r22, r1
    1964:	23 1f       	adc	r18, r19
    1966:	84 9f       	mul	r24, r20
    1968:	60 0d       	add	r22, r0
    196a:	21 1d       	adc	r18, r1
    196c:	82 2f       	mov	r24, r18
    196e:	76 2f       	mov	r23, r22
    1970:	6a 2f       	mov	r22, r26
    1972:	11 24       	eor	r1, r1
    1974:	9f 57       	subi	r25, 0x7F	; 127
    1976:	50 40       	sbci	r21, 0x00	; 0
    1978:	9a f0       	brmi	.+38     	; 0x19a0 <__mulsf3_pse+0x88>
    197a:	f1 f0       	breq	.+60     	; 0x19b8 <__mulsf3_pse+0xa0>
    197c:	88 23       	and	r24, r24
    197e:	4a f0       	brmi	.+18     	; 0x1992 <__mulsf3_pse+0x7a>
    1980:	ee 0f       	add	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	bb 1f       	adc	r27, r27
    1986:	66 1f       	adc	r22, r22
    1988:	77 1f       	adc	r23, r23
    198a:	88 1f       	adc	r24, r24
    198c:	91 50       	subi	r25, 0x01	; 1
    198e:	50 40       	sbci	r21, 0x00	; 0
    1990:	a9 f7       	brne	.-22     	; 0x197c <__mulsf3_pse+0x64>
    1992:	9e 3f       	cpi	r25, 0xFE	; 254
    1994:	51 05       	cpc	r21, r1
    1996:	80 f0       	brcs	.+32     	; 0x19b8 <__mulsf3_pse+0xa0>
    1998:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__fp_inf>
    199c:	0c 94 6b 0c 	jmp	0x18d6	; 0x18d6 <__fp_szero>
    19a0:	5f 3f       	cpi	r21, 0xFF	; 255
    19a2:	e4 f3       	brlt	.-8      	; 0x199c <__mulsf3_pse+0x84>
    19a4:	98 3e       	cpi	r25, 0xE8	; 232
    19a6:	d4 f3       	brlt	.-12     	; 0x199c <__mulsf3_pse+0x84>
    19a8:	86 95       	lsr	r24
    19aa:	77 95       	ror	r23
    19ac:	67 95       	ror	r22
    19ae:	b7 95       	ror	r27
    19b0:	f7 95       	ror	r31
    19b2:	e7 95       	ror	r30
    19b4:	9f 5f       	subi	r25, 0xFF	; 255
    19b6:	c1 f7       	brne	.-16     	; 0x19a8 <__mulsf3_pse+0x90>
    19b8:	fe 2b       	or	r31, r30
    19ba:	88 0f       	add	r24, r24
    19bc:	91 1d       	adc	r25, r1
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	97 f9       	bld	r25, 7
    19c4:	08 95       	ret

000019c6 <__udivmodqi4>:
    19c6:	99 1b       	sub	r25, r25
    19c8:	79 e0       	ldi	r23, 0x09	; 9
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <__udivmodqi4_ep>

000019cc <__udivmodqi4_loop>:
    19cc:	99 1f       	adc	r25, r25
    19ce:	96 17       	cp	r25, r22
    19d0:	08 f0       	brcs	.+2      	; 0x19d4 <__udivmodqi4_ep>
    19d2:	96 1b       	sub	r25, r22

000019d4 <__udivmodqi4_ep>:
    19d4:	88 1f       	adc	r24, r24
    19d6:	7a 95       	dec	r23
    19d8:	c9 f7       	brne	.-14     	; 0x19cc <__udivmodqi4_loop>
    19da:	80 95       	com	r24
    19dc:	08 95       	ret

000019de <__tablejump2__>:
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	05 90       	lpm	r0, Z+
    19e4:	f4 91       	lpm	r31, Z
    19e6:	e0 2d       	mov	r30, r0
    19e8:	09 94       	ijmp

000019ea <_exit>:
    19ea:	f8 94       	cli

000019ec <__stop_program>:
    19ec:	ff cf       	rjmp	.-2      	; 0x19ec <__stop_program>
