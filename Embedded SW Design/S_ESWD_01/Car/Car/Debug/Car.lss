
Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000017a6  0000183a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800088  00800088  00001862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000370d  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b6  00000000  00000000  0000526d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ce7  00000000  00000000  00006423  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000784  00000000  00000000  0000810c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b02  00000000  00000000  00008890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002346  00000000  00000000  00009392  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_3>
      10:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__vector_4>
      14:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_5>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_7>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 57 07 	jmp	0xeae	; 0xeae <__vector_9>
      28:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_10>
      2c:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__vector_11>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <ftos+0x1e>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e6 ea       	ldi	r30, 0xA6	; 166
      ea:	f7 e1       	ldi	r31, 0x17	; 23
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a8 38       	cpi	r26, 0x88	; 136
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a8 e8       	ldi	r26, 0x88	; 136
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a7 39       	cpi	r26, 0x97	; 151
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 bb 04 	call	0x976	; 0x976 <main>
     10c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <APP_INIT>:

float32_t distance;

uint8_t APP_INIT()
{
	LCD_INIT();
     114:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_INIT>
}


void _delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     118:	88 e0       	ldi	r24, 0x08	; 8
     11a:	97 e0       	ldi	r25, 0x07	; 7
     11c:	01 97       	sbiw	r24, 0x01	; 1
     11e:	f1 f7       	brne	.-4      	; 0x11c <APP_INIT+0x8>
	_delay_us(900);
	ULTRASONIC_INIT();
     120:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ULTRASONIC_INIT>
	DC_MotorInit(MOTOR_LEFT);
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	0e 94 ce 02 	call	0x59c	; 0x59c <DC_MotorInit>
	DC_MotorInit(MOTOR_RIGHT);
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 ce 02 	call	0x59c	; 0x59c <DC_MotorInit>
	LCD_WRITE_STRING(STRING_DISTANCE);
     130:	85 e7       	ldi	r24, 0x75	; 117
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_WRITE_STRING>
	LCD_GOTO_XY(FIRST_ROW, 14);
     138:	6e e0       	ldi	r22, 0x0E	; 14
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_GOTO_XY>
	LCD_WRITE_STRING(STRING_CM);
     140:	80 e8       	ldi	r24, 0x80	; 128
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_WRITE_STRING>
	/* Replace with your application code */
	return E_OK;
}
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	08 95       	ret

0000014c <APP_UPDATE>:

uint8_t APP_UPDATE()
{
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
	ULTRASONIC_GetDist(&distance);
     154:	83 e9       	ldi	r24, 0x93	; 147
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <ULTRASONIC_GetDist>
	LCD_GOTO_XY(FIRST_ROW, 10);
     15c:	6a e0       	ldi	r22, 0x0A	; 10
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_GOTO_XY>
	LCD_WRITE_STRING((ptr_uint8_t)"   ");
     164:	83 e8       	ldi	r24, 0x83	; 131
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_WRITE_STRING>
	LCD_GOTO_XY(FIRST_ROW, 10);
     16c:	6a e0       	ldi	r22, 0x0A	; 10
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_GOTO_XY>
	LCD_WRITE_NUMBER(distance);
     174:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <distance>
     178:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <distance+0x1>
     17c:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <distance+0x2>
     180:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <distance+0x3>
     184:	0e 94 81 02 	call	0x502	; 0x502 <LCD_WRITE_NUMBER>
	if(distance > 52)
     188:	c0 90 93 00 	lds	r12, 0x0093	; 0x800093 <distance>
     18c:	d0 90 94 00 	lds	r13, 0x0094	; 0x800094 <distance+0x1>
     190:	e0 90 95 00 	lds	r14, 0x0095	; 0x800095 <distance+0x2>
     194:	f0 90 96 00 	lds	r15, 0x0096	; 0x800096 <distance+0x3>
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e5       	ldi	r20, 0x50	; 80
     19e:	52 e4       	ldi	r21, 0x42	; 66
     1a0:	c7 01       	movw	r24, r14
     1a2:	b6 01       	movw	r22, r12
     1a4:	0e 94 b8 09 	call	0x1370	; 0x1370 <__gesf2>
     1a8:	18 16       	cp	r1, r24
     1aa:	64 f4       	brge	.+24     	; 0x1c4 <APP_UPDATE+0x78>
	{
		DC_MotorStart(MOTOR_RIGHT,70,MOTOR_FORWARD);
     1ac:	40 e0       	ldi	r20, 0x00	; 0
     1ae:	66 e4       	ldi	r22, 0x46	; 70
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	0e 94 08 03 	call	0x610	; 0x610 <DC_MotorStart>
		DC_MotorStart(MOTOR_LEFT,70,MOTOR_FORWARD);
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	66 e4       	ldi	r22, 0x46	; 70
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 08 03 	call	0x610	; 0x610 <DC_MotorStart>
		return E_OK;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	42 c0       	rjmp	.+132    	; 0x248 <APP_UPDATE+0xfc>
	}
	else if((distance >= 48) && (distance <= 52))
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	40 e4       	ldi	r20, 0x40	; 64
     1ca:	52 e4       	ldi	r21, 0x42	; 66
     1cc:	c7 01       	movw	r24, r14
     1ce:	b6 01       	movw	r22, r12
     1d0:	0e 94 b8 09 	call	0x1370	; 0x1370 <__gesf2>
     1d4:	88 23       	and	r24, r24
     1d6:	b4 f0       	brlt	.+44     	; 0x204 <APP_UPDATE+0xb8>
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	40 e5       	ldi	r20, 0x50	; 80
     1de:	52 e4       	ldi	r21, 0x42	; 66
     1e0:	c7 01       	movw	r24, r14
     1e2:	b6 01       	movw	r22, r12
     1e4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__cmpsf2>
     1e8:	18 16       	cp	r1, r24
     1ea:	64 f0       	brlt	.+24     	; 0x204 <APP_UPDATE+0xb8>
	{
		DC_MotorStart(MOTOR_RIGHT,95,MOTOR_BACKWARD);
     1ec:	41 e0       	ldi	r20, 0x01	; 1
     1ee:	6f e5       	ldi	r22, 0x5F	; 95
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	0e 94 08 03 	call	0x610	; 0x610 <DC_MotorStart>
		DC_MotorStart(MOTOR_LEFT,95,MOTOR_FORWARD);
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	6f e5       	ldi	r22, 0x5F	; 95
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	0e 94 08 03 	call	0x610	; 0x610 <DC_MotorStart>
		return E_OK;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	22 c0       	rjmp	.+68     	; 0x248 <APP_UPDATE+0xfc>
	}
	else if ((distance < 48) &&(distance >= 0))
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e4       	ldi	r20, 0x40	; 64
     20a:	52 e4       	ldi	r21, 0x42	; 66
     20c:	c7 01       	movw	r24, r14
     20e:	b6 01       	movw	r22, r12
     210:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__cmpsf2>
     214:	88 23       	and	r24, r24
     216:	ac f4       	brge	.+42     	; 0x242 <APP_UPDATE+0xf6>
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	a9 01       	movw	r20, r18
     21e:	c7 01       	movw	r24, r14
     220:	b6 01       	movw	r22, r12
     222:	0e 94 b8 09 	call	0x1370	; 0x1370 <__gesf2>
     226:	88 23       	and	r24, r24
     228:	74 f0       	brlt	.+28     	; 0x246 <APP_UPDATE+0xfa>
	{
		DC_MotorStart(MOTOR_RIGHT,70,MOTOR_BACKWARD);
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	66 e4       	ldi	r22, 0x46	; 70
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	0e 94 08 03 	call	0x610	; 0x610 <DC_MotorStart>
		DC_MotorStart(MOTOR_LEFT,70,MOTOR_BACKWARD);
     234:	41 e0       	ldi	r20, 0x01	; 1
     236:	66 e4       	ldi	r22, 0x46	; 70
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	0e 94 08 03 	call	0x610	; 0x610 <DC_MotorStart>
		return E_OK;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	03 c0       	rjmp	.+6      	; 0x248 <APP_UPDATE+0xfc>
	}
	else
	{
		return E_NOK;
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	01 c0       	rjmp	.+2      	; 0x248 <APP_UPDATE+0xfc>
     246:	80 e0       	ldi	r24, 0x00	; 0
	}
	return E_OK;
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	08 95       	ret

00000252 <WRITE_ZERO>:
/******************************************************************************
*                         LOCAL FUNCTIONS IMPLEMENTATION					  *
*******************************************************************************/
void WRITE_ZERO(uint8_t PIN)
{
	DIO_WritePIN(gext_LCDConfig[PIN].port, gext_LCDConfig[PIN].pin, LOW);
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	fc 01       	movw	r30, r24
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	8e 0f       	add	r24, r30
     25c:	9f 1f       	adc	r25, r31
     25e:	fc 01       	movw	r30, r24
     260:	e0 5a       	subi	r30, 0xA0	; 160
     262:	ff 4f       	sbci	r31, 0xFF	; 255
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	61 81       	ldd	r22, Z+1	; 0x01
     268:	80 81       	ld	r24, Z
     26a:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
     26e:	08 95       	ret

00000270 <WRITE_ONE>:
}

void WRITE_ONE(uint8_t PIN)
{
	DIO_WritePIN(gext_LCDConfig[PIN].port, gext_LCDConfig[PIN].pin, HIGH);
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	fc 01       	movw	r30, r24
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	8e 0f       	add	r24, r30
     27a:	9f 1f       	adc	r25, r31
     27c:	fc 01       	movw	r30, r24
     27e:	e0 5a       	subi	r30, 0xA0	; 160
     280:	ff 4f       	sbci	r31, 0xFF	; 255
     282:	41 e0       	ldi	r20, 0x01	; 1
     284:	61 81       	ldd	r22, Z+1	; 0x01
     286:	80 81       	ld	r24, Z
     288:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
     28c:	08 95       	ret

0000028e <LCD_KICK>:
}

void LCD_KICK(){
	WRITE_ZERO(EN_SWITCH);
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	0e 94 29 01 	call	0x252	; 0x252 <WRITE_ZERO>
static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));


void _delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	8a 95       	dec	r24
     298:	f1 f7       	brne	.-4      	; 0x296 <LCD_KICK+0x8>
	#if !TEST
	_delay_us(1);
	#endif
	WRITE_ONE(EN_SWITCH);
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	0e 94 38 01 	call	0x270	; 0x270 <WRITE_ONE>
     2a0:	08 95       	ret

000002a2 <LCD_WRITE_COMMAND>:
	return E_OK;
}


E_STATUS LCD_WRITE_COMMAND(uint8_t command)
{
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	18 2f       	mov	r17, r24
	#if !TEST
	_delay_us(1);
	#endif
	LCD_KICK ();
	#elif LCD_MODE == FOUR_BIT_MODE
	DIO_WritePIN(gext_LCDConfig[DATA_4].port,gext_LCDConfig[DATA_4].pin,BIT_GET(command,4));
     2aa:	c0 e6       	ldi	r28, 0x60	; 96
     2ac:	d0 e0       	ldi	r29, 0x00	; 0
     2ae:	84 fb       	bst	r24, 4
     2b0:	44 27       	eor	r20, r20
     2b2:	40 f9       	bld	r20, 0
     2b4:	6a 85       	ldd	r22, Y+10	; 0x0a
     2b6:	89 85       	ldd	r24, Y+9	; 0x09
     2b8:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_5].port,gext_LCDConfig[DATA_5].pin,BIT_GET(command,5));
     2bc:	15 fb       	bst	r17, 5
     2be:	44 27       	eor	r20, r20
     2c0:	40 f9       	bld	r20, 0
     2c2:	6d 85       	ldd	r22, Y+13	; 0x0d
     2c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     2c6:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_6].port,gext_LCDConfig[DATA_6].pin,BIT_GET(command,6));
     2ca:	16 fb       	bst	r17, 6
     2cc:	44 27       	eor	r20, r20
     2ce:	40 f9       	bld	r20, 0
     2d0:	68 89       	ldd	r22, Y+16	; 0x10
     2d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     2d4:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_7].port,gext_LCDConfig[DATA_7].pin,BIT_GET(command,7));
     2d8:	41 2f       	mov	r20, r17
     2da:	44 1f       	adc	r20, r20
     2dc:	44 27       	eor	r20, r20
     2de:	44 1f       	adc	r20, r20
     2e0:	6b 89       	ldd	r22, Y+19	; 0x13
     2e2:	8a 89       	ldd	r24, Y+18	; 0x12
     2e4:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	WRITE_ZERO(RS_SWITCH);
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	0e 94 29 01 	call	0x252	; 0x252 <WRITE_ZERO>
	WRITE_ZERO(RW_SWITCH);
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	0e 94 29 01 	call	0x252	; 0x252 <WRITE_ZERO>
	LCD_KICK ();
     2f4:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_KICK>
	DIO_WritePIN(gext_LCDConfig[DATA_4].port,gext_LCDConfig[DATA_4].pin,BIT_GET(command,0));
     2f8:	41 2f       	mov	r20, r17
     2fa:	41 70       	andi	r20, 0x01	; 1
     2fc:	6a 85       	ldd	r22, Y+10	; 0x0a
     2fe:	89 85       	ldd	r24, Y+9	; 0x09
     300:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_5].port,gext_LCDConfig[DATA_5].pin,BIT_GET(command,1));
     304:	11 fb       	bst	r17, 1
     306:	44 27       	eor	r20, r20
     308:	40 f9       	bld	r20, 0
     30a:	6d 85       	ldd	r22, Y+13	; 0x0d
     30c:	8c 85       	ldd	r24, Y+12	; 0x0c
     30e:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_6].port,gext_LCDConfig[DATA_6].pin,BIT_GET(command,2));
     312:	12 fb       	bst	r17, 2
     314:	44 27       	eor	r20, r20
     316:	40 f9       	bld	r20, 0
     318:	68 89       	ldd	r22, Y+16	; 0x10
     31a:	8f 85       	ldd	r24, Y+15	; 0x0f
     31c:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_7].port,gext_LCDConfig[DATA_7].pin,BIT_GET(command,3));
     320:	13 fb       	bst	r17, 3
     322:	44 27       	eor	r20, r20
     324:	40 f9       	bld	r20, 0
     326:	6b 89       	ldd	r22, Y+19	; 0x13
     328:	8a 89       	ldd	r24, Y+18	; 0x12
     32a:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	WRITE_ZERO(RS_SWITCH);
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	0e 94 29 01 	call	0x252	; 0x252 <WRITE_ZERO>
	WRITE_ZERO(RW_SWITCH);
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 29 01 	call	0x252	; 0x252 <WRITE_ZERO>
	LCD_KICK ();
     33a:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_KICK>
	#endif
	return E_OK;

}
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	1f 91       	pop	r17
     346:	08 95       	ret

00000348 <LCD_clear_screen>:
	return E_OK;
}

E_STATUS LCD_clear_screen ()
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN); // clear the screen
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WRITE_COMMAND>
	return E_OK;
}
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	08 95       	ret

00000352 <LCD_GOTO_XY>:

E_STATUS LCD_GOTO_XY(uint8_t line, uint8_t position)
{
	if ((position < LCD_END) && (position >=LCD_BEGIN))
     352:	60 31       	cpi	r22, 0x10	; 16
     354:	80 f4       	brcc	.+32     	; 0x376 <LCD_GOTO_XY+0x24>
	{
		if(line == FIRST_ROW)
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	31 f4       	brne	.+12     	; 0x366 <LCD_GOTO_XY+0x14>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
     35a:	80 e8       	ldi	r24, 0x80	; 128
     35c:	86 0f       	add	r24, r22
     35e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WRITE_COMMAND>
	}
	else 
	{
		return E_NOK;
	}
	return E_OK;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	08 95       	ret
	{
		if(line == FIRST_ROW)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
		}
		else if(line == SECOND_ROW)
     366:	82 30       	cpi	r24, 0x02	; 2
     368:	41 f4       	brne	.+16     	; 0x37a <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
     36a:	80 ec       	ldi	r24, 0xC0	; 192
     36c:	86 0f       	add	r24, r22
     36e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WRITE_COMMAND>
	}
	else 
	{
		return E_NOK;
	}
	return E_OK;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	08 95       	ret
			return E_NOK;
		}
	}
	else 
	{
		return E_NOK;
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	08 95       	ret
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
		}
		else 
		{
			return E_NOK;
     37a:	80 e0       	ldi	r24, 0x00	; 0
	else 
	{
		return E_NOK;
	}
	return E_OK;
}
     37c:	08 95       	ret

0000037e <LCD_INIT>:

/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/
E_STATUS LCD_INIT(void)
{
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
}


void _delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     382:	88 e0       	ldi	r24, 0x08	; 8
     384:	97 e0       	ldi	r25, 0x07	; 7
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <LCD_INIT+0x8>
	#if !TEST
	_delay_us(900);
	#endif

	for(uint8_t au8_IterationNo=0;au8_IterationNo<LCD_PINS_NUMBER;au8_IterationNo++)
     38a:	c0 e0       	ldi	r28, 0x00	; 0
     38c:	19 c0       	rjmp	.+50     	; 0x3c0 <LCD_INIT+0x42>
	{
		configs.port = gext_LCDConfig[au8_IterationNo].port;
     38e:	ec 2f       	mov	r30, r28
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	cf 01       	movw	r24, r30
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	e8 0f       	add	r30, r24
     39a:	f9 1f       	adc	r31, r25
     39c:	e0 5a       	subi	r30, 0xA0	; 160
     39e:	ff 4f       	sbci	r31, 0xFF	; 255
     3a0:	80 81       	ld	r24, Z
     3a2:	a0 e9       	ldi	r26, 0x90	; 144
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	8c 93       	st	X, r24
		configs.pin	 = gext_LCDConfig[au8_IterationNo].pin;
     3a8:	81 81       	ldd	r24, Z+1	; 0x01
     3aa:	11 96       	adiw	r26, 0x01	; 1
     3ac:	8c 93       	st	X, r24
     3ae:	11 97       	sbiw	r26, 0x01	; 1
		configs.dir  = gext_LCDConfig[au8_IterationNo].dir;
     3b0:	82 81       	ldd	r24, Z+2	; 0x02
     3b2:	12 96       	adiw	r26, 0x02	; 2
     3b4:	8c 93       	st	X, r24
     3b6:	12 97       	sbiw	r26, 0x02	; 2
		DIO_Init(&configs);
     3b8:	cd 01       	movw	r24, r26
     3ba:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
{
	#if !TEST
	_delay_us(900);
	#endif

	for(uint8_t au8_IterationNo=0;au8_IterationNo<LCD_PINS_NUMBER;au8_IterationNo++)
     3be:	cf 5f       	subi	r28, 0xFF	; 255
     3c0:	c7 30       	cpi	r28, 0x07	; 7
     3c2:	28 f3       	brcs	.-54     	; 0x38e <LCD_INIT+0x10>
     3c4:	c8 e0       	ldi	r28, 0x08	; 8
     3c6:	d7 e0       	ldi	r29, 0x07	; 7
     3c8:	ce 01       	movw	r24, r28
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCD_INIT+0x4c>
	}

	#if !TEST
	_delay_us(900);
	#endif
	LCD_clear_screen ();
     3ce:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_clear_screen>
	#if LCD_MODE == EIGHT_BIT_MODE
	DIO_WritePORT(DataDir_LCD_PORT, 0xFF);
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
	
	#elif LCD_MODE == FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
     3d8:	88 e2       	ldi	r24, 0x28	; 40
     3da:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WRITE_COMMAND>
	#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
     3de:	86 e0       	ldi	r24, 0x06	; 6
     3e0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(FIRST_ROW, 0);
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_GOTO_XY>
	LCD_WRITE_COMMAND(LCD_DISP_ON);
     3ec:	8c e0       	ldi	r24, 0x0C	; 12
     3ee:	0e 94 51 01 	call	0x2a2	; 0x2a2 <LCD_WRITE_COMMAND>
     3f2:	21 97       	sbiw	r28, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_INIT+0x74>
	#if !TEST
	_delay_us(900);
	#endif
	LCD_clear_screen();
     3f6:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_clear_screen>
	return E_OK;
}
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <LCD_WRITE_CHAR>:
	return E_OK;

}

E_STATUS LCD_WRITE_CHAR(uint8_t data)
{
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	18 2f       	mov	r17, r24
	#if !TEST
	_delay_us(1);
	#endif
	LCD_KICK ();
	#elif LCD_MODE == FOUR_BIT_MODE
	DIO_WritePIN(gext_LCDConfig[DATA_4].port,gext_LCDConfig[DATA_4].pin,BIT_GET(data,4));
     40a:	c0 e6       	ldi	r28, 0x60	; 96
     40c:	d0 e0       	ldi	r29, 0x00	; 0
     40e:	84 fb       	bst	r24, 4
     410:	44 27       	eor	r20, r20
     412:	40 f9       	bld	r20, 0
     414:	6a 85       	ldd	r22, Y+10	; 0x0a
     416:	89 85       	ldd	r24, Y+9	; 0x09
     418:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_5].port,gext_LCDConfig[DATA_5].pin,BIT_GET(data,5));
     41c:	15 fb       	bst	r17, 5
     41e:	44 27       	eor	r20, r20
     420:	40 f9       	bld	r20, 0
     422:	6d 85       	ldd	r22, Y+13	; 0x0d
     424:	8c 85       	ldd	r24, Y+12	; 0x0c
     426:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_6].port,gext_LCDConfig[DATA_6].pin,BIT_GET(data,6));
     42a:	16 fb       	bst	r17, 6
     42c:	44 27       	eor	r20, r20
     42e:	40 f9       	bld	r20, 0
     430:	68 89       	ldd	r22, Y+16	; 0x10
     432:	8f 85       	ldd	r24, Y+15	; 0x0f
     434:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_7].port,gext_LCDConfig[DATA_7].pin,BIT_GET(data,7));
     438:	41 2f       	mov	r20, r17
     43a:	44 1f       	adc	r20, r20
     43c:	44 27       	eor	r20, r20
     43e:	44 1f       	adc	r20, r20
     440:	6b 89       	ldd	r22, Y+19	; 0x13
     442:	8a 89       	ldd	r24, Y+18	; 0x12
     444:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	//turn RS ON for Data mode.
	WRITE_ONE(RS_SWITCH);
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 38 01 	call	0x270	; 0x270 <WRITE_ONE>
	//turn RW off so you can write.
	WRITE_ZERO(RW_SWITCH);
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 29 01 	call	0x252	; 0x252 <WRITE_ZERO>
	LCD_KICK ();
     454:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_KICK>
	DIO_WritePIN(gext_LCDConfig[DATA_4].port,gext_LCDConfig[DATA_4].pin,BIT_GET(data,0));
     458:	41 2f       	mov	r20, r17
     45a:	41 70       	andi	r20, 0x01	; 1
     45c:	6a 85       	ldd	r22, Y+10	; 0x0a
     45e:	89 85       	ldd	r24, Y+9	; 0x09
     460:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_5].port,gext_LCDConfig[DATA_5].pin,BIT_GET(data,1));
     464:	11 fb       	bst	r17, 1
     466:	44 27       	eor	r20, r20
     468:	40 f9       	bld	r20, 0
     46a:	6d 85       	ldd	r22, Y+13	; 0x0d
     46c:	8c 85       	ldd	r24, Y+12	; 0x0c
     46e:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_6].port,gext_LCDConfig[DATA_6].pin,BIT_GET(data,2));
     472:	12 fb       	bst	r17, 2
     474:	44 27       	eor	r20, r20
     476:	40 f9       	bld	r20, 0
     478:	68 89       	ldd	r22, Y+16	; 0x10
     47a:	8f 85       	ldd	r24, Y+15	; 0x0f
     47c:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	DIO_WritePIN(gext_LCDConfig[DATA_7].port,gext_LCDConfig[DATA_7].pin,BIT_GET(data,3));
     480:	13 fb       	bst	r17, 3
     482:	44 27       	eor	r20, r20
     484:	40 f9       	bld	r20, 0
     486:	6b 89       	ldd	r22, Y+19	; 0x13
     488:	8a 89       	ldd	r24, Y+18	; 0x12
     48a:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
	//turn RS ON for Data mode.
	WRITE_ONE(RS_SWITCH);
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 38 01 	call	0x270	; 0x270 <WRITE_ONE>
	//turn RW off so you can write.
	WRITE_ZERO(RW_SWITCH);
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 29 01 	call	0x252	; 0x252 <WRITE_ZERO>
	LCD_KICK ();
     49a:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_KICK>
	#endif

	return E_OK;
}
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	08 95       	ret

000004a8 <LCD_WRITE_STRING>:

E_STATUS LCD_WRITE_STRING(uint8_t *data)
{
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	8c 01       	movw	r16, r24
	if (NULL_PTR == data)
     4b2:	89 2b       	or	r24, r25
     4b4:	01 f1       	breq	.+64     	; 0x4f6 <LCD_WRITE_STRING+0x4e>
     4b6:	c0 e0       	ldi	r28, 0x00	; 0
     4b8:	18 c0       	rjmp	.+48     	; 0x4ea <LCD_WRITE_STRING+0x42>

	/* To count how much char on the line (it should be 16 char only) */
	uint8_t count = LCD_BEGIN;
	while((*data > LCD_BEGIN))
	{
		count++;
     4ba:	d1 e0       	ldi	r29, 0x01	; 1
     4bc:	dc 0f       	add	r29, r28
		LCD_WRITE_CHAR(*data++);
     4be:	0f 5f       	subi	r16, 0xFF	; 255
     4c0:	1f 4f       	sbci	r17, 0xFF	; 255
     4c2:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WRITE_CHAR>
		if (count == FIRST_ROW_LIMIT) // go to the second line
     4c6:	d0 31       	cpi	r29, 0x10	; 16
     4c8:	29 f4       	brne	.+10     	; 0x4d4 <LCD_WRITE_STRING+0x2c>
		{
			LCD_GOTO_XY(SECOND_ROW, LCD_BEGIN); //Second line position zero
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_GOTO_XY>
     4d2:	0a c0       	rjmp	.+20     	; 0x4e8 <LCD_WRITE_STRING+0x40>
		}
		else if ((count == SECOND_ROW_LIMIT) || (count == SECOND_ROW_LIMIT + 1)) // clear screen and show again
     4d4:	cf 51       	subi	r28, 0x1F	; 31
     4d6:	c2 30       	cpi	r28, 0x02	; 2
     4d8:	38 f4       	brcc	.+14     	; 0x4e8 <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
     4da:	0e 94 a4 01 	call	0x348	; 0x348 <LCD_clear_screen>
			LCD_GOTO_XY(FIRST_ROW,LCD_BEGIN); //First Line position zero
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 a9 01 	call	0x352	; 0x352 <LCD_GOTO_XY>
			count = LCD_BEGIN ;
     4e6:	d0 e0       	ldi	r29, 0x00	; 0
     4e8:	cd 2f       	mov	r28, r29
		return E_NOK;
	}

	/* To count how much char on the line (it should be 16 char only) */
	uint8_t count = LCD_BEGIN;
	while((*data > LCD_BEGIN))
     4ea:	f8 01       	movw	r30, r16
     4ec:	80 81       	ld	r24, Z
     4ee:	81 11       	cpse	r24, r1
     4f0:	e4 cf       	rjmp	.-56     	; 0x4ba <LCD_WRITE_STRING+0x12>
			LCD_clear_screen();
			LCD_GOTO_XY(FIRST_ROW,LCD_BEGIN); //First Line position zero
			count = LCD_BEGIN ;
		}
	}
	return E_OK;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <LCD_WRITE_STRING+0x50>

E_STATUS LCD_WRITE_STRING(uint8_t *data)
{
	if (NULL_PTR == data)
	{
		return E_NOK;
     4f6:	80 e0       	ldi	r24, 0x00	; 0
			LCD_GOTO_XY(FIRST_ROW,LCD_BEGIN); //First Line position zero
			count = LCD_BEGIN ;
		}
	}
	return E_OK;
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <LCD_WRITE_NUMBER>:

E_STATUS LCD_WRITE_NUMBER(float32_t data)
{
     502:	cf 92       	push	r12
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	2a 97       	sbiw	r28, 0x0a	; 10
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	6b 01       	movw	r12, r22
     520:	7c 01       	movw	r14, r24
	if (0 == data)
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	a9 01       	movw	r20, r18
     528:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__cmpsf2>
     52c:	81 11       	cpse	r24, r1
     52e:	05 c0       	rjmp	.+10     	; 0x53a <LCD_WRITE_NUMBER+0x38>
	{
		LCD_WRITE_CHAR(0x30);
     530:	80 e3       	ldi	r24, 0x30	; 48
     532:	0e 94 01 02 	call	0x402	; 0x402 <LCD_WRITE_CHAR>
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	24 c0       	rjmp	.+72     	; 0x582 <LCD_WRITE_NUMBER+0x80>
{
	if (0 == data)
	{
		LCD_WRITE_CHAR(0x30);
	}
	else if ((data < 3.402823E+38) && (data > 0))
     53a:	2d ef       	ldi	r18, 0xFD	; 253
     53c:	3f ef       	ldi	r19, 0xFF	; 255
     53e:	4f e7       	ldi	r20, 0x7F	; 127
     540:	5f e7       	ldi	r21, 0x7F	; 127
     542:	c7 01       	movw	r24, r14
     544:	b6 01       	movw	r22, r12
     546:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__cmpsf2>
     54a:	88 23       	and	r24, r24
     54c:	bc f4       	brge	.+46     	; 0x57c <LCD_WRITE_NUMBER+0x7a>
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	a9 01       	movw	r20, r18
     554:	c7 01       	movw	r24, r14
     556:	b6 01       	movw	r22, r12
     558:	0e 94 b8 09 	call	0x1370	; 0x1370 <__gesf2>
     55c:	18 16       	cp	r1, r24
     55e:	84 f4       	brge	.+32     	; 0x580 <LCD_WRITE_NUMBER+0x7e>
	{
		uint8_t lcd_display[MAX_CHAR_INT];
		ftos(data, lcd_display, 0);
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	ae 01       	movw	r20, r28
     564:	4f 5f       	subi	r20, 0xFF	; 255
     566:	5f 4f       	sbci	r21, 0xFF	; 255
     568:	c7 01       	movw	r24, r14
     56a:	b6 01       	movw	r22, r12
     56c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <ftos>
		LCD_WRITE_STRING(lcd_display);
     570:	ce 01       	movw	r24, r28
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCD_WRITE_STRING>
	}
	else
	{
		return E_NOK;
	}
	return E_OK;
     578:	81 e0       	ldi	r24, 0x01	; 1
	if (0 == data)
	{
		LCD_WRITE_CHAR(0x30);
	}
	else if ((data < 3.402823E+38) && (data > 0))
	{
     57a:	03 c0       	rjmp	.+6      	; 0x582 <LCD_WRITE_NUMBER+0x80>
		ftos(data, lcd_display, 0);
		LCD_WRITE_STRING(lcd_display);
	}
	else
	{
		return E_NOK;
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	01 c0       	rjmp	.+2      	; 0x582 <LCD_WRITE_NUMBER+0x80>
     580:	80 e0       	ldi	r24, 0x00	; 0
	}
	return E_OK;
}
     582:	2a 96       	adiw	r28, 0x0a	; 10
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	de bf       	out	0x3e, r29	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	cd bf       	out	0x3d, r28	; 61
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	08 95       	ret

0000059c <DC_MotorInit>:
*  Author: ayman
*/

#include "DC_Motor.h"
Motor_ERROR_state_t DC_MotorInit(uint8_t Motor)
{
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
	if(!((Motor>=MOTOR_RIGHT)&&(Motor<=MOTOR_LEFT)))
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	60 f5       	brcc	.+88     	; 0x600 <DC_MotorInit+0x64>
	{
		return E_NOK;
	}
	else
	{
		switch (Motor)
     5a8:	88 23       	and	r24, r24
     5aa:	19 f0       	breq	.+6      	; 0x5b2 <DC_MotorInit+0x16>
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	a1 f0       	breq	.+40     	; 0x5d8 <DC_MotorInit+0x3c>
     5b0:	29 c0       	rjmp	.+82     	; 0x604 <DC_MotorInit+0x68>
		{
			case MOTOR_RIGHT:
			configs.port = MOTOR_RIGHT_FORWARD_PORT;
     5b2:	c0 e9       	ldi	r28, 0x90	; 144
     5b4:	d0 e0       	ldi	r29, 0x00	; 0
     5b6:	13 e0       	ldi	r17, 0x03	; 3
     5b8:	18 83       	st	Y, r17
			configs.pin = MOTOR_RIGHT_FORWARD_PIN;
     5ba:	19 83       	std	Y+1, r17	; 0x01
			configs.dir = OUTPUT;
     5bc:	01 e0       	ldi	r16, 0x01	; 1
     5be:	0a 83       	std	Y+2, r16	; 0x02
			DIO_Init(&configs);
     5c0:	ce 01       	movw	r24, r28
     5c2:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
			configs.port = MOTOR_RIGHT_BACKWARD_PORT;
     5c6:	18 83       	st	Y, r17
			configs.pin = MOTOR_RIGHT_BACKWARD_PIN;
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	89 83       	std	Y+1, r24	; 0x01
			configs.dir = OUTPUT;
     5cc:	0a 83       	std	Y+2, r16	; 0x02
			DIO_Init(&configs);
     5ce:	ce 01       	movw	r24, r28
     5d0:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
			DIO_Init(&configs);
			break;
		}
	}
	
	return E_OK;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
			DIO_Init(&configs);
			configs.port = MOTOR_RIGHT_BACKWARD_PORT;
			configs.pin = MOTOR_RIGHT_BACKWARD_PIN;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
     5d6:	17 c0       	rjmp	.+46     	; 0x606 <DC_MotorInit+0x6a>
			case MOTOR_LEFT:
			configs.port = MOTOR_LEFT_FORWARD_PORT;
     5d8:	c0 e9       	ldi	r28, 0x90	; 144
     5da:	d0 e0       	ldi	r29, 0x00	; 0
     5dc:	03 e0       	ldi	r16, 0x03	; 3
     5de:	08 83       	st	Y, r16
			configs.pin = MOTOR_LEFT_FORWARD_PIN;
     5e0:	87 e0       	ldi	r24, 0x07	; 7
     5e2:	89 83       	std	Y+1, r24	; 0x01
			configs.dir = OUTPUT;
     5e4:	11 e0       	ldi	r17, 0x01	; 1
     5e6:	1a 83       	std	Y+2, r17	; 0x02
			DIO_Init(&configs);
     5e8:	ce 01       	movw	r24, r28
     5ea:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
			configs.port = MOTOR_LEFT_BACKWARD_PORT;
     5ee:	08 83       	st	Y, r16
			configs.pin = MOTOR_LEFT_BACKWARD_PIN;
     5f0:	86 e0       	ldi	r24, 0x06	; 6
     5f2:	89 83       	std	Y+1, r24	; 0x01
			configs.dir = OUTPUT;
     5f4:	1a 83       	std	Y+2, r17	; 0x02
			DIO_Init(&configs);
     5f6:	ce 01       	movw	r24, r28
     5f8:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
			break;
		}
	}
	
	return E_OK;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
			DIO_Init(&configs);
			configs.port = MOTOR_LEFT_BACKWARD_PORT;
			configs.pin = MOTOR_LEFT_BACKWARD_PIN;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <DC_MotorInit+0x6a>
#include "DC_Motor.h"
Motor_ERROR_state_t DC_MotorInit(uint8_t Motor)
{
	if(!((Motor>=MOTOR_RIGHT)&&(Motor<=MOTOR_LEFT)))
	{
		return E_NOK;
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	01 c0       	rjmp	.+2      	; 0x606 <DC_MotorInit+0x6a>
			DIO_Init(&configs);
			break;
		}
	}
	
	return E_OK;
     604:	81 e0       	ldi	r24, 0x01	; 1
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <DC_MotorStart>:
Motor_ERROR_state_t DC_MotorStart(uint8_t Motor,uint8_t Motor_speed,uint8_t Motor_Direction)
{
     610:	cf 93       	push	r28
	
	if(!(((Motor>=MOTOR_RIGHT)&&(Motor<=MOTOR_LEFT))&&((Motor_speed>=MOTOR_MIN_SPEED)&&(Motor_speed<=MOTOR_MAX_SPEED))
     612:	82 30       	cpi	r24, 0x02	; 2
     614:	08 f0       	brcs	.+2      	; 0x618 <DC_MotorStart+0x8>
     616:	49 c0       	rjmp	.+146    	; 0x6aa <DC_MotorStart+0x9a>
     618:	65 36       	cpi	r22, 0x65	; 101
     61a:	08 f0       	brcs	.+2      	; 0x61e <DC_MotorStart+0xe>
     61c:	48 c0       	rjmp	.+144    	; 0x6ae <DC_MotorStart+0x9e>
     61e:	42 30       	cpi	r20, 0x02	; 2
     620:	08 f0       	brcs	.+2      	; 0x624 <DC_MotorStart+0x14>
     622:	47 c0       	rjmp	.+142    	; 0x6b2 <DC_MotorStart+0xa2>
     624:	c6 2f       	mov	r28, r22
	{
		return E_NOK;
	}
	else
	{
		switch (Motor)
     626:	88 23       	and	r24, r24
     628:	19 f0       	breq	.+6      	; 0x630 <DC_MotorStart+0x20>
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	09 f1       	breq	.+66     	; 0x670 <DC_MotorStart+0x60>
     62e:	43 c0       	rjmp	.+134    	; 0x6b6 <DC_MotorStart+0xa6>
		{
			case MOTOR_RIGHT:
			switch (Motor_Direction)
     630:	44 23       	and	r20, r20
     632:	19 f0       	breq	.+6      	; 0x63a <DC_MotorStart+0x2a>
     634:	41 30       	cpi	r20, 0x01	; 1
     636:	61 f0       	breq	.+24     	; 0x650 <DC_MotorStart+0x40>
     638:	15 c0       	rjmp	.+42     	; 0x664 <DC_MotorStart+0x54>
			{
				case MOTOR_FORWARD:
				DIO_WritePIN(MOTOR_RIGHT_BACKWARD_PORT, MOTOR_RIGHT_BACKWARD_PIN, LOW);
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	62 e0       	ldi	r22, 0x02	; 2
     63e:	83 e0       	ldi	r24, 0x03	; 3
     640:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
				DIO_WritePIN(MOTOR_RIGHT_FORWARD_PORT, MOTOR_RIGHT_FORWARD_PIN, HIGH);
     644:	41 e0       	ldi	r20, 0x01	; 1
     646:	63 e0       	ldi	r22, 0x03	; 3
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
				break;
     64e:	0a c0       	rjmp	.+20     	; 0x664 <DC_MotorStart+0x54>
				case MOTOR_BACKWARD:
				DIO_WritePIN(MOTOR_RIGHT_FORWARD_PORT, MOTOR_RIGHT_FORWARD_PIN, LOW);
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	63 e0       	ldi	r22, 0x03	; 3
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
				DIO_WritePIN(MOTOR_RIGHT_BACKWARD_PORT, MOTOR_RIGHT_BACKWARD_PIN, HIGH);
     65a:	41 e0       	ldi	r20, 0x01	; 1
     65c:	62 e0       	ldi	r22, 0x02	; 2
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
				break;
			}
			PWM_START(PWM_TIMER0, Motor_speed);
     664:	6c 2f       	mov	r22, r28
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0e 94 49 06 	call	0xc92	; 0xc92 <PWM_START>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE MOTOR LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     66c:	81 e0       	ldi	r24, 0x01	; 1
				DIO_WritePIN(MOTOR_RIGHT_BACKWARD_PORT, MOTOR_RIGHT_BACKWARD_PIN, HIGH);
				break;
			}
			PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE MOTOR RIGHT PWM REQUIRED SPEED
			break;
     66e:	26 c0       	rjmp	.+76     	; 0x6bc <DC_MotorStart+0xac>
			case MOTOR_LEFT:
			switch (Motor_Direction)
     670:	44 23       	and	r20, r20
     672:	19 f0       	breq	.+6      	; 0x67a <DC_MotorStart+0x6a>
     674:	41 30       	cpi	r20, 0x01	; 1
     676:	69 f0       	breq	.+26     	; 0x692 <DC_MotorStart+0x82>
     678:	20 c0       	rjmp	.+64     	; 0x6ba <DC_MotorStart+0xaa>
			{
				case MOTOR_FORWARD:
				DIO_WritePIN(MOTOR_LEFT_BACKWARD_PORT, MOTOR_LEFT_BACKWARD_PIN, LOW);
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	66 e0       	ldi	r22, 0x06	; 6
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
				DIO_WritePIN(MOTOR_LEFT_FORWARD_PORT, MOTOR_LEFT_FORWARD_PIN, HIGH);
     684:	41 e0       	ldi	r20, 0x01	; 1
     686:	67 e0       	ldi	r22, 0x07	; 7
     688:	83 e0       	ldi	r24, 0x03	; 3
     68a:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE MOTOR LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     68e:	81 e0       	ldi	r24, 0x01	; 1
			switch (Motor_Direction)
			{
				case MOTOR_FORWARD:
				DIO_WritePIN(MOTOR_LEFT_BACKWARD_PORT, MOTOR_LEFT_BACKWARD_PIN, LOW);
				DIO_WritePIN(MOTOR_LEFT_FORWARD_PORT, MOTOR_LEFT_FORWARD_PIN, HIGH);
				break;
     690:	15 c0       	rjmp	.+42     	; 0x6bc <DC_MotorStart+0xac>
				case MOTOR_BACKWARD:
				DIO_WritePIN(MOTOR_LEFT_FORWARD_PORT, MOTOR_LEFT_FORWARD_PIN, LOW);
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	67 e0       	ldi	r22, 0x07	; 7
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
				DIO_WritePIN(MOTOR_LEFT_BACKWARD_PORT, MOTOR_LEFT_BACKWARD_PIN, HIGH);
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	66 e0       	ldi	r22, 0x06	; 6
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE MOTOR LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
				DIO_WritePIN(MOTOR_LEFT_FORWARD_PORT, MOTOR_LEFT_FORWARD_PIN, HIGH);
				break;
				case MOTOR_BACKWARD:
				DIO_WritePIN(MOTOR_LEFT_FORWARD_PORT, MOTOR_LEFT_FORWARD_PIN, LOW);
				DIO_WritePIN(MOTOR_LEFT_BACKWARD_PORT, MOTOR_LEFT_BACKWARD_PIN, HIGH);
				break;
     6a8:	09 c0       	rjmp	.+18     	; 0x6bc <DC_MotorStart+0xac>
{
	
	if(!(((Motor>=MOTOR_RIGHT)&&(Motor<=MOTOR_LEFT))&&((Motor_speed>=MOTOR_MIN_SPEED)&&(Motor_speed<=MOTOR_MAX_SPEED))
	&&((Motor_Direction>=MOTOR_FORWARD)&&(Motor_Direction<=MOTOR_BACKWARD))))
	{
		return E_NOK;
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	07 c0       	rjmp	.+14     	; 0x6bc <DC_MotorStart+0xac>
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <DC_MotorStart+0xac>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <DC_MotorStart+0xac>
			//PWM_START(PWM_TIMER0, Motor_speed);
			//ENABLE MOTOR LEFT PWM REQUIRED SPEED
			break;
		}
	}
	return E_OK;
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <DC_MotorStart+0xac>
     6ba:	81 e0       	ldi	r24, 0x01	; 1
}
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <ULTRASONIC_INIT>:
uint8_t g_timer1=0;
uint8_t g_tick=0;


E_STATUS ULTRASONIC_INIT(void)
{
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
	if((ULTRASONIC_Trigger_PORT >= DIO_PORTA) && (ULTRASONIC_Trigger_PORT <= DIO_PORTD)
	&&(ULTRASONIC_Trigger_PIN>=PIN_0)&&(ULTRASONIC_Trigger_PIN<=PIN_7))
	{
		configs.port = ULTRASONIC_Trigger_PORT;
     6c6:	c0 e9       	ldi	r28, 0x90	; 144
     6c8:	d0 e0       	ldi	r29, 0x00	; 0
     6ca:	11 e0       	ldi	r17, 0x01	; 1
     6cc:	18 83       	st	Y, r17
		configs.pin = ULTRASONIC_Trigger_PIN;
     6ce:	19 82       	std	Y+1, r1	; 0x01
		configs.dir = OUTPUT;
     6d0:	1a 83       	std	Y+2, r17	; 0x02
		DIO_Init(&configs);
     6d2:	ce 01       	movw	r24, r28
     6d4:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
		configs.port = ULTRASONIC_ECHO_PORT;
     6d8:	18 83       	st	Y, r17
		configs.pin = ULTRASONIC_ECHO_PIN;
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	89 83       	std	Y+1, r24	; 0x01
		configs.dir = INPUT;
     6de:	1a 82       	std	Y+2, r1	; 0x02
		DIO_Init(&configs);
     6e0:	ce 01       	movw	r24, r28
     6e2:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
		external_interrupt_init(interrupt2,rising_edge);
     6e6:	63 e0       	ldi	r22, 0x03	; 3
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	0e 94 da 05 	call	0xbb4	; 0xbb4 <external_interrupt_init>
	}
	else
	{
		return E_NOK;
	}
}
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	08 95       	ret

000006f8 <ULTRASONIC_GetDist>:


E_STATUS ULTRASONIC_GetDist(ptr_float32_t distance)
{
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	ec 01       	movw	r28, r24
	
	if((ULTRASONIC_Trigger_PORT >= DIO_PORTA) && (ULTRASONIC_Trigger_PORT <= DIO_PORTD)
	&&(ULTRASONIC_Trigger_PIN>=PIN_0)&&(ULTRASONIC_Trigger_PIN<=PIN_7))
	{
		DIO_WritePIN(ULTRASONIC_Trigger_PORT, ULTRASONIC_Trigger_PIN, LOW);
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));


void _delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     708:	85 e0       	ldi	r24, 0x05	; 5
     70a:	8a 95       	dec	r24
     70c:	f1 f7       	brne	.-4      	; 0x70a <ULTRASONIC_GetDist+0x12>
		_delay_us(2);
		DIO_WritePIN(ULTRASONIC_Trigger_PORT, ULTRASONIC_Trigger_PIN, HIGH);
     70e:	41 e0       	ldi	r20, 0x01	; 1
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
     718:	8a e1       	ldi	r24, 0x1A	; 26
     71a:	8a 95       	dec	r24
     71c:	f1 f7       	brne	.-4      	; 0x71a <ULTRASONIC_GetDist+0x22>
		_delay_us(10);
		DIO_WritePIN(ULTRASONIC_Trigger_PORT, ULTRASONIC_Trigger_PIN, LOW);
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	0e 94 59 05 	call	0xab2	; 0xab2 <DIO_WritePIN>
		/*(registerReading*time of tick*speed of sound)/2*/
		/*time of tick =1024/8000000=128*10^-6 S = 128Ms*/
		/*dist = (Reading * 128 * 0.034)/2*/
		*distance=g_timer1*2.176;
     728:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <g_timer1>
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 08 09 	call	0x1210	; 0x1210 <__floatsisf>
     736:	26 e9       	ldi	r18, 0x96	; 150
     738:	33 e4       	ldi	r19, 0x43	; 67
     73a:	4b e0       	ldi	r20, 0x0B	; 11
     73c:	50 e4       	ldi	r21, 0x40	; 64
     73e:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsf3>
     742:	68 83       	st	Y, r22
     744:	79 83       	std	Y+1, r23	; 0x01
     746:	8a 83       	std	Y+2, r24	; 0x02
     748:	9b 83       	std	Y+3, r25	; 0x03
	else
	{
		return E_NOK;
	}
	
}
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <__vector_3>:

ISR(INT2_vect)
{
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1
     75c:	2f 93       	push	r18
     75e:	3f 93       	push	r19
     760:	4f 93       	push	r20
     762:	5f 93       	push	r21
     764:	6f 93       	push	r22
     766:	7f 93       	push	r23
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	af 93       	push	r26
     76e:	bf 93       	push	r27
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
	g_tick++;
     774:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
     778:	8f 5f       	subi	r24, 0xFF	; 255
     77a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
	if(g_tick==1)
     77e:	81 30       	cpi	r24, 0x01	; 1
     780:	39 f4       	brne	.+14     	; 0x790 <__vector_3+0x3e>
	{
		TIM_voidInitialize(TIMER_1);
     782:	0e 94 a2 06 	call	0xd44	; 0xd44 <TIM_voidInitialize>
		external_interrupt_init(interrupt2,falling_edge);
     786:	62 e0       	ldi	r22, 0x02	; 2
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <external_interrupt_init>
     78e:	0f c0       	rjmp	.+30     	; 0x7ae <__vector_3+0x5c>
	}
	else if(g_tick==2)
     790:	82 30       	cpi	r24, 0x02	; 2
     792:	69 f4       	brne	.+26     	; 0x7ae <__vector_3+0x5c>
	{
		g_timer1=TCNT1;
     794:	8c b5       	in	r24, 0x2c	; 44
     796:	9d b5       	in	r25, 0x2d	; 45
     798:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <g_timer1>
		external_interrupt_init(interrupt2,rising_edge);
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	0e 94 da 05 	call	0xbb4	; 0xbb4 <external_interrupt_init>
		TIM_uint8_tDeInit(TIMER_1);
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	0e 94 e7 06 	call	0xdce	; 0xdce <TIM_uint8_tDeInit>
		g_tick=0;
     7aa:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
	}
	else
	{
		
	}
}
     7ae:	ff 91       	pop	r31
     7b0:	ef 91       	pop	r30
     7b2:	bf 91       	pop	r27
     7b4:	af 91       	pop	r26
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	7f 91       	pop	r23
     7bc:	6f 91       	pop	r22
     7be:	5f 91       	pop	r21
     7c0:	4f 91       	pop	r20
     7c2:	3f 91       	pop	r19
     7c4:	2f 91       	pop	r18
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <reverse>:
	{
		u8_counter++;
	}
	
	return u8_counter;
}
     7d0:	9c 01       	movw	r18, r24
     7d2:	61 50       	subi	r22, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0c c0       	rjmp	.+24     	; 0x7f0 <reverse+0x20>
     7d8:	d9 01       	movw	r26, r18
     7da:	a9 0f       	add	r26, r25
     7dc:	b1 1d       	adc	r27, r1
     7de:	8c 91       	ld	r24, X
     7e0:	f9 01       	movw	r30, r18
     7e2:	e6 0f       	add	r30, r22
     7e4:	f1 1d       	adc	r31, r1
     7e6:	40 81       	ld	r20, Z
     7e8:	4c 93       	st	X, r20
     7ea:	80 83       	st	Z, r24
     7ec:	9f 5f       	subi	r25, 0xFF	; 255
     7ee:	61 50       	subi	r22, 0x01	; 1
     7f0:	96 17       	cp	r25, r22
     7f2:	90 f3       	brcs	.-28     	; 0x7d8 <reverse+0x8>
     7f4:	08 95       	ret

000007f6 <intToStr>:
* @param [in]  string   -  pointer to the string.
*
* @return function error state.
*/
uint8_t intToStr(uint32_t x, uint8_t str[], uint32_t d)
{
     7f6:	4f 92       	push	r4
     7f8:	5f 92       	push	r5
     7fa:	6f 92       	push	r6
     7fc:	7f 92       	push	r7
     7fe:	8f 92       	push	r8
     800:	9f 92       	push	r9
     802:	af 92       	push	r10
     804:	bf 92       	push	r11
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	ea 01       	movw	r28, r20
     814:	28 01       	movw	r4, r16
     816:	39 01       	movw	r6, r18
	
	uint32_t u8_iterator = 0;
	if (x == 0)
     818:	61 15       	cp	r22, r1
     81a:	71 05       	cpc	r23, r1
     81c:	81 05       	cpc	r24, r1
     81e:	91 05       	cpc	r25, r1
     820:	b9 f1       	breq	.+110    	; 0x890 <__stack+0x31>
     822:	81 2c       	mov	r8, r1
     824:	91 2c       	mov	r9, r1
     826:	54 01       	movw	r10, r8
     828:	15 c0       	rjmp	.+42     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
	{
		return '0';
	}
	while (x)
	{
		str[u8_iterator++] = (x % 10) + '0';
     82a:	7e 01       	movw	r14, r28
     82c:	e8 0c       	add	r14, r8
     82e:	f9 1c       	adc	r15, r9
     830:	2a e0       	ldi	r18, 0x0A	; 10
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	0e 94 af 0b 	call	0x175e	; 0x175e <__udivmodsi4>
     83c:	60 5d       	subi	r22, 0xD0	; 208
     83e:	f7 01       	movw	r30, r14
     840:	60 83       	st	Z, r22
		x = x / 10;
     842:	62 2f       	mov	r22, r18
     844:	73 2f       	mov	r23, r19
     846:	84 2f       	mov	r24, r20
     848:	95 2f       	mov	r25, r21
	{
		return '0';
	}
	while (x)
	{
		str[u8_iterator++] = (x % 10) + '0';
     84a:	ff ef       	ldi	r31, 0xFF	; 255
     84c:	8f 1a       	sub	r8, r31
     84e:	9f 0a       	sbc	r9, r31
     850:	af 0a       	sbc	r10, r31
     852:	bf 0a       	sbc	r11, r31
	uint32_t u8_iterator = 0;
	if (x == 0)
	{
		return '0';
	}
	while (x)
     854:	61 15       	cp	r22, r1
     856:	71 05       	cpc	r23, r1
     858:	81 05       	cpc	r24, r1
     85a:	91 05       	cpc	r25, r1
     85c:	31 f7       	brne	.-52     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     85e:	0a c0       	rjmp	.+20     	; 0x874 <__stack+0x15>
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (u8_iterator < d)
	str[u8_iterator++] = '0';
     860:	fe 01       	movw	r30, r28
     862:	e8 0d       	add	r30, r8
     864:	f9 1d       	adc	r31, r9
     866:	80 e3       	ldi	r24, 0x30	; 48
     868:	80 83       	st	Z, r24
     86a:	2f ef       	ldi	r18, 0xFF	; 255
     86c:	82 1a       	sub	r8, r18
     86e:	92 0a       	sbc	r9, r18
     870:	a2 0a       	sbc	r10, r18
     872:	b2 0a       	sbc	r11, r18
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (u8_iterator < d)
     874:	84 14       	cp	r8, r4
     876:	95 04       	cpc	r9, r5
     878:	a6 04       	cpc	r10, r6
     87a:	b7 04       	cpc	r11, r7
     87c:	88 f3       	brcs	.-30     	; 0x860 <__stack+0x1>
	str[u8_iterator++] = '0';
	
	reverse(str, u8_iterator);
     87e:	18 2d       	mov	r17, r8
     880:	68 2d       	mov	r22, r8
     882:	ce 01       	movw	r24, r28
     884:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <reverse>
	str[u8_iterator] = END_OF_STRING;
     888:	c8 0d       	add	r28, r8
     88a:	d9 1d       	adc	r29, r9
     88c:	18 82       	st	Y, r1
	return u8_iterator;
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
{
	
	uint32_t u8_iterator = 0;
	if (x == 0)
	{
		return '0';
     890:	10 e3       	ldi	r17, 0x30	; 48
	str[u8_iterator++] = '0';
	
	reverse(str, u8_iterator);
	str[u8_iterator] = END_OF_STRING;
	return u8_iterator;
}
     892:	81 2f       	mov	r24, r17
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	bf 90       	pop	r11
     8a2:	af 90       	pop	r10
     8a4:	9f 90       	pop	r9
     8a6:	8f 90       	pop	r8
     8a8:	7f 90       	pop	r7
     8aa:	6f 90       	pop	r6
     8ac:	5f 90       	pop	r5
     8ae:	4f 90       	pop	r4
     8b0:	08 95       	ret

000008b2 <ftos>:

void ftos(float32_t n, ptr_uint8_t res, uint8_t afterpoint)
{
     8b2:	4f 92       	push	r4
     8b4:	5f 92       	push	r5
     8b6:	6f 92       	push	r6
     8b8:	7f 92       	push	r7
     8ba:	8f 92       	push	r8
     8bc:	9f 92       	push	r9
     8be:	bf 92       	push	r11
     8c0:	cf 92       	push	r12
     8c2:	df 92       	push	r13
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	6b 01       	movw	r12, r22
     8d2:	7c 01       	movw	r14, r24
     8d4:	4a 01       	movw	r8, r20
     8d6:	b2 2e       	mov	r11, r18
	// Extract integer part
	uint32_t ipart = (uint32_t) n;
     8d8:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixunssfsi>
     8dc:	2b 01       	movw	r4, r22
     8de:	3c 01       	movw	r6, r24
	
	// Extract floating part
	float32_t fpart = n - (float32_t)ipart;
     8e0:	0e 94 06 09 	call	0x120c	; 0x120c <__floatunsisf>
     8e4:	9b 01       	movw	r18, r22
     8e6:	ac 01       	movw	r20, r24
     8e8:	c7 01       	movw	r24, r14
     8ea:	b6 01       	movw	r22, r12
     8ec:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__subsf3>
     8f0:	6b 01       	movw	r12, r22
     8f2:	7c 01       	movw	r14, r24
	
	// convert integer part to string
	uint32_t u32_iterator = intToStr(ipart, res, 0);
     8f4:	00 e0       	ldi	r16, 0x00	; 0
     8f6:	10 e0       	ldi	r17, 0x00	; 0
     8f8:	98 01       	movw	r18, r16
     8fa:	a4 01       	movw	r20, r8
     8fc:	c3 01       	movw	r24, r6
     8fe:	b2 01       	movw	r22, r4
     900:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <intToStr>
	
	// check for display option after point
	if (afterpoint != 0) {
     904:	bb 20       	and	r11, r11
     906:	39 f1       	breq	.+78     	; 0x956 <ftos+0xa4>
		res[u32_iterator] = '.'; // add dot
     908:	c8 2f       	mov	r28, r24
     90a:	d0 e0       	ldi	r29, 0x00	; 0
     90c:	f4 01       	movw	r30, r8
     90e:	ec 0f       	add	r30, r28
     910:	fd 1f       	adc	r31, r29
     912:	8e e2       	ldi	r24, 0x2E	; 46
     914:	80 83       	st	Z, r24
		
		// Get the value of fraction part up to given no.
		// of points after dot. The third parameter
		// is needed to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
     916:	4b 2c       	mov	r4, r11
     918:	51 2c       	mov	r5, r1
     91a:	61 2c       	mov	r6, r1
     91c:	71 2c       	mov	r7, r1
     91e:	c3 01       	movw	r24, r6
     920:	b2 01       	movw	r22, r4
     922:	0e 94 06 09 	call	0x120c	; 0x120c <__floatunsisf>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 e2       	ldi	r24, 0x20	; 32
     930:	91 e4       	ldi	r25, 0x41	; 65
     932:	0e 94 2a 0a 	call	0x1454	; 0x1454 <pow>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	c7 01       	movw	r24, r14
     93c:	b6 01       	movw	r22, r12
     93e:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsf3>
		
		intToStr((uint32_t)fpart, res + u32_iterator + 1, afterpoint);
     942:	21 96       	adiw	r28, 0x01	; 1
     944:	c8 0d       	add	r28, r8
     946:	d9 1d       	adc	r29, r9
     948:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixunssfsi>
     94c:	93 01       	movw	r18, r6
     94e:	82 01       	movw	r16, r4
     950:	ae 01       	movw	r20, r28
     952:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <intToStr>
	}
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	9f 90       	pop	r9
     96a:	8f 90       	pop	r8
     96c:	7f 90       	pop	r7
     96e:	6f 90       	pop	r6
     970:	5f 90       	pop	r5
     972:	4f 90       	pop	r4
     974:	08 95       	ret

00000976 <main>:

#include "APP/Car/CarControl.h"

int main(void)
{
	APP_INIT();
     976:	0e 94 8a 00 	call	0x114	; 0x114 <APP_INIT>
	
	while (1)
	{
		
		APP_UPDATE();
     97a:	0e 94 a6 00 	call	0x14c	; 0x14c <APP_UPDATE>
     97e:	fd cf       	rjmp	.-6      	; 0x97a <main+0x4>

00000980 <DIO_Init>:

#include "dio.h"


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
     980:	fc 01       	movw	r30, r24
	E_STATUS au8_error=E_NOK;
	if(((configurations->port <= DIO_PORTD)&&(configurations->port >= DIO_PORTA))&&
     982:	90 81       	ld	r25, Z
     984:	94 30       	cpi	r25, 0x04	; 4
     986:	08 f0       	brcs	.+2      	; 0x98a <DIO_Init+0xa>
     988:	8e c0       	rjmp	.+284    	; 0xaa6 <DIO_Init+0x126>
	((configurations->pin <= PIN_7) && (configurations->pin >= PIN_0)))
     98a:	81 81       	ldd	r24, Z+1	; 0x01


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
	E_STATUS au8_error=E_NOK;
	if(((configurations->port <= DIO_PORTD)&&(configurations->port >= DIO_PORTA))&&
     98c:	88 30       	cpi	r24, 0x08	; 8
     98e:	08 f0       	brcs	.+2      	; 0x992 <DIO_Init+0x12>
     990:	8c c0       	rjmp	.+280    	; 0xaaa <DIO_Init+0x12a>
	((configurations->pin <= PIN_7) && (configurations->pin >= PIN_0)))
	{
		
		switch(configurations->port)
     992:	91 30       	cpi	r25, 0x01	; 1
     994:	41 f1       	breq	.+80     	; 0x9e6 <DIO_Init+0x66>
     996:	38 f0       	brcs	.+14     	; 0x9a6 <DIO_Init+0x26>
     998:	92 30       	cpi	r25, 0x02	; 2
     99a:	09 f4       	brne	.+2      	; 0x99e <DIO_Init+0x1e>
     99c:	44 c0       	rjmp	.+136    	; 0xa26 <DIO_Init+0xa6>
     99e:	93 30       	cpi	r25, 0x03	; 3
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <DIO_Init+0x24>
     9a2:	61 c0       	rjmp	.+194    	; 0xa66 <DIO_Init+0xe6>
     9a4:	84 c0       	rjmp	.+264    	; 0xaae <DIO_Init+0x12e>
		{
			case DIO_PORTA:
			{
				if(configurations->dir == OUTPUT)
     9a6:	92 81       	ldd	r25, Z+2	; 0x02
     9a8:	91 30       	cpi	r25, 0x01	; 1
     9aa:	71 f4       	brne	.+28     	; 0x9c8 <DIO_Init+0x48>
				{	
					SET_BIT(PORTA_DIR,configurations->pin);
     9ac:	4a b3       	in	r20, 0x1a	; 26
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	b9 01       	movw	r22, r18
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <DIO_Init+0x3a>
     9b6:	66 0f       	add	r22, r22
     9b8:	77 1f       	adc	r23, r23
     9ba:	8a 95       	dec	r24
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <DIO_Init+0x36>
     9be:	cb 01       	movw	r24, r22
     9c0:	84 2b       	or	r24, r20
     9c2:	8a bb       	out	0x1a, r24	; 26
					au8_error = E_OK;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	08 95       	ret
				}
				else
				{
					RESET_BIT(PORTA_DIR,configurations->pin);
     9c8:	4a b3       	in	r20, 0x1a	; 26
     9ca:	21 e0       	ldi	r18, 0x01	; 1
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	b9 01       	movw	r22, r18
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <DIO_Init+0x56>
     9d2:	66 0f       	add	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	8a 95       	dec	r24
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <DIO_Init+0x52>
     9da:	cb 01       	movw	r24, r22
     9dc:	80 95       	com	r24
     9de:	84 23       	and	r24, r20
     9e0:	8a bb       	out	0x1a, r24	; 26
#include "dio.h"


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
	E_STATUS au8_error=E_NOK;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	08 95       	ret
				
				break;
			}
			case DIO_PORTB:
			{
				if(configurations->dir == OUTPUT)
     9e6:	92 81       	ldd	r25, Z+2	; 0x02
     9e8:	91 30       	cpi	r25, 0x01	; 1
     9ea:	71 f4       	brne	.+28     	; 0xa08 <DIO_Init+0x88>
				{
					SET_BIT(PORTB_DIR,configurations->pin);
     9ec:	47 b3       	in	r20, 0x17	; 23
     9ee:	21 e0       	ldi	r18, 0x01	; 1
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	b9 01       	movw	r22, r18
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <DIO_Init+0x7a>
     9f6:	66 0f       	add	r22, r22
     9f8:	77 1f       	adc	r23, r23
     9fa:	8a 95       	dec	r24
     9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <DIO_Init+0x76>
     9fe:	cb 01       	movw	r24, r22
     a00:	84 2b       	or	r24, r20
     a02:	87 bb       	out	0x17, r24	; 23
				}else
				{
					RESET_BIT(PORTB_DIR,configurations->pin);
				}
				au8_error = E_OK;
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	08 95       	ret
				if(configurations->dir == OUTPUT)
				{
					SET_BIT(PORTB_DIR,configurations->pin);
				}else
				{
					RESET_BIT(PORTB_DIR,configurations->pin);
     a08:	47 b3       	in	r20, 0x17	; 23
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	b9 01       	movw	r22, r18
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <DIO_Init+0x96>
     a12:	66 0f       	add	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	8a 95       	dec	r24
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <DIO_Init+0x92>
     a1a:	cb 01       	movw	r24, r22
     a1c:	80 95       	com	r24
     a1e:	84 23       	and	r24, r20
     a20:	87 bb       	out	0x17, r24	; 23
				}
				au8_error = E_OK;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 95       	ret
				break;
			}
			case DIO_PORTC:
			{
				if(configurations->dir == OUTPUT)
     a26:	92 81       	ldd	r25, Z+2	; 0x02
     a28:	91 30       	cpi	r25, 0x01	; 1
     a2a:	71 f4       	brne	.+28     	; 0xa48 <DIO_Init+0xc8>
				{
					SET_BIT(PORTC_DIR,configurations->pin);
     a2c:	44 b3       	in	r20, 0x14	; 20
     a2e:	21 e0       	ldi	r18, 0x01	; 1
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	b9 01       	movw	r22, r18
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_Init+0xba>
     a36:	66 0f       	add	r22, r22
     a38:	77 1f       	adc	r23, r23
     a3a:	8a 95       	dec	r24
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_Init+0xb6>
     a3e:	cb 01       	movw	r24, r22
     a40:	84 2b       	or	r24, r20
     a42:	84 bb       	out	0x14, r24	; 20
				}else
				{
					RESET_BIT(PORTC_DIR,configurations->pin);
				}
				au8_error = E_OK;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	08 95       	ret
				if(configurations->dir == OUTPUT)
				{
					SET_BIT(PORTC_DIR,configurations->pin);
				}else
				{
					RESET_BIT(PORTC_DIR,configurations->pin);
     a48:	44 b3       	in	r20, 0x14	; 20
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	b9 01       	movw	r22, r18
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <DIO_Init+0xd6>
     a52:	66 0f       	add	r22, r22
     a54:	77 1f       	adc	r23, r23
     a56:	8a 95       	dec	r24
     a58:	e2 f7       	brpl	.-8      	; 0xa52 <DIO_Init+0xd2>
     a5a:	cb 01       	movw	r24, r22
     a5c:	80 95       	com	r24
     a5e:	84 23       	and	r24, r20
     a60:	84 bb       	out	0x14, r24	; 20
				}
				au8_error = E_OK;
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	08 95       	ret
				break;
			}
			case DIO_PORTD:
			{
				if(configurations->dir == OUTPUT)
     a66:	92 81       	ldd	r25, Z+2	; 0x02
     a68:	91 30       	cpi	r25, 0x01	; 1
     a6a:	71 f4       	brne	.+28     	; 0xa88 <DIO_Init+0x108>
				{
					SET_BIT(PORTD_DIR,configurations->pin);
     a6c:	41 b3       	in	r20, 0x11	; 17
     a6e:	21 e0       	ldi	r18, 0x01	; 1
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	b9 01       	movw	r22, r18
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <DIO_Init+0xfa>
     a76:	66 0f       	add	r22, r22
     a78:	77 1f       	adc	r23, r23
     a7a:	8a 95       	dec	r24
     a7c:	e2 f7       	brpl	.-8      	; 0xa76 <DIO_Init+0xf6>
     a7e:	cb 01       	movw	r24, r22
     a80:	84 2b       	or	r24, r20
     a82:	81 bb       	out	0x11, r24	; 17
				}else
				{
					RESET_BIT(PORTD_DIR,configurations->pin);
				}
				au8_error = E_OK;
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	08 95       	ret
				if(configurations->dir == OUTPUT)
				{
					SET_BIT(PORTD_DIR,configurations->pin);
				}else
				{
					RESET_BIT(PORTD_DIR,configurations->pin);
     a88:	41 b3       	in	r20, 0x11	; 17
     a8a:	21 e0       	ldi	r18, 0x01	; 1
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	b9 01       	movw	r22, r18
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <DIO_Init+0x116>
     a92:	66 0f       	add	r22, r22
     a94:	77 1f       	adc	r23, r23
     a96:	8a 95       	dec	r24
     a98:	e2 f7       	brpl	.-8      	; 0xa92 <DIO_Init+0x112>
     a9a:	cb 01       	movw	r24, r22
     a9c:	80 95       	com	r24
     a9e:	84 23       	and	r24, r20
     aa0:	81 bb       	out	0x11, r24	; 17
				}
				au8_error = E_OK;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	08 95       	ret
#include "dio.h"


E_STATUS DIO_Init(ST_DIO_config* configurations)
{	
	E_STATUS au8_error=E_NOK;
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 95       	ret
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	08 95       	ret
     aae:	80 e0       	ldi	r24, 0x00	; 0
			}

		}
	}
	return au8_error;
}
     ab0:	08 95       	ret

00000ab2 <DIO_WritePIN>:


E_STATUS DIO_WritePIN(uint8_t port,EN_pins pin,uint8_t data)
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	08 f0       	brcs	.+2      	; 0xab8 <DIO_WritePIN+0x6>
     ab6:	78 c0       	rjmp	.+240    	; 0xba8 <DIO_WritePIN+0xf6>
     ab8:	68 30       	cpi	r22, 0x08	; 8
     aba:	08 f0       	brcs	.+2      	; 0xabe <DIO_WritePIN+0xc>
     abc:	77 c0       	rjmp	.+238    	; 0xbac <DIO_WritePIN+0xfa>
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
		switch(port)
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	11 f1       	breq	.+68     	; 0xb06 <DIO_WritePIN+0x54>
     ac2:	30 f0       	brcs	.+12     	; 0xad0 <DIO_WritePIN+0x1e>
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	d1 f1       	breq	.+116    	; 0xb3c <DIO_WritePIN+0x8a>
     ac8:	83 30       	cpi	r24, 0x03	; 3
     aca:	09 f4       	brne	.+2      	; 0xace <DIO_WritePIN+0x1c>
     acc:	52 c0       	rjmp	.+164    	; 0xb72 <DIO_WritePIN+0xc0>
     ace:	70 c0       	rjmp	.+224    	; 0xbb0 <DIO_WritePIN+0xfe>
		{
			case DIO_PORTA:
			{
				if(data == HIGH)
     ad0:	41 30       	cpi	r20, 0x01	; 1
     ad2:	61 f4       	brne	.+24     	; 0xaec <DIO_WritePIN+0x3a>
				{
					SET_BIT(PORTA_DATA,pin);
     ad4:	2b b3       	in	r18, 0x1b	; 27
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <DIO_WritePIN+0x2e>
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	6a 95       	dec	r22
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <DIO_WritePIN+0x2a>
     ae4:	82 2b       	or	r24, r18
     ae6:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTA_DATA,pin);
				}else
				{
					RESET_BIT(PORTA_DATA,pin);
     aec:	2b b3       	in	r18, 0x1b	; 27
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <DIO_WritePIN+0x46>
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	6a 95       	dec	r22
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <DIO_WritePIN+0x42>
     afc:	80 95       	com	r24
     afe:	82 23       	and	r24, r18
     b00:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	08 95       	ret
				}
				break;
			}
			case DIO_PORTB:
			{
				if(data == HIGH)
     b06:	41 30       	cpi	r20, 0x01	; 1
     b08:	61 f4       	brne	.+24     	; 0xb22 <DIO_WritePIN+0x70>
				{
					SET_BIT(PORTB_DATA,pin);
     b0a:	28 b3       	in	r18, 0x18	; 24
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <DIO_WritePIN+0x64>
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	6a 95       	dec	r22
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <DIO_WritePIN+0x60>
     b1a:	82 2b       	or	r24, r18
     b1c:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTB_DATA,pin);
				}else
				{
					RESET_BIT(PORTB_DATA,pin);
     b22:	28 b3       	in	r18, 0x18	; 24
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <DIO_WritePIN+0x7c>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	6a 95       	dec	r22
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <DIO_WritePIN+0x78>
     b32:	80 95       	com	r24
     b34:	82 23       	and	r24, r18
     b36:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	08 95       	ret
				}
				break;
			}
			case DIO_PORTC:
			{
				if(data == HIGH)
     b3c:	41 30       	cpi	r20, 0x01	; 1
     b3e:	61 f4       	brne	.+24     	; 0xb58 <DIO_WritePIN+0xa6>
				{
					SET_BIT(PORTC_DATA,pin);
     b40:	25 b3       	in	r18, 0x15	; 21
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <DIO_WritePIN+0x9a>
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	6a 95       	dec	r22
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <DIO_WritePIN+0x96>
     b50:	82 2b       	or	r24, r18
     b52:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTC_DATA,pin);
				}else
				{
					RESET_BIT(PORTC_DATA,pin);
     b58:	25 b3       	in	r18, 0x15	; 21
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <DIO_WritePIN+0xb2>
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	6a 95       	dec	r22
     b66:	e2 f7       	brpl	.-8      	; 0xb60 <DIO_WritePIN+0xae>
     b68:	80 95       	com	r24
     b6a:	82 23       	and	r24, r18
     b6c:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	08 95       	ret
				}
				break;
			}
			case DIO_PORTD:
			{
				if(data == HIGH)
     b72:	41 30       	cpi	r20, 0x01	; 1
     b74:	61 f4       	brne	.+24     	; 0xb8e <DIO_WritePIN+0xdc>
				{
					SET_BIT(PORTD_DATA,pin);
     b76:	22 b3       	in	r18, 0x12	; 18
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <DIO_WritePIN+0xd0>
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	6a 95       	dec	r22
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <DIO_WritePIN+0xcc>
     b86:	82 2b       	or	r24, r18
     b88:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTD_DATA,pin);
				}else
				{
					RESET_BIT(PORTD_DATA,pin);
     b8e:	22 b3       	in	r18, 0x12	; 18
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <DIO_WritePIN+0xe8>
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	6a 95       	dec	r22
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <DIO_WritePIN+0xe4>
     b9e:	80 95       	com	r24
     ba0:	82 23       	and	r24, r18
     ba2:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error=E_NOK;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	08 95       	ret
}


E_STATUS DIO_WritePIN(uint8_t port,EN_pins pin,uint8_t data)
{
	E_STATUS au8_error=E_NOK;
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 95       	ret
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	08 95       	ret
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
			}

		}
	}
	return au8_error;
}
     bb2:	08 95       	ret

00000bb4 <external_interrupt_init>:

#include "interrupt.h"

E_STATUS external_interrupt_init(uint8_t external_INT_num, uint8_t edge)
{
	SREG |=(1<<7);
     bb4:	9f b7       	in	r25, 0x3f	; 63
     bb6:	90 68       	ori	r25, 0x80	; 128
     bb8:	9f bf       	out	0x3f, r25	; 63
	if(edge == low_lvl || edge == any_logic_lvl || edge == falling_edge || edge == rising_edge )
     bba:	64 30       	cpi	r22, 0x04	; 4
     bbc:	08 f0       	brcs	.+2      	; 0xbc0 <external_interrupt_init+0xc>
     bbe:	45 c0       	rjmp	.+138    	; 0xc4a <external_interrupt_init+0x96>
	{
		if(external_INT_num == interrupt0)
     bc0:	81 11       	cpse	r24, r1
     bc2:	14 c0       	rjmp	.+40     	; 0xbec <external_interrupt_init+0x38>
		{
			MCUCR =( MCUCR & 0xfc) | (edge & 0x03);
     bc4:	85 b7       	in	r24, 0x35	; 53
     bc6:	8c 7f       	andi	r24, 0xFC	; 252
     bc8:	63 70       	andi	r22, 0x03	; 3
     bca:	68 2b       	or	r22, r24
     bcc:	65 bf       	out	0x35, r22	; 53
			GICR |= (1<<int0_bit);
     bce:	8b b7       	in	r24, 0x3b	; 59
     bd0:	80 64       	ori	r24, 0x40	; 64
     bd2:	8b bf       	out	0x3b, r24	; 59
			configs.port = DIO_PORTD;
     bd4:	e0 e9       	ldi	r30, 0x90	; 144
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	80 83       	st	Z, r24
			configs.pin = PIN_2;
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = INPUT;
     be0:	12 82       	std	Z+2, r1	; 0x02
			DIO_Init(&configs);
     be2:	cf 01       	movw	r24, r30
     be4:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
			return E_OK;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	08 95       	ret
	
		}
		else if(external_INT_num == interrupt1)
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	99 f4       	brne	.+38     	; 0xc16 <external_interrupt_init+0x62>
		{
			MCUCR =( MCUCR & 0xf3) | (edge & 0x0c);
     bf0:	85 b7       	in	r24, 0x35	; 53
     bf2:	83 7f       	andi	r24, 0xF3	; 243
     bf4:	6c 70       	andi	r22, 0x0C	; 12
     bf6:	68 2b       	or	r22, r24
     bf8:	65 bf       	out	0x35, r22	; 53
			GICR |= (1<<int1_bit);
     bfa:	8b b7       	in	r24, 0x3b	; 59
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	8b bf       	out	0x3b, r24	; 59
			configs.port = DIO_PORTD;
     c00:	e0 e9       	ldi	r30, 0x90	; 144
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	80 83       	st	Z, r24
			configs.pin = PIN_3;
     c08:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = INPUT;
     c0a:	12 82       	std	Z+2, r1	; 0x02
			DIO_Init(&configs);
     c0c:	cf 01       	movw	r24, r30
     c0e:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
			return E_OK;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 95       	ret
	
		}
		else if(external_INT_num == interrupt2)
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	d1 f4       	brne	.+52     	; 0xc4e <external_interrupt_init+0x9a>
		{
			if(edge == falling_edge)
     c1a:	62 30       	cpi	r22, 0x02	; 2
     c1c:	21 f4       	brne	.+8      	; 0xc26 <external_interrupt_init+0x72>
			{
				MCUCSR &=~(1<<ISC2);
     c1e:	84 b7       	in	r24, 0x34	; 52
     c20:	8f 7b       	andi	r24, 0xBF	; 191
     c22:	84 bf       	out	0x34, r24	; 52
     c24:	03 c0       	rjmp	.+6      	; 0xc2c <external_interrupt_init+0x78>
			}
			else
			{
				MCUCSR |=(1<<ISC2);
     c26:	84 b7       	in	r24, 0x34	; 52
     c28:	80 64       	ori	r24, 0x40	; 64
     c2a:	84 bf       	out	0x34, r24	; 52
			}
			GICR |= (1<<int2_bit);
     c2c:	8b b7       	in	r24, 0x3b	; 59
     c2e:	80 62       	ori	r24, 0x20	; 32
     c30:	8b bf       	out	0x3b, r24	; 59
			configs.port = DIO_PORTB;
     c32:	e0 e9       	ldi	r30, 0x90	; 144
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	80 83       	st	Z, r24
			configs.pin = PIN_2;
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = INPUT;
     c3e:	12 82       	std	Z+2, r1	; 0x02
			DIO_Init(&configs);
     c40:	cf 01       	movw	r24, r30
     c42:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
			return E_OK;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	08 95       	ret
			return E_NOK;
		}
	}
	else
	{
		return E_NOK;
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	08 95       	ret
			return E_OK;
			
		}
		else
		{
			return E_NOK;
     c4e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return E_NOK;
	}
}
     c50:	08 95       	ret

00000c52 <PWM_InitPins>:
/******************************************************************************
*                         LOCAL FUNCTIONS									  *
*******************************************************************************/
uint8_t PWM_InitPins(PWM_TIMER TimerNo)
{
	switch (TimerNo)
     c52:	88 23       	and	r24, r24
     c54:	19 f0       	breq	.+6      	; 0xc5c <PWM_InitPins+0xa>
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	69 f0       	breq	.+26     	; 0xc74 <PWM_InitPins+0x22>
     c5a:	19 c0       	rjmp	.+50     	; 0xc8e <PWM_InitPins+0x3c>
	{
		{
			case  PWM_TIMER0:
			configs.port = DIO_PORTB;
     c5c:	e0 e9       	ldi	r30, 0x90	; 144
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	80 83       	st	Z, r24
			configs.pin = PIN_3;
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	91 83       	std	Z+1, r25	; 0x01
			configs.dir = OUTPUT;
     c68:	82 83       	std	Z+2, r24	; 0x02
			DIO_Init(&configs);
     c6a:	cf 01       	movw	r24, r30
     c6c:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
		default:
		{
			return E_NOK;
		}
	}
	return E_OK;
     c70:	81 e0       	ldi	r24, 0x01	; 1
			case  PWM_TIMER0:
			configs.port = DIO_PORTB;
			configs.pin = PIN_3;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
     c72:	08 95       	ret
		}
		case  PWM_TIMER2:
		{
			configs.port = DIO_PORTD;
     c74:	e0 e9       	ldi	r30, 0x90	; 144
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	83 e0       	ldi	r24, 0x03	; 3
     c7a:	80 83       	st	Z, r24
			configs.pin = PIN_7;
     c7c:	87 e0       	ldi	r24, 0x07	; 7
     c7e:	81 83       	std	Z+1, r24	; 0x01
			configs.dir = OUTPUT;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	82 83       	std	Z+2, r24	; 0x02
			DIO_Init(&configs);
     c84:	cf 01       	movw	r24, r30
     c86:	0e 94 c0 04 	call	0x980	; 0x980 <DIO_Init>
		default:
		{
			return E_NOK;
		}
	}
	return E_OK;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
		{
			configs.port = DIO_PORTD;
			configs.pin = PIN_7;
			configs.dir = OUTPUT;
			DIO_Init(&configs);
			break;
     c8c:	08 95       	ret
		}
		default:
		{
			return E_NOK;
     c8e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return E_OK;
}
     c90:	08 95       	ret

00000c92 <PWM_START>:
/******************************************************************************
*                         APIS IMPLEMENTATION								  *
*******************************************************************************/

uint8_t PWM_START(PWM_TIMER TimerNo, uint8_t dutyCycle)
{
     c92:	cf 93       	push	r28
	if (dutyCycle > 100)
     c94:	65 36       	cpi	r22, 0x65	; 101
     c96:	08 f0       	brcs	.+2      	; 0xc9a <PWM_START+0x8>
     c98:	4e c0       	rjmp	.+156    	; 0xd36 <PWM_START+0xa4>
     c9a:	c8 2f       	mov	r28, r24
	{
		return E_NOK;
	}
	else
	{
		if (TimerNo == PWM_TIMER0)
     c9c:	81 11       	cpse	r24, r1
     c9e:	22 c0       	rjmp	.+68     	; 0xce4 <PWM_START+0x52>
		{
			TCCR0 |= PWM_TIMER0_MODE;
     ca0:	83 b7       	in	r24, 0x33	; 51
     ca2:	88 64       	ori	r24, 0x48	; 72
     ca4:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= PWM_TIMER0_PRESCALER;
     ca6:	83 b7       	in	r24, 0x33	; 51
     ca8:	81 60       	ori	r24, 0x01	; 1
     caa:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= PWM_TIMER0_OC0_MODE;
     cac:	83 b7       	in	r24, 0x33	; 51
     cae:	80 62       	ori	r24, 0x20	; 32
     cb0:	83 bf       	out	0x33, r24	; 51
			if (PWM_TIMER0_OC0_MODE == PWM_OC0_NONINVERTING_MODE)
			{
				if (dutyCycle == 0)
     cb2:	61 11       	cpse	r22, r1
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <PWM_START+0x28>
				{
					OCR0 = 0;
     cb6:	1c be       	out	0x3c, r1	; 60
     cb8:	38 c0       	rjmp	.+112    	; 0xd2a <PWM_START+0x98>
				}
				else
				{
					OCR0 = 2.56 * dutyCycle - 1;
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 08 09 	call	0x1210	; 0x1210 <__floatsisf>
     cc4:	2a e0       	ldi	r18, 0x0A	; 10
     cc6:	37 ed       	ldi	r19, 0xD7	; 215
     cc8:	43 e2       	ldi	r20, 0x23	; 35
     cca:	50 e4       	ldi	r21, 0x40	; 64
     ccc:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsf3>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e8       	ldi	r20, 0x80	; 128
     cd6:	5f e3       	ldi	r21, 0x3F	; 63
     cd8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__subsf3>
     cdc:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixunssfsi>
     ce0:	6c bf       	out	0x3c, r22	; 60
     ce2:	23 c0       	rjmp	.+70     	; 0xd2a <PWM_START+0x98>
				{
					OCR0 = 255 - 2.56 * dutyCycle;
				}
			}
		}
		else if (TimerNo == PWM_TIMER2)
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	49 f5       	brne	.+82     	; 0xd3a <PWM_START+0xa8>
		{
			TCCR2 |= PWM_TIMER2_MODE;
     ce8:	85 b5       	in	r24, 0x25	; 37
     cea:	88 64       	ori	r24, 0x48	; 72
     cec:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= PWM_TIMER2_PRESCALER;
     cee:	85 b5       	in	r24, 0x25	; 37
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	85 bd       	out	0x25, r24	; 37
			TCCR2 |= PWM_TIMER2_OC0_MODE;
     cf4:	85 b5       	in	r24, 0x25	; 37
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	85 bd       	out	0x25, r24	; 37
			if (PWM_TIMER2_MODE == PWM_MODE_FASTPWM)
			{
				if (PWM_TIMER2_OC0_MODE == PWM_OC0_NONINVERTING_MODE)
				{
					if (dutyCycle == 0)
     cfa:	61 11       	cpse	r22, r1
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <PWM_START+0x70>
					{
						OCR2 = 0;
     cfe:	13 bc       	out	0x23, r1	; 35
     d00:	14 c0       	rjmp	.+40     	; 0xd2a <PWM_START+0x98>
					}
					else
					{
						OCR2 = 2.56 * dutyCycle - 1;
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 08 09 	call	0x1210	; 0x1210 <__floatsisf>
     d0c:	2a e0       	ldi	r18, 0x0A	; 10
     d0e:	37 ed       	ldi	r19, 0xD7	; 215
     d10:	43 e2       	ldi	r20, 0x23	; 35
     d12:	50 e4       	ldi	r21, 0x40	; 64
     d14:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsf3>
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__subsf3>
     d24:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fixunssfsi>
     d28:	63 bd       	out	0x23, r22	; 35
		{
			return E_NOK;
		}
	}

	if (E_NOK == PWM_InitPins(TimerNo))
     d2a:	8c 2f       	mov	r24, r28
     d2c:	0e 94 29 06 	call	0xc52	; 0xc52 <PWM_InitPins>
     d30:	81 11       	cpse	r24, r1
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <PWM_START+0xac>
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <PWM_START+0xae>

uint8_t PWM_START(PWM_TIMER TimerNo, uint8_t dutyCycle)
{
	if (dutyCycle > 100)
	{
		return E_NOK;
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <PWM_START+0xae>
				}
			}
		}
		else
		{
			return E_NOK;
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <PWM_START+0xae>
	}
	else
	{
		
	}
	return E_OK;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
}
     d40:	cf 91       	pop	r28
     d42:	08 95       	ret

00000d44 <TIM_voidInitialize>:
	else
	{
		uint8_tTimerErrorState=Timer_FAIL;
	}
	return 	uint8_tTimerErrorState;
}
     d44:	81 11       	cpse	r24, r1
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <TIM_voidInitialize+0x2c>
     d48:	89 b7       	in	r24, 0x39	; 57
     d4a:	8e 7f       	andi	r24, 0xFE	; 254
     d4c:	89 bf       	out	0x39, r24	; 57
     d4e:	88 b7       	in	r24, 0x38	; 56
     d50:	81 60       	ori	r24, 0x01	; 1
     d52:	88 bf       	out	0x38, r24	; 56
     d54:	83 b7       	in	r24, 0x33	; 51
     d56:	87 7f       	andi	r24, 0xF7	; 247
     d58:	83 bf       	out	0x33, r24	; 51
     d5a:	83 b7       	in	r24, 0x33	; 51
     d5c:	8f 7b       	andi	r24, 0xBF	; 191
     d5e:	83 bf       	out	0x33, r24	; 51
     d60:	83 b7       	in	r24, 0x33	; 51
     d62:	85 60       	ori	r24, 0x05	; 5
     d64:	83 bf       	out	0x33, r24	; 51
     d66:	83 b7       	in	r24, 0x33	; 51
     d68:	8d 7f       	andi	r24, 0xFD	; 253
     d6a:	83 bf       	out	0x33, r24	; 51
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	08 95       	ret
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	a1 f4       	brne	.+40     	; 0xd9c <TIM_voidInitialize+0x58>
     d74:	89 b7       	in	r24, 0x39	; 57
     d76:	8f 7b       	andi	r24, 0xBF	; 191
     d78:	89 bf       	out	0x39, r24	; 57
     d7a:	88 b7       	in	r24, 0x38	; 56
     d7c:	80 64       	ori	r24, 0x40	; 64
     d7e:	88 bf       	out	0x38, r24	; 56
     d80:	85 b5       	in	r24, 0x25	; 37
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	85 bd       	out	0x25, r24	; 37
     d86:	85 b5       	in	r24, 0x25	; 37
     d88:	8f 7b       	andi	r24, 0xBF	; 191
     d8a:	85 bd       	out	0x25, r24	; 37
     d8c:	85 b5       	in	r24, 0x25	; 37
     d8e:	85 60       	ori	r24, 0x05	; 5
     d90:	85 bd       	out	0x25, r24	; 37
     d92:	85 b5       	in	r24, 0x25	; 37
     d94:	8d 7f       	andi	r24, 0xFD	; 253
     d96:	85 bd       	out	0x25, r24	; 37
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	08 95       	ret
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	a9 f4       	brne	.+42     	; 0xdca <TIM_voidInitialize+0x86>
     da0:	1f bc       	out	0x2f, r1	; 47
     da2:	89 b7       	in	r24, 0x39	; 57
     da4:	8b 7f       	andi	r24, 0xFB	; 251
     da6:	89 bf       	out	0x39, r24	; 57
     da8:	88 b7       	in	r24, 0x38	; 56
     daa:	84 60       	ori	r24, 0x04	; 4
     dac:	88 bf       	out	0x38, r24	; 56
     dae:	8e b5       	in	r24, 0x2e	; 46
     db0:	87 7f       	andi	r24, 0xF7	; 247
     db2:	8e bd       	out	0x2e, r24	; 46
     db4:	8e b5       	in	r24, 0x2e	; 46
     db6:	8f 7e       	andi	r24, 0xEF	; 239
     db8:	8e bd       	out	0x2e, r24	; 46
     dba:	8e b5       	in	r24, 0x2e	; 46
     dbc:	85 60       	ori	r24, 0x05	; 5
     dbe:	8e bd       	out	0x2e, r24	; 46
     dc0:	8e b5       	in	r24, 0x2e	; 46
     dc2:	8d 7f       	andi	r24, 0xFD	; 253
     dc4:	8e bd       	out	0x2e, r24	; 46
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	08 95       	ret
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	08 95       	ret

00000dce <TIM_uint8_tDeInit>:
     dce:	81 11       	cpse	r24, r1
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <TIM_uint8_tDeInit+0x12>
     dd2:	13 be       	out	0x33, r1	; 51
     dd4:	12 be       	out	0x32, r1	; 50
     dd6:	1c be       	out	0x3c, r1	; 60
     dd8:	89 b7       	in	r24, 0x39	; 57
     dda:	89 bf       	out	0x39, r24	; 57
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	08 95       	ret
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	59 f4       	brne	.+22     	; 0xdfa <TIM_uint8_tDeInit+0x2c>
     de4:	1f bc       	out	0x2f, r1	; 47
     de6:	1e bc       	out	0x2e, r1	; 46
     de8:	1d bc       	out	0x2d, r1	; 45
     dea:	1c bc       	out	0x2c, r1	; 44
     dec:	1b bc       	out	0x2b, r1	; 43
     dee:	1a bc       	out	0x2a, r1	; 42
     df0:	89 b7       	in	r24, 0x39	; 57
     df2:	8b 7f       	andi	r24, 0xFB	; 251
     df4:	89 bf       	out	0x39, r24	; 57
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	08 95       	ret
     dfa:	82 30       	cpi	r24, 0x02	; 2
     dfc:	41 f4       	brne	.+16     	; 0xe0e <TIM_uint8_tDeInit+0x40>
     dfe:	15 bc       	out	0x25, r1	; 37
     e00:	14 bc       	out	0x24, r1	; 36
     e02:	13 bc       	out	0x23, r1	; 35
     e04:	89 b7       	in	r24, 0x39	; 57
     e06:	89 7f       	andi	r24, 0xF9	; 249
     e08:	89 bf       	out	0x39, r24	; 57
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	08 95       	ret
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	08 95       	ret

00000e12 <__vector_11>:

/*TIMER0 Overflow*/
void __vector_11 (void)	__attribute__((signal,used));
void __vector_11 (void)
{
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	2f 93       	push	r18
     e1e:	3f 93       	push	r19
     e20:	4f 93       	push	r20
     e22:	5f 93       	push	r21
     e24:	6f 93       	push	r22
     e26:	7f 93       	push	r23
     e28:	8f 93       	push	r24
     e2a:	9f 93       	push	r25
     e2c:	af 93       	push	r26
     e2e:	bf 93       	push	r27
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
	TIM0_CallBack();
     e34:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <TIM0_CallBack>
     e38:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <TIM0_CallBack+0x1>
     e3c:	09 95       	icall
}
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <__vector_10>:
/*TIMER0 Compare match*/

void __vector_10 (void)	__attribute__((signal,used));
void __vector_10 (void)
{
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
	TIM0_CallBack();
     e82:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <TIM0_CallBack>
     e86:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <TIM0_CallBack+0x1>
     e8a:	09 95       	icall
}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_9>:
/************************************************/

/*TIMER1 OVF*/
void __vector_9 (void)	__attribute__((signal,used));
void __vector_9 (void)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	2f 93       	push	r18
     eba:	3f 93       	push	r19
     ebc:	4f 93       	push	r20
     ebe:	5f 93       	push	r21
     ec0:	6f 93       	push	r22
     ec2:	7f 93       	push	r23
     ec4:	8f 93       	push	r24
     ec6:	9f 93       	push	r25
     ec8:	af 93       	push	r26
     eca:	bf 93       	push	r27
     ecc:	ef 93       	push	r30
     ece:	ff 93       	push	r31
	TIM1_CallBack();
     ed0:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <TIM1_CallBack>
     ed4:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <TIM1_CallBack+0x1>
     ed8:	09 95       	icall
}
     eda:	ff 91       	pop	r31
     edc:	ef 91       	pop	r30
     ede:	bf 91       	pop	r27
     ee0:	af 91       	pop	r26
     ee2:	9f 91       	pop	r25
     ee4:	8f 91       	pop	r24
     ee6:	7f 91       	pop	r23
     ee8:	6f 91       	pop	r22
     eea:	5f 91       	pop	r21
     eec:	4f 91       	pop	r20
     eee:	3f 91       	pop	r19
     ef0:	2f 91       	pop	r18
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_7>:
/*TIMER1 COMPA*/
void __vector_7 (void)	__attribute__((signal,used));
void __vector_7 (void)
{
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	6f 93       	push	r22
     f10:	7f 93       	push	r23
     f12:	8f 93       	push	r24
     f14:	9f 93       	push	r25
     f16:	af 93       	push	r26
     f18:	bf 93       	push	r27
     f1a:	ef 93       	push	r30
     f1c:	ff 93       	push	r31
	TIM1_CallBack();
     f1e:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <TIM1_CallBack>
     f22:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <TIM1_CallBack+0x1>
     f26:	09 95       	icall
}
     f28:	ff 91       	pop	r31
     f2a:	ef 91       	pop	r30
     f2c:	bf 91       	pop	r27
     f2e:	af 91       	pop	r26
     f30:	9f 91       	pop	r25
     f32:	8f 91       	pop	r24
     f34:	7f 91       	pop	r23
     f36:	6f 91       	pop	r22
     f38:	5f 91       	pop	r21
     f3a:	4f 91       	pop	r20
     f3c:	3f 91       	pop	r19
     f3e:	2f 91       	pop	r18
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <__vector_5>:


/*TIMER1 Overflow*/
void __vector_5 (void)	__attribute__((signal,used));
void __vector_5 (void)
{
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	6f 93       	push	r22
     f5e:	7f 93       	push	r23
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	af 93       	push	r26
     f66:	bf 93       	push	r27
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
	TIM2_CallBack();
     f6c:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <TIM2_CallBack>
     f70:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <TIM2_CallBack+0x1>
     f74:	09 95       	icall
}
     f76:	ff 91       	pop	r31
     f78:	ef 91       	pop	r30
     f7a:	bf 91       	pop	r27
     f7c:	af 91       	pop	r26
     f7e:	9f 91       	pop	r25
     f80:	8f 91       	pop	r24
     f82:	7f 91       	pop	r23
     f84:	6f 91       	pop	r22
     f86:	5f 91       	pop	r21
     f88:	4f 91       	pop	r20
     f8a:	3f 91       	pop	r19
     f8c:	2f 91       	pop	r18
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	0f 90       	pop	r0
     f94:	1f 90       	pop	r1
     f96:	18 95       	reti

00000f98 <__vector_4>:
/*TIMER0 Compare match*/

void __vector_4 (void)	__attribute__((signal,used));
void __vector_4 (void)
{
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	2f 93       	push	r18
     fa4:	3f 93       	push	r19
     fa6:	4f 93       	push	r20
     fa8:	5f 93       	push	r21
     faa:	6f 93       	push	r22
     fac:	7f 93       	push	r23
     fae:	8f 93       	push	r24
     fb0:	9f 93       	push	r25
     fb2:	af 93       	push	r26
     fb4:	bf 93       	push	r27
     fb6:	ef 93       	push	r30
     fb8:	ff 93       	push	r31
	TIM2_CallBack();
     fba:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <TIM2_CallBack>
     fbe:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <TIM2_CallBack+0x1>
     fc2:	09 95       	icall
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	0f 90       	pop	r0
     fe2:	1f 90       	pop	r1
     fe4:	18 95       	reti

00000fe6 <__subsf3>:
     fe6:	50 58       	subi	r21, 0x80	; 128

00000fe8 <__addsf3>:
     fe8:	bb 27       	eor	r27, r27
     fea:	aa 27       	eor	r26, r26
     fec:	0e 94 0b 08 	call	0x1016	; 0x1016 <__addsf3x>
     ff0:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_round>
     ff4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_pscA>
     ff8:	38 f0       	brcs	.+14     	; 0x1008 <__addsf3+0x20>
     ffa:	0e 94 77 09 	call	0x12ee	; 0x12ee <__fp_pscB>
     ffe:	20 f0       	brcs	.+8      	; 0x1008 <__addsf3+0x20>
    1000:	39 f4       	brne	.+14     	; 0x1010 <__addsf3+0x28>
    1002:	9f 3f       	cpi	r25, 0xFF	; 255
    1004:	19 f4       	brne	.+6      	; 0x100c <__addsf3+0x24>
    1006:	26 f4       	brtc	.+8      	; 0x1010 <__addsf3+0x28>
    1008:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__fp_nan>
    100c:	0e f4       	brtc	.+2      	; 0x1010 <__addsf3+0x28>
    100e:	e0 95       	com	r30
    1010:	e7 fb       	bst	r30, 7
    1012:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_inf>

00001016 <__addsf3x>:
    1016:	e9 2f       	mov	r30, r25
    1018:	0e 94 8f 09 	call	0x131e	; 0x131e <__fp_split3>
    101c:	58 f3       	brcs	.-42     	; 0xff4 <__addsf3+0xc>
    101e:	ba 17       	cp	r27, r26
    1020:	62 07       	cpc	r22, r18
    1022:	73 07       	cpc	r23, r19
    1024:	84 07       	cpc	r24, r20
    1026:	95 07       	cpc	r25, r21
    1028:	20 f0       	brcs	.+8      	; 0x1032 <__addsf3x+0x1c>
    102a:	79 f4       	brne	.+30     	; 0x104a <__addsf3x+0x34>
    102c:	a6 f5       	brtc	.+104    	; 0x1096 <__addsf3x+0x80>
    102e:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_zero>
    1032:	0e f4       	brtc	.+2      	; 0x1036 <__addsf3x+0x20>
    1034:	e0 95       	com	r30
    1036:	0b 2e       	mov	r0, r27
    1038:	ba 2f       	mov	r27, r26
    103a:	a0 2d       	mov	r26, r0
    103c:	0b 01       	movw	r0, r22
    103e:	b9 01       	movw	r22, r18
    1040:	90 01       	movw	r18, r0
    1042:	0c 01       	movw	r0, r24
    1044:	ca 01       	movw	r24, r20
    1046:	a0 01       	movw	r20, r0
    1048:	11 24       	eor	r1, r1
    104a:	ff 27       	eor	r31, r31
    104c:	59 1b       	sub	r21, r25
    104e:	99 f0       	breq	.+38     	; 0x1076 <__addsf3x+0x60>
    1050:	59 3f       	cpi	r21, 0xF9	; 249
    1052:	50 f4       	brcc	.+20     	; 0x1068 <__addsf3x+0x52>
    1054:	50 3e       	cpi	r21, 0xE0	; 224
    1056:	68 f1       	brcs	.+90     	; 0x10b2 <__addsf3x+0x9c>
    1058:	1a 16       	cp	r1, r26
    105a:	f0 40       	sbci	r31, 0x00	; 0
    105c:	a2 2f       	mov	r26, r18
    105e:	23 2f       	mov	r18, r19
    1060:	34 2f       	mov	r19, r20
    1062:	44 27       	eor	r20, r20
    1064:	58 5f       	subi	r21, 0xF8	; 248
    1066:	f3 cf       	rjmp	.-26     	; 0x104e <__addsf3x+0x38>
    1068:	46 95       	lsr	r20
    106a:	37 95       	ror	r19
    106c:	27 95       	ror	r18
    106e:	a7 95       	ror	r26
    1070:	f0 40       	sbci	r31, 0x00	; 0
    1072:	53 95       	inc	r21
    1074:	c9 f7       	brne	.-14     	; 0x1068 <__addsf3x+0x52>
    1076:	7e f4       	brtc	.+30     	; 0x1096 <__addsf3x+0x80>
    1078:	1f 16       	cp	r1, r31
    107a:	ba 0b       	sbc	r27, r26
    107c:	62 0b       	sbc	r22, r18
    107e:	73 0b       	sbc	r23, r19
    1080:	84 0b       	sbc	r24, r20
    1082:	ba f0       	brmi	.+46     	; 0x10b2 <__addsf3x+0x9c>
    1084:	91 50       	subi	r25, 0x01	; 1
    1086:	a1 f0       	breq	.+40     	; 0x10b0 <__addsf3x+0x9a>
    1088:	ff 0f       	add	r31, r31
    108a:	bb 1f       	adc	r27, r27
    108c:	66 1f       	adc	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	88 1f       	adc	r24, r24
    1092:	c2 f7       	brpl	.-16     	; 0x1084 <__addsf3x+0x6e>
    1094:	0e c0       	rjmp	.+28     	; 0x10b2 <__addsf3x+0x9c>
    1096:	ba 0f       	add	r27, r26
    1098:	62 1f       	adc	r22, r18
    109a:	73 1f       	adc	r23, r19
    109c:	84 1f       	adc	r24, r20
    109e:	48 f4       	brcc	.+18     	; 0x10b2 <__addsf3x+0x9c>
    10a0:	87 95       	ror	r24
    10a2:	77 95       	ror	r23
    10a4:	67 95       	ror	r22
    10a6:	b7 95       	ror	r27
    10a8:	f7 95       	ror	r31
    10aa:	9e 3f       	cpi	r25, 0xFE	; 254
    10ac:	08 f0       	brcs	.+2      	; 0x10b0 <__addsf3x+0x9a>
    10ae:	b0 cf       	rjmp	.-160    	; 0x1010 <__addsf3+0x28>
    10b0:	93 95       	inc	r25
    10b2:	88 0f       	add	r24, r24
    10b4:	08 f0       	brcs	.+2      	; 0x10b8 <__addsf3x+0xa2>
    10b6:	99 27       	eor	r25, r25
    10b8:	ee 0f       	add	r30, r30
    10ba:	97 95       	ror	r25
    10bc:	87 95       	ror	r24
    10be:	08 95       	ret

000010c0 <__cmpsf2>:
    10c0:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_cmp>
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <__cmpsf2+0x8>
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	08 95       	ret

000010ca <__divsf3>:
    10ca:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__divsf3x>
    10ce:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_round>
    10d2:	0e 94 77 09 	call	0x12ee	; 0x12ee <__fp_pscB>
    10d6:	58 f0       	brcs	.+22     	; 0x10ee <__divsf3+0x24>
    10d8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_pscA>
    10dc:	40 f0       	brcs	.+16     	; 0x10ee <__divsf3+0x24>
    10de:	29 f4       	brne	.+10     	; 0x10ea <__divsf3+0x20>
    10e0:	5f 3f       	cpi	r21, 0xFF	; 255
    10e2:	29 f0       	breq	.+10     	; 0x10ee <__divsf3+0x24>
    10e4:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_inf>
    10e8:	51 11       	cpse	r21, r1
    10ea:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_szero>
    10ee:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__fp_nan>

000010f2 <__divsf3x>:
    10f2:	0e 94 8f 09 	call	0x131e	; 0x131e <__fp_split3>
    10f6:	68 f3       	brcs	.-38     	; 0x10d2 <__divsf3+0x8>

000010f8 <__divsf3_pse>:
    10f8:	99 23       	and	r25, r25
    10fa:	b1 f3       	breq	.-20     	; 0x10e8 <__divsf3+0x1e>
    10fc:	55 23       	and	r21, r21
    10fe:	91 f3       	breq	.-28     	; 0x10e4 <__divsf3+0x1a>
    1100:	95 1b       	sub	r25, r21
    1102:	55 0b       	sbc	r21, r21
    1104:	bb 27       	eor	r27, r27
    1106:	aa 27       	eor	r26, r26
    1108:	62 17       	cp	r22, r18
    110a:	73 07       	cpc	r23, r19
    110c:	84 07       	cpc	r24, r20
    110e:	38 f0       	brcs	.+14     	; 0x111e <__divsf3_pse+0x26>
    1110:	9f 5f       	subi	r25, 0xFF	; 255
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	44 1f       	adc	r20, r20
    111a:	aa 1f       	adc	r26, r26
    111c:	a9 f3       	breq	.-22     	; 0x1108 <__divsf3_pse+0x10>
    111e:	35 d0       	rcall	.+106    	; 0x118a <__divsf3_pse+0x92>
    1120:	0e 2e       	mov	r0, r30
    1122:	3a f0       	brmi	.+14     	; 0x1132 <__divsf3_pse+0x3a>
    1124:	e0 e8       	ldi	r30, 0x80	; 128
    1126:	32 d0       	rcall	.+100    	; 0x118c <__divsf3_pse+0x94>
    1128:	91 50       	subi	r25, 0x01	; 1
    112a:	50 40       	sbci	r21, 0x00	; 0
    112c:	e6 95       	lsr	r30
    112e:	00 1c       	adc	r0, r0
    1130:	ca f7       	brpl	.-14     	; 0x1124 <__divsf3_pse+0x2c>
    1132:	2b d0       	rcall	.+86     	; 0x118a <__divsf3_pse+0x92>
    1134:	fe 2f       	mov	r31, r30
    1136:	29 d0       	rcall	.+82     	; 0x118a <__divsf3_pse+0x92>
    1138:	66 0f       	add	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	bb 1f       	adc	r27, r27
    1140:	26 17       	cp	r18, r22
    1142:	37 07       	cpc	r19, r23
    1144:	48 07       	cpc	r20, r24
    1146:	ab 07       	cpc	r26, r27
    1148:	b0 e8       	ldi	r27, 0x80	; 128
    114a:	09 f0       	breq	.+2      	; 0x114e <__divsf3_pse+0x56>
    114c:	bb 0b       	sbc	r27, r27
    114e:	80 2d       	mov	r24, r0
    1150:	bf 01       	movw	r22, r30
    1152:	ff 27       	eor	r31, r31
    1154:	93 58       	subi	r25, 0x83	; 131
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
    1158:	3a f0       	brmi	.+14     	; 0x1168 <__divsf3_pse+0x70>
    115a:	9e 3f       	cpi	r25, 0xFE	; 254
    115c:	51 05       	cpc	r21, r1
    115e:	78 f0       	brcs	.+30     	; 0x117e <__divsf3_pse+0x86>
    1160:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_inf>
    1164:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_szero>
    1168:	5f 3f       	cpi	r21, 0xFF	; 255
    116a:	e4 f3       	brlt	.-8      	; 0x1164 <__divsf3_pse+0x6c>
    116c:	98 3e       	cpi	r25, 0xE8	; 232
    116e:	d4 f3       	brlt	.-12     	; 0x1164 <__divsf3_pse+0x6c>
    1170:	86 95       	lsr	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b7 95       	ror	r27
    1178:	f7 95       	ror	r31
    117a:	9f 5f       	subi	r25, 0xFF	; 255
    117c:	c9 f7       	brne	.-14     	; 0x1170 <__divsf3_pse+0x78>
    117e:	88 0f       	add	r24, r24
    1180:	91 1d       	adc	r25, r1
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	97 f9       	bld	r25, 7
    1188:	08 95       	ret
    118a:	e1 e0       	ldi	r30, 0x01	; 1
    118c:	66 0f       	add	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	88 1f       	adc	r24, r24
    1192:	bb 1f       	adc	r27, r27
    1194:	62 17       	cp	r22, r18
    1196:	73 07       	cpc	r23, r19
    1198:	84 07       	cpc	r24, r20
    119a:	ba 07       	cpc	r27, r26
    119c:	20 f0       	brcs	.+8      	; 0x11a6 <__divsf3_pse+0xae>
    119e:	62 1b       	sub	r22, r18
    11a0:	73 0b       	sbc	r23, r19
    11a2:	84 0b       	sbc	r24, r20
    11a4:	ba 0b       	sbc	r27, r26
    11a6:	ee 1f       	adc	r30, r30
    11a8:	88 f7       	brcc	.-30     	; 0x118c <__divsf3_pse+0x94>
    11aa:	e0 95       	com	r30
    11ac:	08 95       	ret

000011ae <__fixunssfsi>:
    11ae:	0e 94 97 09 	call	0x132e	; 0x132e <__fp_splitA>
    11b2:	88 f0       	brcs	.+34     	; 0x11d6 <__fixunssfsi+0x28>
    11b4:	9f 57       	subi	r25, 0x7F	; 127
    11b6:	98 f0       	brcs	.+38     	; 0x11de <__fixunssfsi+0x30>
    11b8:	b9 2f       	mov	r27, r25
    11ba:	99 27       	eor	r25, r25
    11bc:	b7 51       	subi	r27, 0x17	; 23
    11be:	b0 f0       	brcs	.+44     	; 0x11ec <__fixunssfsi+0x3e>
    11c0:	e1 f0       	breq	.+56     	; 0x11fa <__fixunssfsi+0x4c>
    11c2:	66 0f       	add	r22, r22
    11c4:	77 1f       	adc	r23, r23
    11c6:	88 1f       	adc	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	1a f0       	brmi	.+6      	; 0x11d2 <__fixunssfsi+0x24>
    11cc:	ba 95       	dec	r27
    11ce:	c9 f7       	brne	.-14     	; 0x11c2 <__fixunssfsi+0x14>
    11d0:	14 c0       	rjmp	.+40     	; 0x11fa <__fixunssfsi+0x4c>
    11d2:	b1 30       	cpi	r27, 0x01	; 1
    11d4:	91 f0       	breq	.+36     	; 0x11fa <__fixunssfsi+0x4c>
    11d6:	0e 94 b1 09 	call	0x1362	; 0x1362 <__fp_zero>
    11da:	b1 e0       	ldi	r27, 0x01	; 1
    11dc:	08 95       	ret
    11de:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_zero>
    11e2:	67 2f       	mov	r22, r23
    11e4:	78 2f       	mov	r23, r24
    11e6:	88 27       	eor	r24, r24
    11e8:	b8 5f       	subi	r27, 0xF8	; 248
    11ea:	39 f0       	breq	.+14     	; 0x11fa <__fixunssfsi+0x4c>
    11ec:	b9 3f       	cpi	r27, 0xF9	; 249
    11ee:	cc f3       	brlt	.-14     	; 0x11e2 <__fixunssfsi+0x34>
    11f0:	86 95       	lsr	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b3 95       	inc	r27
    11f8:	d9 f7       	brne	.-10     	; 0x11f0 <__fixunssfsi+0x42>
    11fa:	3e f4       	brtc	.+14     	; 0x120a <__fixunssfsi+0x5c>
    11fc:	90 95       	com	r25
    11fe:	80 95       	com	r24
    1200:	70 95       	com	r23
    1202:	61 95       	neg	r22
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	08 95       	ret

0000120c <__floatunsisf>:
    120c:	e8 94       	clt
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <__floatsisf+0x12>

00001210 <__floatsisf>:
    1210:	97 fb       	bst	r25, 7
    1212:	3e f4       	brtc	.+14     	; 0x1222 <__floatsisf+0x12>
    1214:	90 95       	com	r25
    1216:	80 95       	com	r24
    1218:	70 95       	com	r23
    121a:	61 95       	neg	r22
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	99 23       	and	r25, r25
    1224:	a9 f0       	breq	.+42     	; 0x1250 <__floatsisf+0x40>
    1226:	f9 2f       	mov	r31, r25
    1228:	96 e9       	ldi	r25, 0x96	; 150
    122a:	bb 27       	eor	r27, r27
    122c:	93 95       	inc	r25
    122e:	f6 95       	lsr	r31
    1230:	87 95       	ror	r24
    1232:	77 95       	ror	r23
    1234:	67 95       	ror	r22
    1236:	b7 95       	ror	r27
    1238:	f1 11       	cpse	r31, r1
    123a:	f8 cf       	rjmp	.-16     	; 0x122c <__floatsisf+0x1c>
    123c:	fa f4       	brpl	.+62     	; 0x127c <__floatsisf+0x6c>
    123e:	bb 0f       	add	r27, r27
    1240:	11 f4       	brne	.+4      	; 0x1246 <__floatsisf+0x36>
    1242:	60 ff       	sbrs	r22, 0
    1244:	1b c0       	rjmp	.+54     	; 0x127c <__floatsisf+0x6c>
    1246:	6f 5f       	subi	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	16 c0       	rjmp	.+44     	; 0x127c <__floatsisf+0x6c>
    1250:	88 23       	and	r24, r24
    1252:	11 f0       	breq	.+4      	; 0x1258 <__floatsisf+0x48>
    1254:	96 e9       	ldi	r25, 0x96	; 150
    1256:	11 c0       	rjmp	.+34     	; 0x127a <__floatsisf+0x6a>
    1258:	77 23       	and	r23, r23
    125a:	21 f0       	breq	.+8      	; 0x1264 <__floatsisf+0x54>
    125c:	9e e8       	ldi	r25, 0x8E	; 142
    125e:	87 2f       	mov	r24, r23
    1260:	76 2f       	mov	r23, r22
    1262:	05 c0       	rjmp	.+10     	; 0x126e <__floatsisf+0x5e>
    1264:	66 23       	and	r22, r22
    1266:	71 f0       	breq	.+28     	; 0x1284 <__floatsisf+0x74>
    1268:	96 e8       	ldi	r25, 0x86	; 134
    126a:	86 2f       	mov	r24, r22
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	2a f0       	brmi	.+10     	; 0x127c <__floatsisf+0x6c>
    1272:	9a 95       	dec	r25
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	88 1f       	adc	r24, r24
    127a:	da f7       	brpl	.-10     	; 0x1272 <__floatsisf+0x62>
    127c:	88 0f       	add	r24, r24
    127e:	96 95       	lsr	r25
    1280:	87 95       	ror	r24
    1282:	97 f9       	bld	r25, 7
    1284:	08 95       	ret

00001286 <__fp_cmp>:
    1286:	99 0f       	add	r25, r25
    1288:	00 08       	sbc	r0, r0
    128a:	55 0f       	add	r21, r21
    128c:	aa 0b       	sbc	r26, r26
    128e:	e0 e8       	ldi	r30, 0x80	; 128
    1290:	fe ef       	ldi	r31, 0xFE	; 254
    1292:	16 16       	cp	r1, r22
    1294:	17 06       	cpc	r1, r23
    1296:	e8 07       	cpc	r30, r24
    1298:	f9 07       	cpc	r31, r25
    129a:	c0 f0       	brcs	.+48     	; 0x12cc <__fp_cmp+0x46>
    129c:	12 16       	cp	r1, r18
    129e:	13 06       	cpc	r1, r19
    12a0:	e4 07       	cpc	r30, r20
    12a2:	f5 07       	cpc	r31, r21
    12a4:	98 f0       	brcs	.+38     	; 0x12cc <__fp_cmp+0x46>
    12a6:	62 1b       	sub	r22, r18
    12a8:	73 0b       	sbc	r23, r19
    12aa:	84 0b       	sbc	r24, r20
    12ac:	95 0b       	sbc	r25, r21
    12ae:	39 f4       	brne	.+14     	; 0x12be <__fp_cmp+0x38>
    12b0:	0a 26       	eor	r0, r26
    12b2:	61 f0       	breq	.+24     	; 0x12cc <__fp_cmp+0x46>
    12b4:	23 2b       	or	r18, r19
    12b6:	24 2b       	or	r18, r20
    12b8:	25 2b       	or	r18, r21
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <__fp_cmp+0x3e>
    12bc:	08 95       	ret
    12be:	0a 26       	eor	r0, r26
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <__fp_cmp+0x3e>
    12c2:	a1 40       	sbci	r26, 0x01	; 1
    12c4:	a6 95       	lsr	r26
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	81 1d       	adc	r24, r1
    12ca:	81 1d       	adc	r24, r1
    12cc:	08 95       	ret

000012ce <__fp_inf>:
    12ce:	97 f9       	bld	r25, 7
    12d0:	9f 67       	ori	r25, 0x7F	; 127
    12d2:	80 e8       	ldi	r24, 0x80	; 128
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	08 95       	ret

000012da <__fp_nan>:
    12da:	9f ef       	ldi	r25, 0xFF	; 255
    12dc:	80 ec       	ldi	r24, 0xC0	; 192
    12de:	08 95       	ret

000012e0 <__fp_pscA>:
    12e0:	00 24       	eor	r0, r0
    12e2:	0a 94       	dec	r0
    12e4:	16 16       	cp	r1, r22
    12e6:	17 06       	cpc	r1, r23
    12e8:	18 06       	cpc	r1, r24
    12ea:	09 06       	cpc	r0, r25
    12ec:	08 95       	ret

000012ee <__fp_pscB>:
    12ee:	00 24       	eor	r0, r0
    12f0:	0a 94       	dec	r0
    12f2:	12 16       	cp	r1, r18
    12f4:	13 06       	cpc	r1, r19
    12f6:	14 06       	cpc	r1, r20
    12f8:	05 06       	cpc	r0, r21
    12fa:	08 95       	ret

000012fc <__fp_round>:
    12fc:	09 2e       	mov	r0, r25
    12fe:	03 94       	inc	r0
    1300:	00 0c       	add	r0, r0
    1302:	11 f4       	brne	.+4      	; 0x1308 <__fp_round+0xc>
    1304:	88 23       	and	r24, r24
    1306:	52 f0       	brmi	.+20     	; 0x131c <__fp_round+0x20>
    1308:	bb 0f       	add	r27, r27
    130a:	40 f4       	brcc	.+16     	; 0x131c <__fp_round+0x20>
    130c:	bf 2b       	or	r27, r31
    130e:	11 f4       	brne	.+4      	; 0x1314 <__fp_round+0x18>
    1310:	60 ff       	sbrs	r22, 0
    1312:	04 c0       	rjmp	.+8      	; 0x131c <__fp_round+0x20>
    1314:	6f 5f       	subi	r22, 0xFF	; 255
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	8f 4f       	sbci	r24, 0xFF	; 255
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	08 95       	ret

0000131e <__fp_split3>:
    131e:	57 fd       	sbrc	r21, 7
    1320:	90 58       	subi	r25, 0x80	; 128
    1322:	44 0f       	add	r20, r20
    1324:	55 1f       	adc	r21, r21
    1326:	59 f0       	breq	.+22     	; 0x133e <__fp_splitA+0x10>
    1328:	5f 3f       	cpi	r21, 0xFF	; 255
    132a:	71 f0       	breq	.+28     	; 0x1348 <__fp_splitA+0x1a>
    132c:	47 95       	ror	r20

0000132e <__fp_splitA>:
    132e:	88 0f       	add	r24, r24
    1330:	97 fb       	bst	r25, 7
    1332:	99 1f       	adc	r25, r25
    1334:	61 f0       	breq	.+24     	; 0x134e <__fp_splitA+0x20>
    1336:	9f 3f       	cpi	r25, 0xFF	; 255
    1338:	79 f0       	breq	.+30     	; 0x1358 <__fp_splitA+0x2a>
    133a:	87 95       	ror	r24
    133c:	08 95       	ret
    133e:	12 16       	cp	r1, r18
    1340:	13 06       	cpc	r1, r19
    1342:	14 06       	cpc	r1, r20
    1344:	55 1f       	adc	r21, r21
    1346:	f2 cf       	rjmp	.-28     	; 0x132c <__fp_split3+0xe>
    1348:	46 95       	lsr	r20
    134a:	f1 df       	rcall	.-30     	; 0x132e <__fp_splitA>
    134c:	08 c0       	rjmp	.+16     	; 0x135e <__fp_splitA+0x30>
    134e:	16 16       	cp	r1, r22
    1350:	17 06       	cpc	r1, r23
    1352:	18 06       	cpc	r1, r24
    1354:	99 1f       	adc	r25, r25
    1356:	f1 cf       	rjmp	.-30     	; 0x133a <__fp_splitA+0xc>
    1358:	86 95       	lsr	r24
    135a:	71 05       	cpc	r23, r1
    135c:	61 05       	cpc	r22, r1
    135e:	08 94       	sec
    1360:	08 95       	ret

00001362 <__fp_zero>:
    1362:	e8 94       	clt

00001364 <__fp_szero>:
    1364:	bb 27       	eor	r27, r27
    1366:	66 27       	eor	r22, r22
    1368:	77 27       	eor	r23, r23
    136a:	cb 01       	movw	r24, r22
    136c:	97 f9       	bld	r25, 7
    136e:	08 95       	ret

00001370 <__gesf2>:
    1370:	0e 94 43 09 	call	0x1286	; 0x1286 <__fp_cmp>
    1374:	08 f4       	brcc	.+2      	; 0x1378 <__gesf2+0x8>
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	08 95       	ret

0000137a <__mulsf3>:
    137a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__mulsf3x>
    137e:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_round>
    1382:	0e 94 70 09 	call	0x12e0	; 0x12e0 <__fp_pscA>
    1386:	38 f0       	brcs	.+14     	; 0x1396 <__mulsf3+0x1c>
    1388:	0e 94 77 09 	call	0x12ee	; 0x12ee <__fp_pscB>
    138c:	20 f0       	brcs	.+8      	; 0x1396 <__mulsf3+0x1c>
    138e:	95 23       	and	r25, r21
    1390:	11 f0       	breq	.+4      	; 0x1396 <__mulsf3+0x1c>
    1392:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_inf>
    1396:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__fp_nan>
    139a:	11 24       	eor	r1, r1
    139c:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_szero>

000013a0 <__mulsf3x>:
    13a0:	0e 94 8f 09 	call	0x131e	; 0x131e <__fp_split3>
    13a4:	70 f3       	brcs	.-36     	; 0x1382 <__mulsf3+0x8>

000013a6 <__mulsf3_pse>:
    13a6:	95 9f       	mul	r25, r21
    13a8:	c1 f3       	breq	.-16     	; 0x139a <__mulsf3+0x20>
    13aa:	95 0f       	add	r25, r21
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	55 1f       	adc	r21, r21
    13b0:	62 9f       	mul	r22, r18
    13b2:	f0 01       	movw	r30, r0
    13b4:	72 9f       	mul	r23, r18
    13b6:	bb 27       	eor	r27, r27
    13b8:	f0 0d       	add	r31, r0
    13ba:	b1 1d       	adc	r27, r1
    13bc:	63 9f       	mul	r22, r19
    13be:	aa 27       	eor	r26, r26
    13c0:	f0 0d       	add	r31, r0
    13c2:	b1 1d       	adc	r27, r1
    13c4:	aa 1f       	adc	r26, r26
    13c6:	64 9f       	mul	r22, r20
    13c8:	66 27       	eor	r22, r22
    13ca:	b0 0d       	add	r27, r0
    13cc:	a1 1d       	adc	r26, r1
    13ce:	66 1f       	adc	r22, r22
    13d0:	82 9f       	mul	r24, r18
    13d2:	22 27       	eor	r18, r18
    13d4:	b0 0d       	add	r27, r0
    13d6:	a1 1d       	adc	r26, r1
    13d8:	62 1f       	adc	r22, r18
    13da:	73 9f       	mul	r23, r19
    13dc:	b0 0d       	add	r27, r0
    13de:	a1 1d       	adc	r26, r1
    13e0:	62 1f       	adc	r22, r18
    13e2:	83 9f       	mul	r24, r19
    13e4:	a0 0d       	add	r26, r0
    13e6:	61 1d       	adc	r22, r1
    13e8:	22 1f       	adc	r18, r18
    13ea:	74 9f       	mul	r23, r20
    13ec:	33 27       	eor	r19, r19
    13ee:	a0 0d       	add	r26, r0
    13f0:	61 1d       	adc	r22, r1
    13f2:	23 1f       	adc	r18, r19
    13f4:	84 9f       	mul	r24, r20
    13f6:	60 0d       	add	r22, r0
    13f8:	21 1d       	adc	r18, r1
    13fa:	82 2f       	mov	r24, r18
    13fc:	76 2f       	mov	r23, r22
    13fe:	6a 2f       	mov	r22, r26
    1400:	11 24       	eor	r1, r1
    1402:	9f 57       	subi	r25, 0x7F	; 127
    1404:	50 40       	sbci	r21, 0x00	; 0
    1406:	9a f0       	brmi	.+38     	; 0x142e <__mulsf3_pse+0x88>
    1408:	f1 f0       	breq	.+60     	; 0x1446 <__mulsf3_pse+0xa0>
    140a:	88 23       	and	r24, r24
    140c:	4a f0       	brmi	.+18     	; 0x1420 <__mulsf3_pse+0x7a>
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	bb 1f       	adc	r27, r27
    1414:	66 1f       	adc	r22, r22
    1416:	77 1f       	adc	r23, r23
    1418:	88 1f       	adc	r24, r24
    141a:	91 50       	subi	r25, 0x01	; 1
    141c:	50 40       	sbci	r21, 0x00	; 0
    141e:	a9 f7       	brne	.-22     	; 0x140a <__mulsf3_pse+0x64>
    1420:	9e 3f       	cpi	r25, 0xFE	; 254
    1422:	51 05       	cpc	r21, r1
    1424:	80 f0       	brcs	.+32     	; 0x1446 <__mulsf3_pse+0xa0>
    1426:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_inf>
    142a:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_szero>
    142e:	5f 3f       	cpi	r21, 0xFF	; 255
    1430:	e4 f3       	brlt	.-8      	; 0x142a <__mulsf3_pse+0x84>
    1432:	98 3e       	cpi	r25, 0xE8	; 232
    1434:	d4 f3       	brlt	.-12     	; 0x142a <__mulsf3_pse+0x84>
    1436:	86 95       	lsr	r24
    1438:	77 95       	ror	r23
    143a:	67 95       	ror	r22
    143c:	b7 95       	ror	r27
    143e:	f7 95       	ror	r31
    1440:	e7 95       	ror	r30
    1442:	9f 5f       	subi	r25, 0xFF	; 255
    1444:	c1 f7       	brne	.-16     	; 0x1436 <__mulsf3_pse+0x90>
    1446:	fe 2b       	or	r31, r30
    1448:	88 0f       	add	r24, r24
    144a:	91 1d       	adc	r25, r1
    144c:	96 95       	lsr	r25
    144e:	87 95       	ror	r24
    1450:	97 f9       	bld	r25, 7
    1452:	08 95       	ret

00001454 <pow>:
    1454:	fa 01       	movw	r30, r20
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	30 96       	adiw	r30, 0x00	; 0
    145c:	21 05       	cpc	r18, r1
    145e:	31 05       	cpc	r19, r1
    1460:	a1 f1       	breq	.+104    	; 0x14ca <pow+0x76>
    1462:	61 15       	cp	r22, r1
    1464:	71 05       	cpc	r23, r1
    1466:	61 f4       	brne	.+24     	; 0x1480 <pow+0x2c>
    1468:	80 38       	cpi	r24, 0x80	; 128
    146a:	bf e3       	ldi	r27, 0x3F	; 63
    146c:	9b 07       	cpc	r25, r27
    146e:	49 f1       	breq	.+82     	; 0x14c2 <pow+0x6e>
    1470:	68 94       	set
    1472:	90 38       	cpi	r25, 0x80	; 128
    1474:	81 05       	cpc	r24, r1
    1476:	61 f0       	breq	.+24     	; 0x1490 <pow+0x3c>
    1478:	80 38       	cpi	r24, 0x80	; 128
    147a:	bf ef       	ldi	r27, 0xFF	; 255
    147c:	9b 07       	cpc	r25, r27
    147e:	41 f0       	breq	.+16     	; 0x1490 <pow+0x3c>
    1480:	99 23       	and	r25, r25
    1482:	4a f5       	brpl	.+82     	; 0x14d6 <pow+0x82>
    1484:	ff 3f       	cpi	r31, 0xFF	; 255
    1486:	e1 05       	cpc	r30, r1
    1488:	31 05       	cpc	r19, r1
    148a:	21 05       	cpc	r18, r1
    148c:	19 f1       	breq	.+70     	; 0x14d4 <pow+0x80>
    148e:	e8 94       	clt
    1490:	08 94       	sec
    1492:	e7 95       	ror	r30
    1494:	d9 01       	movw	r26, r18
    1496:	aa 23       	and	r26, r26
    1498:	29 f4       	brne	.+10     	; 0x14a4 <pow+0x50>
    149a:	ab 2f       	mov	r26, r27
    149c:	be 2f       	mov	r27, r30
    149e:	f8 5f       	subi	r31, 0xF8	; 248
    14a0:	d0 f3       	brcs	.-12     	; 0x1496 <pow+0x42>
    14a2:	10 c0       	rjmp	.+32     	; 0x14c4 <pow+0x70>
    14a4:	ff 5f       	subi	r31, 0xFF	; 255
    14a6:	70 f4       	brcc	.+28     	; 0x14c4 <pow+0x70>
    14a8:	a6 95       	lsr	r26
    14aa:	e0 f7       	brcc	.-8      	; 0x14a4 <pow+0x50>
    14ac:	f7 39       	cpi	r31, 0x97	; 151
    14ae:	50 f0       	brcs	.+20     	; 0x14c4 <pow+0x70>
    14b0:	19 f0       	breq	.+6      	; 0x14b8 <pow+0x64>
    14b2:	ff 3a       	cpi	r31, 0xAF	; 175
    14b4:	38 f4       	brcc	.+14     	; 0x14c4 <pow+0x70>
    14b6:	9f 77       	andi	r25, 0x7F	; 127
    14b8:	9f 93       	push	r25
    14ba:	0d d0       	rcall	.+26     	; 0x14d6 <pow+0x82>
    14bc:	0f 90       	pop	r0
    14be:	07 fc       	sbrc	r0, 7
    14c0:	90 58       	subi	r25, 0x80	; 128
    14c2:	08 95       	ret
    14c4:	46 f0       	brts	.+16     	; 0x14d6 <pow+0x82>
    14c6:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__fp_nan>
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	80 e8       	ldi	r24, 0x80	; 128
    14d0:	9f e3       	ldi	r25, 0x3F	; 63
    14d2:	08 95       	ret
    14d4:	4f e7       	ldi	r20, 0x7F	; 127
    14d6:	9f 77       	andi	r25, 0x7F	; 127
    14d8:	5f 93       	push	r21
    14da:	4f 93       	push	r20
    14dc:	3f 93       	push	r19
    14de:	2f 93       	push	r18
    14e0:	0e 94 25 0b 	call	0x164a	; 0x164a <log>
    14e4:	2f 91       	pop	r18
    14e6:	3f 91       	pop	r19
    14e8:	4f 91       	pop	r20
    14ea:	5f 91       	pop	r21
    14ec:	0e 94 bd 09 	call	0x137a	; 0x137a <__mulsf3>
    14f0:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <exp>
    14f4:	29 f4       	brne	.+10     	; 0x1500 <pow+0xac>
    14f6:	16 f0       	brts	.+4      	; 0x14fc <pow+0xa8>
    14f8:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_inf>
    14fc:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_zero>
    1500:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__fp_nan>

00001504 <exp>:
    1504:	0e 94 97 09 	call	0x132e	; 0x132e <__fp_splitA>
    1508:	a8 f3       	brcs	.-22     	; 0x14f4 <pow+0xa0>
    150a:	96 38       	cpi	r25, 0x86	; 134
    150c:	a0 f7       	brcc	.-24     	; 0x14f6 <pow+0xa2>
    150e:	07 f8       	bld	r0, 7
    1510:	0f 92       	push	r0
    1512:	e8 94       	clt
    1514:	2b e3       	ldi	r18, 0x3B	; 59
    1516:	3a ea       	ldi	r19, 0xAA	; 170
    1518:	48 eb       	ldi	r20, 0xB8	; 184
    151a:	5f e7       	ldi	r21, 0x7F	; 127
    151c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__mulsf3_pse>
    1520:	0f 92       	push	r0
    1522:	0f 92       	push	r0
    1524:	0f 92       	push	r0
    1526:	4d b7       	in	r20, 0x3d	; 61
    1528:	5e b7       	in	r21, 0x3e	; 62
    152a:	0f 92       	push	r0
    152c:	0e 94 6d 0b 	call	0x16da	; 0x16da <modf>
    1530:	e4 e5       	ldi	r30, 0x54	; 84
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_powser>
    1538:	4f 91       	pop	r20
    153a:	5f 91       	pop	r21
    153c:	ef 91       	pop	r30
    153e:	ff 91       	pop	r31
    1540:	e5 95       	asr	r30
    1542:	ee 1f       	adc	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	49 f0       	breq	.+18     	; 0x155a <exp+0x56>
    1548:	fe 57       	subi	r31, 0x7E	; 126
    154a:	e0 68       	ori	r30, 0x80	; 128
    154c:	44 27       	eor	r20, r20
    154e:	ee 0f       	add	r30, r30
    1550:	44 1f       	adc	r20, r20
    1552:	fa 95       	dec	r31
    1554:	e1 f7       	brne	.-8      	; 0x154e <exp+0x4a>
    1556:	41 95       	neg	r20
    1558:	55 0b       	sbc	r21, r21
    155a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <ldexp>
    155e:	0f 90       	pop	r0
    1560:	07 fe       	sbrs	r0, 7
    1562:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <inverse>
    1566:	08 95       	ret

00001568 <__fp_powser>:
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	1f 93       	push	r17
    156e:	0f 93       	push	r16
    1570:	ff 92       	push	r15
    1572:	ef 92       	push	r14
    1574:	df 92       	push	r13
    1576:	7b 01       	movw	r14, r22
    1578:	8c 01       	movw	r16, r24
    157a:	68 94       	set
    157c:	06 c0       	rjmp	.+12     	; 0x158a <__fp_powser+0x22>
    157e:	da 2e       	mov	r13, r26
    1580:	ef 01       	movw	r28, r30
    1582:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__mulsf3x>
    1586:	fe 01       	movw	r30, r28
    1588:	e8 94       	clt
    158a:	a5 91       	lpm	r26, Z+
    158c:	25 91       	lpm	r18, Z+
    158e:	35 91       	lpm	r19, Z+
    1590:	45 91       	lpm	r20, Z+
    1592:	55 91       	lpm	r21, Z+
    1594:	a6 f3       	brts	.-24     	; 0x157e <__fp_powser+0x16>
    1596:	ef 01       	movw	r28, r30
    1598:	0e 94 0b 08 	call	0x1016	; 0x1016 <__addsf3x>
    159c:	fe 01       	movw	r30, r28
    159e:	97 01       	movw	r18, r14
    15a0:	a8 01       	movw	r20, r16
    15a2:	da 94       	dec	r13
    15a4:	69 f7       	brne	.-38     	; 0x1580 <__fp_powser+0x18>
    15a6:	df 90       	pop	r13
    15a8:	ef 90       	pop	r14
    15aa:	ff 90       	pop	r15
    15ac:	0f 91       	pop	r16
    15ae:	1f 91       	pop	r17
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <inverse>:
    15b6:	9b 01       	movw	r18, r22
    15b8:	ac 01       	movw	r20, r24
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	80 e8       	ldi	r24, 0x80	; 128
    15c0:	9f e3       	ldi	r25, 0x3F	; 63
    15c2:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__divsf3>
    15c6:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_inf>
    15ca:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__fp_mpack>

000015ce <ldexp>:
    15ce:	0e 94 97 09 	call	0x132e	; 0x132e <__fp_splitA>
    15d2:	d8 f3       	brcs	.-10     	; 0x15ca <inverse+0x14>
    15d4:	99 23       	and	r25, r25
    15d6:	c9 f3       	breq	.-14     	; 0x15ca <inverse+0x14>
    15d8:	94 0f       	add	r25, r20
    15da:	51 1d       	adc	r21, r1
    15dc:	a3 f3       	brvs	.-24     	; 0x15c6 <inverse+0x10>
    15de:	91 50       	subi	r25, 0x01	; 1
    15e0:	50 40       	sbci	r21, 0x00	; 0
    15e2:	94 f0       	brlt	.+36     	; 0x1608 <ldexp+0x3a>
    15e4:	59 f0       	breq	.+22     	; 0x15fc <ldexp+0x2e>
    15e6:	88 23       	and	r24, r24
    15e8:	32 f0       	brmi	.+12     	; 0x15f6 <ldexp+0x28>
    15ea:	66 0f       	add	r22, r22
    15ec:	77 1f       	adc	r23, r23
    15ee:	88 1f       	adc	r24, r24
    15f0:	91 50       	subi	r25, 0x01	; 1
    15f2:	50 40       	sbci	r21, 0x00	; 0
    15f4:	c1 f7       	brne	.-16     	; 0x15e6 <ldexp+0x18>
    15f6:	9e 3f       	cpi	r25, 0xFE	; 254
    15f8:	51 05       	cpc	r21, r1
    15fa:	2c f7       	brge	.-54     	; 0x15c6 <inverse+0x10>
    15fc:	88 0f       	add	r24, r24
    15fe:	91 1d       	adc	r25, r1
    1600:	96 95       	lsr	r25
    1602:	87 95       	ror	r24
    1604:	97 f9       	bld	r25, 7
    1606:	08 95       	ret
    1608:	5f 3f       	cpi	r21, 0xFF	; 255
    160a:	ac f0       	brlt	.+42     	; 0x1636 <ldexp+0x68>
    160c:	98 3e       	cpi	r25, 0xE8	; 232
    160e:	9c f0       	brlt	.+38     	; 0x1636 <ldexp+0x68>
    1610:	bb 27       	eor	r27, r27
    1612:	86 95       	lsr	r24
    1614:	77 95       	ror	r23
    1616:	67 95       	ror	r22
    1618:	b7 95       	ror	r27
    161a:	08 f4       	brcc	.+2      	; 0x161e <ldexp+0x50>
    161c:	b1 60       	ori	r27, 0x01	; 1
    161e:	93 95       	inc	r25
    1620:	c1 f7       	brne	.-16     	; 0x1612 <ldexp+0x44>
    1622:	bb 0f       	add	r27, r27
    1624:	58 f7       	brcc	.-42     	; 0x15fc <ldexp+0x2e>
    1626:	11 f4       	brne	.+4      	; 0x162c <ldexp+0x5e>
    1628:	60 ff       	sbrs	r22, 0
    162a:	e8 cf       	rjmp	.-48     	; 0x15fc <ldexp+0x2e>
    162c:	6f 5f       	subi	r22, 0xFF	; 255
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
    1630:	8f 4f       	sbci	r24, 0xFF	; 255
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	e3 cf       	rjmp	.-58     	; 0x15fc <ldexp+0x2e>
    1636:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__fp_szero>
    163a:	16 f0       	brts	.+4      	; 0x1640 <ldexp+0x72>
    163c:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__fp_mpack>
    1640:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__fp_nan>
    1644:	68 94       	set
    1646:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_inf>

0000164a <log>:
    164a:	0e 94 97 09 	call	0x132e	; 0x132e <__fp_splitA>
    164e:	a8 f3       	brcs	.-22     	; 0x163a <ldexp+0x6c>
    1650:	99 23       	and	r25, r25
    1652:	c1 f3       	breq	.-16     	; 0x1644 <ldexp+0x76>
    1654:	ae f3       	brts	.-22     	; 0x1640 <ldexp+0x72>
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	1f 93       	push	r17
    165c:	0f 93       	push	r16
    165e:	ff 92       	push	r15
    1660:	c9 2f       	mov	r28, r25
    1662:	dd 27       	eor	r29, r29
    1664:	88 23       	and	r24, r24
    1666:	2a f0       	brmi	.+10     	; 0x1672 <log+0x28>
    1668:	21 97       	sbiw	r28, 0x01	; 1
    166a:	66 0f       	add	r22, r22
    166c:	77 1f       	adc	r23, r23
    166e:	88 1f       	adc	r24, r24
    1670:	da f7       	brpl	.-10     	; 0x1668 <log+0x1e>
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e8       	ldi	r20, 0x80	; 128
    1678:	5f eb       	ldi	r21, 0xBF	; 191
    167a:	9f e3       	ldi	r25, 0x3F	; 63
    167c:	88 39       	cpi	r24, 0x98	; 152
    167e:	20 f0       	brcs	.+8      	; 0x1688 <log+0x3e>
    1680:	80 3e       	cpi	r24, 0xE0	; 224
    1682:	38 f0       	brcs	.+14     	; 0x1692 <log+0x48>
    1684:	21 96       	adiw	r28, 0x01	; 1
    1686:	8f 77       	andi	r24, 0x7F	; 127
    1688:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__addsf3>
    168c:	ec e7       	ldi	r30, 0x7C	; 124
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	04 c0       	rjmp	.+8      	; 0x169a <log+0x50>
    1692:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__addsf3>
    1696:	e9 ea       	ldi	r30, 0xA9	; 169
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__fp_powser>
    169e:	8b 01       	movw	r16, r22
    16a0:	be 01       	movw	r22, r28
    16a2:	ec 01       	movw	r28, r24
    16a4:	fb 2e       	mov	r15, r27
    16a6:	6f 57       	subi	r22, 0x7F	; 127
    16a8:	71 09       	sbc	r23, r1
    16aa:	75 95       	asr	r23
    16ac:	77 1f       	adc	r23, r23
    16ae:	88 0b       	sbc	r24, r24
    16b0:	99 0b       	sbc	r25, r25
    16b2:	0e 94 08 09 	call	0x1210	; 0x1210 <__floatsisf>
    16b6:	28 e1       	ldi	r18, 0x18	; 24
    16b8:	32 e7       	ldi	r19, 0x72	; 114
    16ba:	41 e3       	ldi	r20, 0x31	; 49
    16bc:	5f e3       	ldi	r21, 0x3F	; 63
    16be:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__mulsf3x>
    16c2:	af 2d       	mov	r26, r15
    16c4:	98 01       	movw	r18, r16
    16c6:	ae 01       	movw	r20, r28
    16c8:	ff 90       	pop	r15
    16ca:	0f 91       	pop	r16
    16cc:	1f 91       	pop	r17
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	0e 94 0b 08 	call	0x1016	; 0x1016 <__addsf3x>
    16d6:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__fp_round>

000016da <modf>:
    16da:	fa 01       	movw	r30, r20
    16dc:	dc 01       	movw	r26, r24
    16de:	aa 0f       	add	r26, r26
    16e0:	bb 1f       	adc	r27, r27
    16e2:	9b 01       	movw	r18, r22
    16e4:	ac 01       	movw	r20, r24
    16e6:	bf 57       	subi	r27, 0x7F	; 127
    16e8:	28 f4       	brcc	.+10     	; 0x16f4 <modf+0x1a>
    16ea:	22 27       	eor	r18, r18
    16ec:	33 27       	eor	r19, r19
    16ee:	44 27       	eor	r20, r20
    16f0:	50 78       	andi	r21, 0x80	; 128
    16f2:	20 c0       	rjmp	.+64     	; 0x1734 <modf+0x5a>
    16f4:	b7 51       	subi	r27, 0x17	; 23
    16f6:	90 f4       	brcc	.+36     	; 0x171c <modf+0x42>
    16f8:	ab 2f       	mov	r26, r27
    16fa:	00 24       	eor	r0, r0
    16fc:	46 95       	lsr	r20
    16fe:	37 95       	ror	r19
    1700:	27 95       	ror	r18
    1702:	01 1c       	adc	r0, r1
    1704:	a3 95       	inc	r26
    1706:	d2 f3       	brmi	.-12     	; 0x16fc <modf+0x22>
    1708:	00 20       	and	r0, r0
    170a:	71 f0       	breq	.+28     	; 0x1728 <modf+0x4e>
    170c:	22 0f       	add	r18, r18
    170e:	33 1f       	adc	r19, r19
    1710:	44 1f       	adc	r20, r20
    1712:	b3 95       	inc	r27
    1714:	da f3       	brmi	.-10     	; 0x170c <modf+0x32>
    1716:	0e d0       	rcall	.+28     	; 0x1734 <modf+0x5a>
    1718:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__subsf3>
    171c:	61 30       	cpi	r22, 0x01	; 1
    171e:	71 05       	cpc	r23, r1
    1720:	a0 e8       	ldi	r26, 0x80	; 128
    1722:	8a 07       	cpc	r24, r26
    1724:	b9 46       	sbci	r27, 0x69	; 105
    1726:	30 f4       	brcc	.+12     	; 0x1734 <modf+0x5a>
    1728:	9b 01       	movw	r18, r22
    172a:	ac 01       	movw	r20, r24
    172c:	66 27       	eor	r22, r22
    172e:	77 27       	eor	r23, r23
    1730:	88 27       	eor	r24, r24
    1732:	90 78       	andi	r25, 0x80	; 128
    1734:	30 96       	adiw	r30, 0x00	; 0
    1736:	21 f0       	breq	.+8      	; 0x1740 <modf+0x66>
    1738:	20 83       	st	Z, r18
    173a:	31 83       	std	Z+1, r19	; 0x01
    173c:	42 83       	std	Z+2, r20	; 0x02
    173e:	53 83       	std	Z+3, r21	; 0x03
    1740:	08 95       	ret

00001742 <__fp_mpack>:
    1742:	9f 3f       	cpi	r25, 0xFF	; 255
    1744:	31 f0       	breq	.+12     	; 0x1752 <__fp_mpack_finite+0xc>

00001746 <__fp_mpack_finite>:
    1746:	91 50       	subi	r25, 0x01	; 1
    1748:	20 f4       	brcc	.+8      	; 0x1752 <__fp_mpack_finite+0xc>
    174a:	87 95       	ror	r24
    174c:	77 95       	ror	r23
    174e:	67 95       	ror	r22
    1750:	b7 95       	ror	r27
    1752:	88 0f       	add	r24, r24
    1754:	91 1d       	adc	r25, r1
    1756:	96 95       	lsr	r25
    1758:	87 95       	ror	r24
    175a:	97 f9       	bld	r25, 7
    175c:	08 95       	ret

0000175e <__udivmodsi4>:
    175e:	a1 e2       	ldi	r26, 0x21	; 33
    1760:	1a 2e       	mov	r1, r26
    1762:	aa 1b       	sub	r26, r26
    1764:	bb 1b       	sub	r27, r27
    1766:	fd 01       	movw	r30, r26
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <__udivmodsi4_ep>

0000176a <__udivmodsi4_loop>:
    176a:	aa 1f       	adc	r26, r26
    176c:	bb 1f       	adc	r27, r27
    176e:	ee 1f       	adc	r30, r30
    1770:	ff 1f       	adc	r31, r31
    1772:	a2 17       	cp	r26, r18
    1774:	b3 07       	cpc	r27, r19
    1776:	e4 07       	cpc	r30, r20
    1778:	f5 07       	cpc	r31, r21
    177a:	20 f0       	brcs	.+8      	; 0x1784 <__udivmodsi4_ep>
    177c:	a2 1b       	sub	r26, r18
    177e:	b3 0b       	sbc	r27, r19
    1780:	e4 0b       	sbc	r30, r20
    1782:	f5 0b       	sbc	r31, r21

00001784 <__udivmodsi4_ep>:
    1784:	66 1f       	adc	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	1a 94       	dec	r1
    178e:	69 f7       	brne	.-38     	; 0x176a <__udivmodsi4_loop>
    1790:	60 95       	com	r22
    1792:	70 95       	com	r23
    1794:	80 95       	com	r24
    1796:	90 95       	com	r25
    1798:	9b 01       	movw	r18, r22
    179a:	ac 01       	movw	r20, r24
    179c:	bd 01       	movw	r22, r26
    179e:	cf 01       	movw	r24, r30
    17a0:	08 95       	ret

000017a2 <_exit>:
    17a2:	f8 94       	cli

000017a4 <__stop_program>:
    17a4:	ff cf       	rjmp	.-2      	; 0x17a4 <__stop_program>
