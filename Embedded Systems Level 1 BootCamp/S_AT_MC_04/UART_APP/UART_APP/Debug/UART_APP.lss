
UART_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000654  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000654  000006e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080008c  0080008c  00000714  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ee  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f3  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079b  00000000  00000000  00002109  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  000028a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076b  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000610  00000000  00000000  0000314f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000375f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 28 03 	jmp	0x650	; 0x650 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "MCAL/UART/uart.h"
#include "MCAL/DIO/dio.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	66 97       	sbiw	r28, 0x16	; 22
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	ST_UART_CONFIG_t configs = {
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	de 01       	movw	r26, r28
  ae:	11 96       	adiw	r26, 0x01	; 1
  b0:	01 90       	ld	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	8a 95       	dec	r24
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1e>
		UART_NO_PARITY,
		UART_1_STOP_BIT,
		UART_TRANSMITER_INT_DISABLE,
		UART_RECIEVER_INT_DISABLE
	};
	ST_DIO_config port_b_5 = {DIO_PORTB, PIN_5, OUTPUT};
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	8d 87       	std	Y+13, r24	; 0x0d
  bc:	95 e0       	ldi	r25, 0x05	; 5
  be:	9e 87       	std	Y+14, r25	; 0x0e
  c0:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_Init(&port_b_5);
  c2:	ce 01       	movw	r24, r28
  c4:	0d 96       	adiw	r24, 0x0d	; 13
  c6:	0e 94 b5 00 	call	0x16a	; 0x16a <DIO_Init>
	UART_Init(configs);
  ca:	e9 80       	ldd	r14, Y+1	; 0x01
  cc:	fa 80       	ldd	r15, Y+2	; 0x02
  ce:	0b 81       	ldd	r16, Y+3	; 0x03
  d0:	1c 81       	ldd	r17, Y+4	; 0x04
  d2:	2d 81       	ldd	r18, Y+5	; 0x05
  d4:	3e 81       	ldd	r19, Y+6	; 0x06
  d6:	4f 81       	ldd	r20, Y+7	; 0x07
  d8:	58 85       	ldd	r21, Y+8	; 0x08
  da:	69 85       	ldd	r22, Y+9	; 0x09
  dc:	7a 85       	ldd	r23, Y+10	; 0x0a
  de:	8b 85       	ldd	r24, Y+11	; 0x0b
  e0:	9c 85       	ldd	r25, Y+12	; 0x0c
  e2:	0e 94 c7 01 	call	0x38e	; 0x38e <UART_Init>
	UART_TransmitString((uint8_t *) "Start");
  e6:	8c e6       	ldi	r24, 0x6C	; 108
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 be 02 	call	0x57c	; 0x57c <UART_TransmitString>
	UART_TransmitChar('\r');
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 b1 02 	call	0x562	; 0x562 <UART_TransmitChar>
	uint16_t* received ;
	uint8_t y[7];
	UART_TransmitString((uint8_t *) "Received: ");
  f6:	82 e7       	ldi	r24, 0x72	; 114
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 be 02 	call	0x57c	; 0x57c <UART_TransmitString>
	if (!(UART_RecieveString(y)))
  fe:	ce 01       	movw	r24, r28
 100:	40 96       	adiw	r24, 0x10	; 16
 102:	0e 94 ee 02 	call	0x5dc	; 0x5dc <UART_RecieveString>
 106:	81 11       	cpse	r24, r1
 108:	05 c0       	rjmp	.+10     	; 0x114 <main+0x82>
	{
		DIO_Write_PIN(DIO_PORTB, PIN_5, HIGH);
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	65 e0       	ldi	r22, 0x05	; 5
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 31 01 	call	0x262	; 0x262 <DIO_Write_PIN>
	}
	UART_TransmitString((uint8_t *) "       ");
 114:	8d e7       	ldi	r24, 0x7D	; 125
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 be 02 	call	0x57c	; 0x57c <UART_TransmitString>
	UART_TransmitString((uint8_t *) "Sent: ");
 11c:	85 e8       	ldi	r24, 0x85	; 133
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 be 02 	call	0x57c	; 0x57c <UART_TransmitString>
	UART_TransmitString(y);
 124:	ce 01       	movw	r24, r28
 126:	40 96       	adiw	r24, 0x10	; 16
 128:	0e 94 be 02 	call	0x57c	; 0x57c <UART_TransmitString>
	UART_TransmitChar('\r');
 12c:	8d e0       	ldi	r24, 0x0D	; 13
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 b1 02 	call	0x562	; 0x562 <UART_TransmitChar>
	/* Replace with your application code */
	while (1)
	{
		UART_TransmitString((uint8_t *) "Received: ");
 134:	82 e7       	ldi	r24, 0x72	; 114
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 be 02 	call	0x57c	; 0x57c <UART_TransmitString>
		UART_RecieveChar((uint16_t *) received);
 13c:	00 e0       	ldi	r16, 0x00	; 0
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	c8 01       	movw	r24, r16
 142:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <UART_RecieveChar>
		UART_TransmitString((uint8_t *) "       ");
 146:	8d e7       	ldi	r24, 0x7D	; 125
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 be 02 	call	0x57c	; 0x57c <UART_TransmitString>
		UART_TransmitString((uint8_t *) "Sent: ");
 14e:	85 e8       	ldi	r24, 0x85	; 133
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 be 02 	call	0x57c	; 0x57c <UART_TransmitString>
		UART_TransmitChar(*received);
 156:	f8 01       	movw	r30, r16
 158:	80 81       	ld	r24, Z
 15a:	91 81       	ldd	r25, Z+1	; 0x01
 15c:	0e 94 b1 02 	call	0x562	; 0x562 <UART_TransmitChar>
		UART_TransmitChar('\r');
 160:	8d e0       	ldi	r24, 0x0D	; 13
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 b1 02 	call	0x562	; 0x562 <UART_TransmitChar>
 168:	e5 cf       	rjmp	.-54     	; 0x134 <main+0xa2>

0000016a <DIO_Init>:
*/

#include "dio.h"

E_STATUS DIO_Init(ST_DIO_config* configurations)
{
 16a:	fc 01       	movw	r30, r24
	E_STATUS au8_error=E_INVALID;
	if(((configurations->port <= DIO_PORTD)||(configurations->port >= DIO_PORTA))&&
	((configurations->pin <= PIN_7)||(configurations->pin >= PIN_0)))
	{
		switch(configurations->port)
 16c:	90 81       	ld	r25, Z
 16e:	91 30       	cpi	r25, 0x01	; 1
 170:	19 f1       	breq	.+70     	; 0x1b8 <DIO_Init+0x4e>
 172:	30 f0       	brcs	.+12     	; 0x180 <DIO_Init+0x16>
 174:	92 30       	cpi	r25, 0x02	; 2
 176:	e1 f1       	breq	.+120    	; 0x1f0 <DIO_Init+0x86>
 178:	93 30       	cpi	r25, 0x03	; 3
 17a:	09 f4       	brne	.+2      	; 0x17e <DIO_Init+0x14>
 17c:	55 c0       	rjmp	.+170    	; 0x228 <DIO_Init+0xbe>
 17e:	6f c0       	rjmp	.+222    	; 0x25e <DIO_Init+0xf4>
		{
			case DIO_PORTA:
			{
				if(configurations->dir == OUTPUT)
 180:	82 81       	ldd	r24, Z+2	; 0x02
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	61 f4       	brne	.+24     	; 0x19e <DIO_Init+0x34>
				{
					SET_BIT(PORTA_DIR,configurations->pin);
 186:	2a b3       	in	r18, 0x1a	; 26
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 80       	ldd	r0, Z+1	; 0x01
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_Init+0x2a>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	0a 94       	dec	r0
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_Init+0x26>
 198:	82 2b       	or	r24, r18
 19a:	8a bb       	out	0x1a, r24	; 26
 19c:	60 c0       	rjmp	.+192    	; 0x25e <DIO_Init+0xf4>
				}else
				{
					RESET_BIT(PORTA_DIR,configurations->pin);
 19e:	2a b3       	in	r18, 0x1a	; 26
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	01 80       	ldd	r0, Z+1	; 0x01
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_Init+0x42>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_Init+0x3e>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	8a bb       	out	0x1a, r24	; 26
 1b6:	53 c0       	rjmp	.+166    	; 0x25e <DIO_Init+0xf4>
				}
				break;
			}
			case DIO_PORTB:
			{
				if(configurations->dir == OUTPUT)
 1b8:	82 81       	ldd	r24, Z+2	; 0x02
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	61 f4       	brne	.+24     	; 0x1d6 <DIO_Init+0x6c>
				{
					SET_BIT(PORTB_DIR,configurations->pin);
 1be:	27 b3       	in	r18, 0x17	; 23
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 80       	ldd	r0, Z+1	; 0x01
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_Init+0x62>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	0a 94       	dec	r0
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_Init+0x5e>
 1d0:	82 2b       	or	r24, r18
 1d2:	87 bb       	out	0x17, r24	; 23
 1d4:	44 c0       	rjmp	.+136    	; 0x25e <DIO_Init+0xf4>
				}else
				{
					RESET_BIT(PORTB_DIR,configurations->pin);
 1d6:	27 b3       	in	r18, 0x17	; 23
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	01 80       	ldd	r0, Z+1	; 0x01
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_Init+0x7a>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_Init+0x76>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	87 bb       	out	0x17, r24	; 23
 1ee:	37 c0       	rjmp	.+110    	; 0x25e <DIO_Init+0xf4>
				}
				break;
			}
			case DIO_PORTC:
			{
				if(configurations->dir == OUTPUT)
 1f0:	82 81       	ldd	r24, Z+2	; 0x02
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	61 f4       	brne	.+24     	; 0x20e <DIO_Init+0xa4>
				{
					SET_BIT(PORTC_DIR,configurations->pin);
 1f6:	24 b3       	in	r18, 0x14	; 20
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	01 80       	ldd	r0, Z+1	; 0x01
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_Init+0x9a>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_Init+0x96>
 208:	82 2b       	or	r24, r18
 20a:	84 bb       	out	0x14, r24	; 20
 20c:	28 c0       	rjmp	.+80     	; 0x25e <DIO_Init+0xf4>
				}else
				{
					RESET_BIT(PORTC_DIR,configurations->pin);
 20e:	24 b3       	in	r18, 0x14	; 20
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	01 80       	ldd	r0, Z+1	; 0x01
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_Init+0xb2>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_Init+0xae>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	84 bb       	out	0x14, r24	; 20
 226:	1b c0       	rjmp	.+54     	; 0x25e <DIO_Init+0xf4>
				}
				break;
			}
			case DIO_PORTD:
			{
				if(configurations->dir == OUTPUT)
 228:	82 81       	ldd	r24, Z+2	; 0x02
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	61 f4       	brne	.+24     	; 0x246 <DIO_Init+0xdc>
				{
					SET_BIT(PORTD_DIR,configurations->pin);
 22e:	21 b3       	in	r18, 0x11	; 17
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 80       	ldd	r0, Z+1	; 0x01
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_Init+0xd2>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	0a 94       	dec	r0
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_Init+0xce>
 240:	82 2b       	or	r24, r18
 242:	81 bb       	out	0x11, r24	; 17
 244:	0c c0       	rjmp	.+24     	; 0x25e <DIO_Init+0xf4>
				}else
				{
					RESET_BIT(PORTD_DIR,configurations->pin);
 246:	21 b3       	in	r18, 0x11	; 17
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	01 80       	ldd	r0, Z+1	; 0x01
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_Init+0xea>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_Init+0xe6>
 258:	80 95       	com	r24
 25a:	82 23       	and	r24, r18
 25c:	81 bb       	out	0x11, r24	; 17
			}

		}
	}
	return au8_error;
}
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	08 95       	ret

00000262 <DIO_Write_PIN>:


E_STATUS DIO_Write_PIN(uint8_t port,EN_pins pin,uint8_t data)
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
 262:	84 30       	cpi	r24, 0x04	; 4
 264:	08 f0       	brcs	.+2      	; 0x268 <DIO_Write_PIN+0x6>
 266:	78 c0       	rjmp	.+240    	; 0x358 <DIO_Write_PIN+0xf6>
 268:	68 30       	cpi	r22, 0x08	; 8
 26a:	08 f0       	brcs	.+2      	; 0x26e <DIO_Write_PIN+0xc>
 26c:	77 c0       	rjmp	.+238    	; 0x35c <DIO_Write_PIN+0xfa>
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
		switch(port)
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	11 f1       	breq	.+68     	; 0x2b6 <DIO_Write_PIN+0x54>
 272:	30 f0       	brcs	.+12     	; 0x280 <DIO_Write_PIN+0x1e>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	d1 f1       	breq	.+116    	; 0x2ec <DIO_Write_PIN+0x8a>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	09 f4       	brne	.+2      	; 0x27e <DIO_Write_PIN+0x1c>
 27c:	52 c0       	rjmp	.+164    	; 0x322 <DIO_Write_PIN+0xc0>
 27e:	70 c0       	rjmp	.+224    	; 0x360 <DIO_Write_PIN+0xfe>
		{
			case DIO_PORTA:
			{
				if(data == HIGH)
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	61 f4       	brne	.+24     	; 0x29c <DIO_Write_PIN+0x3a>
				{
					SET_BIT(PORTA_DATA,pin);
 284:	2b b3       	in	r18, 0x1b	; 27
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_Write_PIN+0x2e>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_Write_PIN+0x2a>
 294:	82 2b       	or	r24, r18
 296:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTA_DATA,pin);
				}else
				{
					RESET_BIT(PORTA_DATA,pin);
 29c:	2b b3       	in	r18, 0x1b	; 27
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_Write_PIN+0x46>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_Write_PIN+0x42>
 2ac:	80 95       	com	r24
 2ae:	82 23       	and	r24, r18
 2b0:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	08 95       	ret
				}
				break;
			}
			case DIO_PORTB:
			{
				if(data == HIGH)
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	61 f4       	brne	.+24     	; 0x2d2 <DIO_Write_PIN+0x70>
				{
					SET_BIT(PORTB_DATA,pin);
 2ba:	28 b3       	in	r18, 0x18	; 24
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_Write_PIN+0x64>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_Write_PIN+0x60>
 2ca:	82 2b       	or	r24, r18
 2cc:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTB_DATA,pin);
				}else
				{
					RESET_BIT(PORTB_DATA,pin);
 2d2:	28 b3       	in	r18, 0x18	; 24
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_Write_PIN+0x7c>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_Write_PIN+0x78>
 2e2:	80 95       	com	r24
 2e4:	82 23       	and	r24, r18
 2e6:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	08 95       	ret
				}
				break;
			}
			case DIO_PORTC:
			{
				if(data == HIGH)
 2ec:	41 30       	cpi	r20, 0x01	; 1
 2ee:	61 f4       	brne	.+24     	; 0x308 <DIO_Write_PIN+0xa6>
				{
					SET_BIT(PORTC_DATA,pin);
 2f0:	25 b3       	in	r18, 0x15	; 21
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_Write_PIN+0x9a>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_Write_PIN+0x96>
 300:	82 2b       	or	r24, r18
 302:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTC_DATA,pin);
				}else
				{
					RESET_BIT(PORTC_DATA,pin);
 308:	25 b3       	in	r18, 0x15	; 21
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_Write_PIN+0xb2>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_Write_PIN+0xae>
 318:	80 95       	com	r24
 31a:	82 23       	and	r24, r18
 31c:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	08 95       	ret
				}
				break;
			}
			case DIO_PORTD:
			{
				if(data == HIGH)
 322:	41 30       	cpi	r20, 0x01	; 1
 324:	61 f4       	brne	.+24     	; 0x33e <DIO_Write_PIN+0xdc>
				{
					SET_BIT(PORTD_DATA,pin);
 326:	22 b3       	in	r18, 0x12	; 18
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_Write_PIN+0xd0>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_Write_PIN+0xcc>
 336:	82 2b       	or	r24, r18
 338:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTD_DATA,pin);
				}else
				{
					RESET_BIT(PORTD_DATA,pin);
 33e:	22 b3       	in	r18, 0x12	; 18
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_Write_PIN+0xe8>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_Write_PIN+0xe4>
 34e:	80 95       	com	r24
 350:	82 23       	and	r24, r18
 352:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	08 95       	ret
}


E_STATUS DIO_Write_PIN(uint8_t port,EN_pins pin,uint8_t data)
{
	E_STATUS au8_error=E_INVALID;
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	08 95       	ret
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 360:	81 e0       	ldi	r24, 0x01	; 1
			}

		}
	}
	return au8_error;
}
 362:	08 95       	ret

00000364 <char_bits>:
*                         LOCAL FUNCTION IMPLEMENTATION								*
*******************************************************************************/

void char_bits(uint8_t bits_no)
{
	switch (bits_no){
 364:	84 30       	cpi	r24, 0x04	; 4
 366:	49 f4       	brne	.+18     	; 0x37a <char_bits+0x16>
		case (UART_9_Bit_CHAR) :
		{
			SET_BIT(UCSRC, URSEL);
 368:	90 b5       	in	r25, 0x20	; 32
 36a:	90 68       	ori	r25, 0x80	; 128
 36c:	90 bd       	out	0x20, r25	; 32
			UCSRC |= ((uint8_t)(UART_8_Bit_CHAR) << 1);
 36e:	90 b5       	in	r25, 0x20	; 32
 370:	96 60       	ori	r25, 0x06	; 6
 372:	90 bd       	out	0x20, r25	; 32
			SET_BIT(UCSRB, UCSZ2);
 374:	9a b1       	in	r25, 0x0a	; 10
 376:	94 60       	ori	r25, 0x04	; 4
 378:	9a b9       	out	0x0a, r25	; 10
		}
		default:
		{
			SET_BIT(UCSRC, URSEL);
 37a:	90 b5       	in	r25, 0x20	; 32
 37c:	90 68       	ori	r25, 0x80	; 128
 37e:	90 bd       	out	0x20, r25	; 32
			UCSRC |= (bits_no << 1);
 380:	20 b5       	in	r18, 0x20	; 32
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	82 2b       	or	r24, r18
 38a:	80 bd       	out	0x20, r24	; 32
 38c:	08 95       	ret

0000038e <UART_Init>:

/******************************************************************************
*                         APIS IMPLEMENTATION											*
*******************************************************************************/
UART_STATUS UART_Init(ST_UART_CONFIG_t config)
{
 38e:	ef 92       	push	r14
 390:	ff 92       	push	r15
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	2c 97       	sbiw	r28, 0x0c	; 12
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	f8 94       	cli
 3a4:	de bf       	out	0x3e, r29	; 62
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	cd bf       	out	0x3d, r28	; 61
 3aa:	e9 82       	std	Y+1, r14	; 0x01
 3ac:	fa 82       	std	Y+2, r15	; 0x02
 3ae:	0b 83       	std	Y+3, r16	; 0x03
 3b0:	1c 83       	std	Y+4, r17	; 0x04
 3b2:	2d 83       	std	Y+5, r18	; 0x05
 3b4:	3e 83       	std	Y+6, r19	; 0x06
 3b6:	4f 83       	std	Y+7, r20	; 0x07
 3b8:	58 87       	std	Y+8, r21	; 0x08
 3ba:	69 87       	std	Y+9, r22	; 0x09
 3bc:	7a 87       	std	Y+10, r23	; 0x0a
 3be:	8b 87       	std	Y+11, r24	; 0x0b
 3c0:	9c 87       	std	Y+12, r25	; 0x0c
	g_ST_UART_CONFIG_t = config;
 3c2:	8c e0       	ldi	r24, 0x0C	; 12
 3c4:	fe 01       	movw	r30, r28
 3c6:	31 96       	adiw	r30, 0x01	; 1
 3c8:	ac e8       	ldi	r26, 0x8C	; 140
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	01 90       	ld	r0, Z+
 3ce:	0d 92       	st	X+, r0
 3d0:	8a 95       	dec	r24
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <UART_Init+0x3e>
	uint32_t UBRR_VAL;
	/************** Check Baud rate and Speed mode **************/
	if ((g_ST_UART_CONFIG_t.BAUD_RATE >= 0) && (g_ST_UART_CONFIG_t.BAUD_RATE <= MAX_BAUD_RATE))
 3d4:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <__data_end+0x1>
 3d8:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <__data_end+0x2>
 3dc:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <__data_end+0x3>
 3e0:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <__data_end+0x4>
 3e4:	81 15       	cp	r24, r1
 3e6:	20 e1       	ldi	r18, 0x10	; 16
 3e8:	92 07       	cpc	r25, r18
 3ea:	a1 05       	cpc	r26, r1
 3ec:	b1 05       	cpc	r27, r1
 3ee:	08 f0       	brcs	.+2      	; 0x3f2 <UART_Init+0x64>
 3f0:	9a c0       	rjmp	.+308    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
	{
		if(g_ST_UART_CONFIG_t.SPEED_MODE == UART_NORMAL_SPEED){
 3f2:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <__data_end>
 3f6:	21 11       	cpse	r18, r1
 3f8:	1f c0       	rjmp	.+62     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			UBRR_VAL = (uint32_t) ((F_CPU/(16*g_ST_UART_CONFIG_t.BAUD_RATE))-1);
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	aa 1f       	adc	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	aa 1f       	adc	r26, r26
 408:	bb 1f       	adc	r27, r27
 40a:	9c 01       	movw	r18, r24
 40c:	ad 01       	movw	r20, r26
 40e:	22 0f       	add	r18, r18
 410:	33 1f       	adc	r19, r19
 412:	44 1f       	adc	r20, r20
 414:	55 1f       	adc	r21, r21
 416:	22 0f       	add	r18, r18
 418:	33 1f       	adc	r19, r19
 41a:	44 1f       	adc	r20, r20
 41c:	55 1f       	adc	r21, r21
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	72 e1       	ldi	r23, 0x12	; 18
 422:	8a e7       	ldi	r24, 0x7A	; 122
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 06 03 	call	0x60c	; 0x60c <__udivmodsi4>
 42a:	ba 01       	movw	r22, r20
 42c:	a9 01       	movw	r20, r18
 42e:	41 50       	subi	r20, 0x01	; 1
 430:	51 09       	sbc	r21, r1
 432:	61 09       	sbc	r22, r1
 434:	71 09       	sbc	r23, r1
 436:	27 c0       	rjmp	.+78     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		}
		else if(g_ST_UART_CONFIG_t.SPEED_MODE == UART_DOUBLE_SPEED)
 438:	22 30       	cpi	r18, 0x02	; 2
 43a:	09 f0       	breq	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43c:	76 c0       	rjmp	.+236    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
		{
			SET_BIT(UCSRA, U2X);
 43e:	8b b1       	in	r24, 0x0b	; 11
 440:	82 60       	ori	r24, 0x02	; 2
 442:	8b b9       	out	0x0b, r24	; 11
			UBRR_VAL = (uint16_t) ((F_CPU/(8*g_ST_UART_CONFIG_t.BAUD_RATE))-1);
 444:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <__data_end+0x1>
 448:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <__data_end+0x2>
 44c:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <__data_end+0x3>
 450:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <__data_end+0x4>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	aa 1f       	adc	r26, r26
 45a:	bb 1f       	adc	r27, r27
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	aa 1f       	adc	r26, r26
 462:	bb 1f       	adc	r27, r27
 464:	9c 01       	movw	r18, r24
 466:	ad 01       	movw	r20, r26
 468:	22 0f       	add	r18, r18
 46a:	33 1f       	adc	r19, r19
 46c:	44 1f       	adc	r20, r20
 46e:	55 1f       	adc	r21, r21
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	72 e1       	ldi	r23, 0x12	; 18
 474:	8a e7       	ldi	r24, 0x7A	; 122
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 06 03 	call	0x60c	; 0x60c <__udivmodsi4>
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	31 09       	sbc	r19, r1
 480:	a9 01       	movw	r20, r18
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	70 e0       	ldi	r23, 0x00	; 0
	}
	else
	{
		return UART_INVALID_BAUD_RATE;
	}
	UBRRH =(uint8_t) (UBRR_VAL >> 8);
 486:	bb 27       	eor	r27, r27
 488:	a7 2f       	mov	r26, r23
 48a:	96 2f       	mov	r25, r22
 48c:	85 2f       	mov	r24, r21
 48e:	80 bd       	out	0x20, r24	; 32
	UBRRL = (uint8_t) UBRR_VAL;
 490:	49 b9       	out	0x09, r20	; 9
	
	
	/************** Enable transmitter **************/
	if ((g_ST_UART_CONFIG_t.TRANSMIT == UART_TRANSMIT_ENABLE) || (g_ST_UART_CONFIG_t.TRANSMIT == UART_TRANSMIT_DISABLE))
 492:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__data_end+0x5>
 496:	88 30       	cpi	r24, 0x08	; 8
 498:	11 f0       	breq	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	81 11       	cpse	r24, r1
 49c:	48 c0       	rjmp	.+144    	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMIT));
 49e:	9a b1       	in	r25, 0x0a	; 10
 4a0:	89 2b       	or	r24, r25
 4a2:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_TRANSMIT_ERROR;
	}
	/************** Enable receiver **************/
	if ((g_ST_UART_CONFIG_t.RECIEVE == UART_RECIEVE_ENABLE) || (g_ST_UART_CONFIG_t.RECIEVE == UART_RECIEVE_DISABLE))
 4a4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end+0x6>
 4a8:	80 31       	cpi	r24, 0x10	; 16
 4aa:	11 f0       	breq	.+4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4ac:	81 11       	cpse	r24, r1
 4ae:	41 c0       	rjmp	.+130    	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE));
 4b0:	9a b1       	in	r25, 0x0a	; 10
 4b2:	89 2b       	or	r24, r25
 4b4:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_RECIEVE_ERROR;
	}
	/************** Char BITS **************/
	if ((g_ST_UART_CONFIG_t.CHAR_BITS >= UART_5_Bit_CHAR) && (g_ST_UART_CONFIG_t.CHAR_BITS <= UART_9_Bit_CHAR))
 4b6:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <__data_end+0x7>
 4ba:	85 30       	cpi	r24, 0x05	; 5
 4bc:	e0 f5       	brcc	.+120    	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
	{
		char_bits(g_ST_UART_CONFIG_t.CHAR_BITS);
 4be:	0e 94 b2 01 	call	0x364	; 0x364 <char_bits>
	else
	{
		return UART_CHAR_BITS_ERROR;
	}
	/************** Stop BITS **************/
	if ((g_ST_UART_CONFIG_t.STOP_BIT == UART_1_STOP_BIT) || (g_ST_UART_CONFIG_t.STOP_BIT == UART_2_STOP_BIT))
 4c2:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <__data_end+0x9>
 4c6:	88 23       	and	r24, r24
 4c8:	11 f0       	breq	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ca:	88 30       	cpi	r24, 0x08	; 8
 4cc:	b1 f5       	brne	.+108    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
	{
		SET_BIT(UCSRC, URSEL);
 4ce:	80 b5       	in	r24, 0x20	; 32
 4d0:	80 68       	ori	r24, 0x80	; 128
 4d2:	80 bd       	out	0x20, r24	; 32
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.STOP_BIT));
 4d4:	90 b5       	in	r25, 0x20	; 32
 4d6:	ec e8       	ldi	r30, 0x8C	; 140
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	81 85       	ldd	r24, Z+9	; 0x09
 4dc:	89 2b       	or	r24, r25
 4de:	80 bd       	out	0x20, r24	; 32
	else
	{
		return UART_STOP_BITS_ERROR;
	}
	/************** Parity BITS **************/
	if ((g_ST_UART_CONFIG_t.PARITY_MODE == UART_NO_PARITY) || (g_ST_UART_CONFIG_t.PARITY_MODE == UART_EVEN_PARITY) || (g_ST_UART_CONFIG_t.PARITY_MODE == UART_ODD_PARITY))
 4e0:	80 85       	ldd	r24, Z+8	; 0x08
 4e2:	88 23       	and	r24, r24
 4e4:	21 f0       	breq	.+8      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4e6:	80 32       	cpi	r24, 0x20	; 32
 4e8:	11 f0       	breq	.+4      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4ea:	80 33       	cpi	r24, 0x30	; 48
 4ec:	41 f5       	brne	.+80     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
	{
		SET_BIT(UCSRC, URSEL);
 4ee:	80 b5       	in	r24, 0x20	; 32
 4f0:	80 68       	ori	r24, 0x80	; 128
 4f2:	80 bd       	out	0x20, r24	; 32
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.PARITY_MODE));
 4f4:	90 b5       	in	r25, 0x20	; 32
 4f6:	ec e8       	ldi	r30, 0x8C	; 140
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 85       	ldd	r24, Z+8	; 0x08
 4fc:	89 2b       	or	r24, r25
 4fe:	80 bd       	out	0x20, r24	; 32
	else
	{
		return UART_PARITY_ERROR;
	}
	/************** Enable transmitter interrupt**************/
	if ((g_ST_UART_CONFIG_t.TRANSMITER_INT == UART_TRANSMITER_INT_ENABLE) || (g_ST_UART_CONFIG_t.TRANSMITER_INT == UART_TRANSMITER_INT_DISABLE))
 500:	82 85       	ldd	r24, Z+10	; 0x0a
 502:	80 34       	cpi	r24, 0x40	; 64
 504:	11 f0       	breq	.+4      	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 506:	81 11       	cpse	r24, r1
 508:	1c c0       	rjmp	.+56     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMITER_INT));
 50a:	9a b1       	in	r25, 0x0a	; 10
 50c:	89 2b       	or	r24, r25
 50e:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_TRANSMIT_ERROR;
	}
	/************** Enable receiver interrupt **************/
	if ((g_ST_UART_CONFIG_t.RECIEVE_INT == UART_RECIEVER_INT_ENABLE) || (g_ST_UART_CONFIG_t.RECIEVE_INT == UART_RECIEVER_INT_DISABLE))
 510:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <__data_end+0xb>
 514:	80 38       	cpi	r24, 0x80	; 128
 516:	11 f0       	breq	.+4      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 518:	81 11       	cpse	r24, r1
 51a:	15 c0       	rjmp	.+42     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE_INT));
 51c:	9a b1       	in	r25, 0x0a	; 10
 51e:	89 2b       	or	r24, r25
 520:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_RECIEVE_INT_ERROR;
	}
	g_u8_UART_init = INIT;
	return UART_SUCCESS;
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	11 c0       	rjmp	.+34     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
			return UART_ERROR_NOT_INITIALIZED;
		}
	}
	else
	{
		return UART_INVALID_BAUD_RATE;
 526:	85 e0       	ldi	r24, 0x05	; 5
 528:	0f c0       	rjmp	.+30     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
		{
			SET_BIT(UCSRA, U2X);
			UBRR_VAL = (uint16_t) ((F_CPU/(8*g_ST_UART_CONFIG_t.BAUD_RATE))-1);
		}
		else{
			return UART_ERROR_NOT_INITIALIZED;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0d c0       	rjmp	.+26     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMIT));
	}
	else
	{
		return UART_TRANSMIT_ERROR;
 52e:	86 e0       	ldi	r24, 0x06	; 6
 530:	0b c0       	rjmp	.+22     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE));
	}
	else
	{
		return UART_RECIEVE_ERROR;
 532:	87 e0       	ldi	r24, 0x07	; 7
 534:	09 c0       	rjmp	.+18     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
	{
		char_bits(g_ST_UART_CONFIG_t.CHAR_BITS);
	}
	else
	{
		return UART_CHAR_BITS_ERROR;
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	07 c0       	rjmp	.+14     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
		SET_BIT(UCSRC, URSEL);
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.STOP_BIT));
	}
	else
	{
		return UART_STOP_BITS_ERROR;
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	05 c0       	rjmp	.+10     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
		SET_BIT(UCSRC, URSEL);
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.PARITY_MODE));
	}
	else
	{
		return UART_PARITY_ERROR;
 53e:	84 e0       	ldi	r24, 0x04	; 4
 540:	03 c0       	rjmp	.+6      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMITER_INT));
	}
	else
	{
		return UART_TRANSMIT_ERROR;
 542:	86 e0       	ldi	r24, 0x06	; 6
 544:	01 c0       	rjmp	.+2      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE_INT));
	}
	else
	{
		return UART_RECIEVE_INT_ERROR;
 546:	89 e0       	ldi	r24, 0x09	; 9
	}
	g_u8_UART_init = INIT;
	return UART_SUCCESS;
}
 548:	2c 96       	adiw	r28, 0x0c	; 12
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	08 95       	ret

00000562 <UART_TransmitChar>:

UART_STATUS UART_TransmitChar(uint16_t data)
{
	while (! (READ_BIT(UCSRA, UDRE)));
 562:	5d 9b       	sbis	0x0b, 5	; 11
 564:	fe cf       	rjmp	.-4      	; 0x562 <UART_TransmitChar>
	if (g_ST_UART_CONFIG_t.CHAR_BITS == UART_9_Bit_CHAR)
 566:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <__data_end+0x7>
 56a:	24 30       	cpi	r18, 0x04	; 4
 56c:	21 f4       	brne	.+8      	; 0x576 <UART_TransmitChar+0x14>
	{
		UCSRB |= ((data >> 8) & 1);
 56e:	2a b1       	in	r18, 0x0a	; 10
 570:	91 70       	andi	r25, 0x01	; 1
 572:	92 2b       	or	r25, r18
 574:	9a b9       	out	0x0a, r25	; 10
	}
	/* Put data into buffer, sends the data */
	UDR = data;
 576:	8c b9       	out	0x0c, r24	; 12
	return UART_SUCCESS;
}
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	08 95       	ret

0000057c <UART_TransmitString>:

UART_STATUS UART_TransmitString(uint8_t *data)
{
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	8c 01       	movw	r16, r24
	uint8_t j = STRING_START;
 584:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (data[j]!= STRING_END)		/* Send string till null */
 586:	04 c0       	rjmp	.+8      	; 0x590 <UART_TransmitString+0x14>
	{
		UART_TransmitChar(data[j]);
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 b1 02 	call	0x562	; 0x562 <UART_TransmitChar>
		j++;
 58e:	cf 5f       	subi	r28, 0xFF	; 255

UART_STATUS UART_TransmitString(uint8_t *data)
{
	uint8_t j = STRING_START;
	
	while (data[j]!= STRING_END)		/* Send string till null */
 590:	f8 01       	movw	r30, r16
 592:	ec 0f       	add	r30, r28
 594:	f1 1d       	adc	r31, r1
 596:	80 81       	ld	r24, Z
 598:	81 11       	cpse	r24, r1
 59a:	f6 cf       	rjmp	.-20     	; 0x588 <UART_TransmitString+0xc>
		UART_TransmitChar(data[j]);
		j++;
	}
	
	return UART_SUCCESS;
}
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	08 95       	ret

000005a4 <UART_RecieveChar>:

UART_STATUS UART_RecieveChar(uint16_t * character)
{
 5a4:	fc 01       	movw	r30, r24
	while (! (READ_BIT(UCSRA, RXC)));
 5a6:	5f 9b       	sbis	0x0b, 7	; 11
 5a8:	fe cf       	rjmp	.-4      	; 0x5a6 <UART_RecieveChar+0x2>
	if (g_ST_UART_CONFIG_t.CHAR_BITS == UART_9_Bit_CHAR)
 5aa:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <__data_end+0x7>
 5ae:	84 30       	cpi	r24, 0x04	; 4
 5b0:	79 f4       	brne	.+30     	; 0x5d0 <UART_RecieveChar+0x2c>
	{
		while ((UCSRA) & ((1<<FE)|(1<<DOR)|(1<<PE)));
 5b2:	9b b1       	in	r25, 0x0b	; 11
 5b4:	9c 71       	andi	r25, 0x1C	; 28
 5b6:	e9 f7       	brne	.-6      	; 0x5b2 <UART_RecieveChar+0xe>
		UCSRB = (UCSRB >> 1) & 0x01;
 5b8:	8a b1       	in	r24, 0x0a	; 10
 5ba:	86 95       	lsr	r24
 5bc:	81 70       	andi	r24, 0x01	; 1
 5be:	8a b9       	out	0x0a, r24	; 10
		*character = ((UCSRB << 8) | UDR);
 5c0:	2a b1       	in	r18, 0x0a	; 10
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	32 2f       	mov	r19, r18
 5c6:	22 27       	eor	r18, r18
 5c8:	8c b1       	in	r24, 0x0c	; 12
 5ca:	28 2b       	or	r18, r24
 5cc:	31 83       	std	Z+1, r19	; 0x01
 5ce:	20 83       	st	Z, r18
	}
	
	*character =  UDR;				/* Return the byte*/
 5d0:	2c b1       	in	r18, 0x0c	; 12
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	31 83       	std	Z+1, r19	; 0x01
 5d6:	20 83       	st	Z, r18
	return UART_SUCCESS;
}
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	08 95       	ret

000005dc <UART_RecieveString>:

UART_STATUS UART_RecieveString(uint8_t *data)
{
 5dc:	ac 01       	movw	r20, r24
	uint8_t i = 0;
 5de:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t size = 7;
	
	while (i < size - 1) {              // check space is available (including additional null char at end)
 5e0:	0a c0       	rjmp	.+20     	; 0x5f6 <UART_RecieveString+0x1a>
		uint8_t c;
		while (! (READ_BIT(UCSRA, RXC)));  // wait for another char - WARNING this will wait forever if nothing is received
 5e2:	5f 9b       	sbis	0x0b, 7	; 11
 5e4:	fe cf       	rjmp	.-4      	; 0x5e2 <UART_RecieveString+0x6>
		c = (uint8_t)UDR;
 5e6:	2c b1       	in	r18, 0x0c	; 12
		if (c == STRING_END) break;           // break on NULL character
 5e8:	22 23       	and	r18, r18
 5ea:	51 f0       	breq	.+20     	; 0x600 <UART_RecieveString+0x24>
		data[i] =  (uint8_t)c;                       // write into the supplied buffer
 5ec:	fa 01       	movw	r30, r20
 5ee:	e9 0f       	add	r30, r25
 5f0:	f1 1d       	adc	r31, r1
 5f2:	20 83       	st	Z, r18
		i++;
 5f4:	9f 5f       	subi	r25, 0xFF	; 255
UART_STATUS UART_RecieveString(uint8_t *data)
{
	uint8_t i = 0;
	uint8_t size = 7;
	
	while (i < size - 1) {              // check space is available (including additional null char at end)
 5f6:	29 2f       	mov	r18, r25
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	26 30       	cpi	r18, 0x06	; 6
 5fc:	31 05       	cpc	r19, r1
 5fe:	8c f3       	brlt	.-30     	; 0x5e2 <UART_RecieveString+0x6>
		c = (uint8_t)UDR;
		if (c == STRING_END) break;           // break on NULL character
		data[i] =  (uint8_t)c;                       // write into the supplied buffer
		i++;
	}
	data[i] = STRING_END;
 600:	fa 01       	movw	r30, r20
 602:	e9 0f       	add	r30, r25
 604:	f1 1d       	adc	r31, r1
 606:	10 82       	st	Z, r1
	//return the received string
	return UART_SUCCESS;
}
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	08 95       	ret

0000060c <__udivmodsi4>:
 60c:	a1 e2       	ldi	r26, 0x21	; 33
 60e:	1a 2e       	mov	r1, r26
 610:	aa 1b       	sub	r26, r26
 612:	bb 1b       	sub	r27, r27
 614:	fd 01       	movw	r30, r26
 616:	0d c0       	rjmp	.+26     	; 0x632 <__udivmodsi4_ep>

00000618 <__udivmodsi4_loop>:
 618:	aa 1f       	adc	r26, r26
 61a:	bb 1f       	adc	r27, r27
 61c:	ee 1f       	adc	r30, r30
 61e:	ff 1f       	adc	r31, r31
 620:	a2 17       	cp	r26, r18
 622:	b3 07       	cpc	r27, r19
 624:	e4 07       	cpc	r30, r20
 626:	f5 07       	cpc	r31, r21
 628:	20 f0       	brcs	.+8      	; 0x632 <__udivmodsi4_ep>
 62a:	a2 1b       	sub	r26, r18
 62c:	b3 0b       	sbc	r27, r19
 62e:	e4 0b       	sbc	r30, r20
 630:	f5 0b       	sbc	r31, r21

00000632 <__udivmodsi4_ep>:
 632:	66 1f       	adc	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	1a 94       	dec	r1
 63c:	69 f7       	brne	.-38     	; 0x618 <__udivmodsi4_loop>
 63e:	60 95       	com	r22
 640:	70 95       	com	r23
 642:	80 95       	com	r24
 644:	90 95       	com	r25
 646:	9b 01       	movw	r18, r22
 648:	ac 01       	movw	r20, r24
 64a:	bd 01       	movw	r22, r26
 64c:	cf 01       	movw	r24, r30
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
