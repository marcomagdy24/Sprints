
UART_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00000436  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000b6  008000b6  00000520  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7e  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f8  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000521  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b0  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000253  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000296b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 eb       	ldi	r26, 0xB6	; 182
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3c       	cpi	r26, 0xC2	; 194
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "MCAL/UART/uart.h"
#include "MCAL/DIO/dio.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	68 97       	sbiw	r28, 0x18	; 24
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	ST_UART_CONFIG_t configs = {
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	e0 e6       	ldi	r30, 0x60	; 96
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	de 01       	movw	r26, r28
  ae:	11 96       	adiw	r26, 0x01	; 1
  b0:	01 90       	ld	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	8a 95       	dec	r24
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x1e>
		UART_NO_PARITY,
		UART_1_STOP_BIT,
		UART_TRANSMITER_INT_DISABLE,
		UART_RECIEVER_INT_DISABLE
	};
	UART_Init(configs);
  b8:	e9 80       	ldd	r14, Y+1	; 0x01
  ba:	fa 80       	ldd	r15, Y+2	; 0x02
  bc:	0b 81       	ldd	r16, Y+3	; 0x03
  be:	1c 81       	ldd	r17, Y+4	; 0x04
  c0:	2d 81       	ldd	r18, Y+5	; 0x05
  c2:	3e 81       	ldd	r19, Y+6	; 0x06
  c4:	4f 81       	ldd	r20, Y+7	; 0x07
  c6:	58 85       	ldd	r21, Y+8	; 0x08
  c8:	69 85       	ldd	r22, Y+9	; 0x09
  ca:	7a 85       	ldd	r23, Y+10	; 0x0a
  cc:	8b 85       	ldd	r24, Y+11	; 0x0b
  ce:	9c 85       	ldd	r25, Y+12	; 0x0c
  d0:	0e 94 b4 00 	call	0x168	; 0x168 <UART_Init>
	UART_TransmitString((uint8_t *) "Start");
  d4:	8c e6       	ldi	r24, 0x6C	; 108
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 ab 01 	call	0x356	; 0x356 <UART_TransmitString>
	UART_TransmitChar(NEW_LINE);
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 9e 01 	call	0x33c	; 0x33c <UART_TransmitChar>
	uint16_t received ;
	uint8_t y[10];
	UART_TransmitString((uint8_t *) "Received String: ");
  e4:	82 e7       	ldi	r24, 0x72	; 114
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 ab 01 	call	0x356	; 0x356 <UART_TransmitString>
	UART_RecieveString(y);
  ec:	ce 01       	movw	r24, r28
  ee:	0f 96       	adiw	r24, 0x0f	; 15
  f0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <UART_RecieveString>
	UART_TransmitString((uint8_t *) "Sent String: ");
  f4:	84 e8       	ldi	r24, 0x84	; 132
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 ab 01 	call	0x356	; 0x356 <UART_TransmitString>
	UART_TransmitString(y);
  fc:	ce 01       	movw	r24, r28
  fe:	0f 96       	adiw	r24, 0x0f	; 15
 100:	0e 94 ab 01 	call	0x356	; 0x356 <UART_TransmitString>
	UART_TransmitChar(NEW_LINE);
 104:	8d e0       	ldi	r24, 0x0D	; 13
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 9e 01 	call	0x33c	; 0x33c <UART_TransmitChar>
	/* Replace with your application code */
	while (1)
	{
		UART_TransmitString((uint8_t *) "Received Char: ");
 10c:	82 e9       	ldi	r24, 0x92	; 146
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 ab 01 	call	0x356	; 0x356 <UART_TransmitString>
		UART_RecieveChar(&received);
 114:	ce 01       	movw	r24, r28
 116:	0d 96       	adiw	r24, 0x0d	; 13
 118:	0e 94 c0 01 	call	0x380	; 0x380 <UART_RecieveChar>
		UART_TransmitString((uint8_t *) "       ");
 11c:	82 ea       	ldi	r24, 0xA2	; 162
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 ab 01 	call	0x356	; 0x356 <UART_TransmitString>
		UART_TransmitString((uint8_t *) "Sent Char: ");
 124:	8a ea       	ldi	r24, 0xAA	; 170
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 ab 01 	call	0x356	; 0x356 <UART_TransmitString>
		UART_TransmitChar(received);
 12c:	8d 85       	ldd	r24, Y+13	; 0x0d
 12e:	9e 85       	ldd	r25, Y+14	; 0x0e
 130:	0e 94 9e 01 	call	0x33c	; 0x33c <UART_TransmitChar>
		UART_TransmitChar(NEW_LINE);
 134:	8d e0       	ldi	r24, 0x0D	; 13
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 9e 01 	call	0x33c	; 0x33c <UART_TransmitChar>
 13c:	e7 cf       	rjmp	.-50     	; 0x10c <main+0x7a>

0000013e <char_bits>:
*                         LOCAL FUNCTION IMPLEMENTATION								*
*******************************************************************************/

void char_bits(uint8_t bits_no)
{
	switch (bits_no){
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	49 f4       	brne	.+18     	; 0x154 <char_bits+0x16>
		case (UART_9_Bit_CHAR) :
		{
			SET_BIT(UCSRC, URSEL);
 142:	90 b5       	in	r25, 0x20	; 32
 144:	90 68       	ori	r25, 0x80	; 128
 146:	90 bd       	out	0x20, r25	; 32
			UCSRC |= ((uint8_t)(UART_8_Bit_CHAR) << 1);
 148:	90 b5       	in	r25, 0x20	; 32
 14a:	96 60       	ori	r25, 0x06	; 6
 14c:	90 bd       	out	0x20, r25	; 32
			SET_BIT(UCSRB, UCSZ2);
 14e:	9a b1       	in	r25, 0x0a	; 10
 150:	94 60       	ori	r25, 0x04	; 4
 152:	9a b9       	out	0x0a, r25	; 10
		}
		default:
		{
			SET_BIT(UCSRC, URSEL);
 154:	90 b5       	in	r25, 0x20	; 32
 156:	90 68       	ori	r25, 0x80	; 128
 158:	90 bd       	out	0x20, r25	; 32
			UCSRC |= (bits_no << 1);
 15a:	20 b5       	in	r18, 0x20	; 32
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	82 2b       	or	r24, r18
 164:	80 bd       	out	0x20, r24	; 32
 166:	08 95       	ret

00000168 <UART_Init>:

/******************************************************************************
*                         APIS IMPLEMENTATION											*
*******************************************************************************/
UART_STATUS_t UART_Init(ST_UART_CONFIG_t config)
{
 168:	ef 92       	push	r14
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	2c 97       	sbiw	r28, 0x0c	; 12
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	f8 94       	cli
 17e:	de bf       	out	0x3e, r29	; 62
 180:	0f be       	out	0x3f, r0	; 63
 182:	cd bf       	out	0x3d, r28	; 61
 184:	e9 82       	std	Y+1, r14	; 0x01
 186:	fa 82       	std	Y+2, r15	; 0x02
 188:	0b 83       	std	Y+3, r16	; 0x03
 18a:	1c 83       	std	Y+4, r17	; 0x04
 18c:	2d 83       	std	Y+5, r18	; 0x05
 18e:	3e 83       	std	Y+6, r19	; 0x06
 190:	4f 83       	std	Y+7, r20	; 0x07
 192:	58 87       	std	Y+8, r21	; 0x08
 194:	69 87       	std	Y+9, r22	; 0x09
 196:	7a 87       	std	Y+10, r23	; 0x0a
 198:	8b 87       	std	Y+11, r24	; 0x0b
 19a:	9c 87       	std	Y+12, r25	; 0x0c
	g_ST_UART_CONFIG_t = config;
 19c:	8c e0       	ldi	r24, 0x0C	; 12
 19e:	fe 01       	movw	r30, r28
 1a0:	31 96       	adiw	r30, 0x01	; 1
 1a2:	a6 eb       	ldi	r26, 0xB6	; 182
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	8a 95       	dec	r24
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <UART_Init+0x3e>
	uint32_t UBRR_VAL;
	/************** Check Baud rate and Speed mode **************/
	if ((g_ST_UART_CONFIG_t.BAUD_RATE >= 0) && (g_ST_UART_CONFIG_t.BAUD_RATE <= MAX_BAUD_RATE))
 1ae:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <__data_end+0x1>
 1b2:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <__data_end+0x2>
 1b6:	a0 91 b9 00 	lds	r26, 0x00B9	; 0x8000b9 <__data_end+0x3>
 1ba:	b0 91 ba 00 	lds	r27, 0x00BA	; 0x8000ba <__data_end+0x4>
 1be:	81 15       	cp	r24, r1
 1c0:	20 e1       	ldi	r18, 0x10	; 16
 1c2:	92 07       	cpc	r25, r18
 1c4:	a1 05       	cpc	r26, r1
 1c6:	b1 05       	cpc	r27, r1
 1c8:	08 f0       	brcs	.+2      	; 0x1cc <UART_Init+0x64>
 1ca:	9a c0       	rjmp	.+308    	; 0x300 <UART_Init+0x198>
	{
		if(g_ST_UART_CONFIG_t.SPEED_MODE == UART_NORMAL_SPEED){
 1cc:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <__data_end>
 1d0:	21 11       	cpse	r18, r1
 1d2:	1f c0       	rjmp	.+62     	; 0x212 <UART_Init+0xaa>
			UBRR_VAL = (uint32_t) ((F_CPU/(16*g_ST_UART_CONFIG_t.BAUD_RATE))-1);
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	aa 1f       	adc	r26, r26
 1da:	bb 1f       	adc	r27, r27
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	aa 1f       	adc	r26, r26
 1e2:	bb 1f       	adc	r27, r27
 1e4:	9c 01       	movw	r18, r24
 1e6:	ad 01       	movw	r20, r26
 1e8:	22 0f       	add	r18, r18
 1ea:	33 1f       	adc	r19, r19
 1ec:	44 1f       	adc	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	22 0f       	add	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	44 1f       	adc	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	60 e4       	ldi	r22, 0x40	; 64
 1fa:	72 e4       	ldi	r23, 0x42	; 66
 1fc:	8f e0       	ldi	r24, 0x0F	; 15
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__udivmodsi4>
 204:	ba 01       	movw	r22, r20
 206:	a9 01       	movw	r20, r18
 208:	41 50       	subi	r20, 0x01	; 1
 20a:	51 09       	sbc	r21, r1
 20c:	61 09       	sbc	r22, r1
 20e:	71 09       	sbc	r23, r1
 210:	27 c0       	rjmp	.+78     	; 0x260 <UART_Init+0xf8>
		}
		else if(g_ST_UART_CONFIG_t.SPEED_MODE == UART_DOUBLE_SPEED)
 212:	22 30       	cpi	r18, 0x02	; 2
 214:	09 f0       	breq	.+2      	; 0x218 <UART_Init+0xb0>
 216:	76 c0       	rjmp	.+236    	; 0x304 <UART_Init+0x19c>
		{
			SET_BIT(UCSRA, U2X);
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	8b b9       	out	0x0b, r24	; 11
			UBRR_VAL = (uint16_t) ((F_CPU/(8*g_ST_UART_CONFIG_t.BAUD_RATE))-1);
 21e:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <__data_end+0x1>
 222:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <__data_end+0x2>
 226:	a0 91 b9 00 	lds	r26, 0x00B9	; 0x8000b9 <__data_end+0x3>
 22a:	b0 91 ba 00 	lds	r27, 0x00BA	; 0x8000ba <__data_end+0x4>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	aa 1f       	adc	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	9c 01       	movw	r18, r24
 240:	ad 01       	movw	r20, r26
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	44 1f       	adc	r20, r20
 248:	55 1f       	adc	r21, r21
 24a:	60 e4       	ldi	r22, 0x40	; 64
 24c:	72 e4       	ldi	r23, 0x42	; 66
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 f7 01 	call	0x3ee	; 0x3ee <__udivmodsi4>
 256:	21 50       	subi	r18, 0x01	; 1
 258:	31 09       	sbc	r19, r1
 25a:	a9 01       	movw	r20, r18
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 e0       	ldi	r23, 0x00	; 0
	}
	else
	{
		return UART_INVALID_BAUD_RATE;
	}
	UBRRH =(uint8_t) (UBRR_VAL >> 8);
 260:	bb 27       	eor	r27, r27
 262:	a7 2f       	mov	r26, r23
 264:	96 2f       	mov	r25, r22
 266:	85 2f       	mov	r24, r21
 268:	80 bd       	out	0x20, r24	; 32
	UBRRL = (uint8_t) UBRR_VAL;
 26a:	49 b9       	out	0x09, r20	; 9
	
	
	/************** Enable transmitter **************/
	if ((g_ST_UART_CONFIG_t.TRANSMIT == UART_TRANSMIT_ENABLE) || (g_ST_UART_CONFIG_t.TRANSMIT == UART_TRANSMIT_DISABLE))
 26c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__data_end+0x5>
 270:	88 30       	cpi	r24, 0x08	; 8
 272:	11 f0       	breq	.+4      	; 0x278 <UART_Init+0x110>
 274:	81 11       	cpse	r24, r1
 276:	48 c0       	rjmp	.+144    	; 0x308 <UART_Init+0x1a0>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMIT));
 278:	9a b1       	in	r25, 0x0a	; 10
 27a:	89 2b       	or	r24, r25
 27c:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_TRANSMIT_ERROR;
	}
	/************** Enable receiver **************/
	if ((g_ST_UART_CONFIG_t.RECIEVE == UART_RECIEVE_ENABLE) || (g_ST_UART_CONFIG_t.RECIEVE == UART_RECIEVE_DISABLE))
 27e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end+0x6>
 282:	80 31       	cpi	r24, 0x10	; 16
 284:	11 f0       	breq	.+4      	; 0x28a <UART_Init+0x122>
 286:	81 11       	cpse	r24, r1
 288:	41 c0       	rjmp	.+130    	; 0x30c <UART_Init+0x1a4>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE));
 28a:	9a b1       	in	r25, 0x0a	; 10
 28c:	89 2b       	or	r24, r25
 28e:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_RECIEVE_ERROR;
	}
	/************** Char BITS **************/
	if ((g_ST_UART_CONFIG_t.CHAR_BITS >= UART_5_Bit_CHAR) && (g_ST_UART_CONFIG_t.CHAR_BITS <= UART_9_Bit_CHAR))
 290:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <__data_end+0x7>
 294:	85 30       	cpi	r24, 0x05	; 5
 296:	e0 f5       	brcc	.+120    	; 0x310 <UART_Init+0x1a8>
	{
		char_bits(g_ST_UART_CONFIG_t.CHAR_BITS);
 298:	0e 94 9f 00 	call	0x13e	; 0x13e <char_bits>
	else
	{
		return UART_CHAR_BITS_ERROR;
	}
	/************** Stop BITS **************/
	if ((g_ST_UART_CONFIG_t.STOP_BIT == UART_1_STOP_BIT) || (g_ST_UART_CONFIG_t.STOP_BIT == UART_2_STOP_BIT))
 29c:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <__data_end+0x9>
 2a0:	88 23       	and	r24, r24
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <UART_Init+0x140>
 2a4:	88 30       	cpi	r24, 0x08	; 8
 2a6:	b1 f5       	brne	.+108    	; 0x314 <UART_Init+0x1ac>
	{
		SET_BIT(UCSRC, URSEL);
 2a8:	80 b5       	in	r24, 0x20	; 32
 2aa:	80 68       	ori	r24, 0x80	; 128
 2ac:	80 bd       	out	0x20, r24	; 32
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.STOP_BIT));
 2ae:	90 b5       	in	r25, 0x20	; 32
 2b0:	e6 eb       	ldi	r30, 0xB6	; 182
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	81 85       	ldd	r24, Z+9	; 0x09
 2b6:	89 2b       	or	r24, r25
 2b8:	80 bd       	out	0x20, r24	; 32
	else
	{
		return UART_STOP_BITS_ERROR;
	}
	/************** Parity BITS **************/
	if ((g_ST_UART_CONFIG_t.PARITY_MODE == UART_NO_PARITY) || (g_ST_UART_CONFIG_t.PARITY_MODE == UART_EVEN_PARITY) || (g_ST_UART_CONFIG_t.PARITY_MODE == UART_ODD_PARITY))
 2ba:	80 85       	ldd	r24, Z+8	; 0x08
 2bc:	88 23       	and	r24, r24
 2be:	21 f0       	breq	.+8      	; 0x2c8 <UART_Init+0x160>
 2c0:	80 32       	cpi	r24, 0x20	; 32
 2c2:	11 f0       	breq	.+4      	; 0x2c8 <UART_Init+0x160>
 2c4:	80 33       	cpi	r24, 0x30	; 48
 2c6:	41 f5       	brne	.+80     	; 0x318 <UART_Init+0x1b0>
	{
		SET_BIT(UCSRC, URSEL);
 2c8:	80 b5       	in	r24, 0x20	; 32
 2ca:	80 68       	ori	r24, 0x80	; 128
 2cc:	80 bd       	out	0x20, r24	; 32
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.PARITY_MODE));
 2ce:	90 b5       	in	r25, 0x20	; 32
 2d0:	e6 eb       	ldi	r30, 0xB6	; 182
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 85       	ldd	r24, Z+8	; 0x08
 2d6:	89 2b       	or	r24, r25
 2d8:	80 bd       	out	0x20, r24	; 32
	else
	{
		return UART_PARITY_ERROR;
	}
	/************** Enable transmitter interrupt**************/
	if ((g_ST_UART_CONFIG_t.TRANSMITER_INT == UART_TRANSMITER_INT_ENABLE) || (g_ST_UART_CONFIG_t.TRANSMITER_INT == UART_TRANSMITER_INT_DISABLE))
 2da:	82 85       	ldd	r24, Z+10	; 0x0a
 2dc:	80 34       	cpi	r24, 0x40	; 64
 2de:	11 f0       	breq	.+4      	; 0x2e4 <UART_Init+0x17c>
 2e0:	81 11       	cpse	r24, r1
 2e2:	1c c0       	rjmp	.+56     	; 0x31c <UART_Init+0x1b4>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMITER_INT));
 2e4:	9a b1       	in	r25, 0x0a	; 10
 2e6:	89 2b       	or	r24, r25
 2e8:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_TRANSMIT_ERROR;
	}
	/************** Enable receiver interrupt **************/
	if ((g_ST_UART_CONFIG_t.RECIEVE_INT == UART_RECIEVER_INT_ENABLE) || (g_ST_UART_CONFIG_t.RECIEVE_INT == UART_RECIEVER_INT_DISABLE))
 2ea:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__data_end+0xb>
 2ee:	80 38       	cpi	r24, 0x80	; 128
 2f0:	11 f0       	breq	.+4      	; 0x2f6 <UART_Init+0x18e>
 2f2:	81 11       	cpse	r24, r1
 2f4:	15 c0       	rjmp	.+42     	; 0x320 <UART_Init+0x1b8>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE_INT));
 2f6:	9a b1       	in	r25, 0x0a	; 10
 2f8:	89 2b       	or	r24, r25
 2fa:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_RECIEVE_INT_ERROR;
	}
	g_u8_UART_init = INIT;
	return UART_SUCCESS;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	11 c0       	rjmp	.+34     	; 0x322 <UART_Init+0x1ba>
			return UART_ERROR_NOT_INITIALIZED;
		}
	}
	else
	{
		return UART_INVALID_BAUD_RATE;
 300:	85 e0       	ldi	r24, 0x05	; 5
 302:	0f c0       	rjmp	.+30     	; 0x322 <UART_Init+0x1ba>
		{
			SET_BIT(UCSRA, U2X);
			UBRR_VAL = (uint16_t) ((F_CPU/(8*g_ST_UART_CONFIG_t.BAUD_RATE))-1);
		}
		else{
			return UART_ERROR_NOT_INITIALIZED;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0d c0       	rjmp	.+26     	; 0x322 <UART_Init+0x1ba>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMIT));
	}
	else
	{
		return UART_TRANSMIT_ERROR;
 308:	86 e0       	ldi	r24, 0x06	; 6
 30a:	0b c0       	rjmp	.+22     	; 0x322 <UART_Init+0x1ba>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE));
	}
	else
	{
		return UART_RECIEVE_ERROR;
 30c:	87 e0       	ldi	r24, 0x07	; 7
 30e:	09 c0       	rjmp	.+18     	; 0x322 <UART_Init+0x1ba>
	{
		char_bits(g_ST_UART_CONFIG_t.CHAR_BITS);
	}
	else
	{
		return UART_CHAR_BITS_ERROR;
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	07 c0       	rjmp	.+14     	; 0x322 <UART_Init+0x1ba>
		SET_BIT(UCSRC, URSEL);
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.STOP_BIT));
	}
	else
	{
		return UART_STOP_BITS_ERROR;
 314:	83 e0       	ldi	r24, 0x03	; 3
 316:	05 c0       	rjmp	.+10     	; 0x322 <UART_Init+0x1ba>
		SET_BIT(UCSRC, URSEL);
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.PARITY_MODE));
	}
	else
	{
		return UART_PARITY_ERROR;
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	03 c0       	rjmp	.+6      	; 0x322 <UART_Init+0x1ba>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMITER_INT));
	}
	else
	{
		return UART_TRANSMIT_ERROR;
 31c:	86 e0       	ldi	r24, 0x06	; 6
 31e:	01 c0       	rjmp	.+2      	; 0x322 <UART_Init+0x1ba>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE_INT));
	}
	else
	{
		return UART_RECIEVE_INT_ERROR;
 320:	89 e0       	ldi	r24, 0x09	; 9
	}
	g_u8_UART_init = INIT;
	return UART_SUCCESS;
}
 322:	2c 96       	adiw	r28, 0x0c	; 12
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	08 95       	ret

0000033c <UART_TransmitChar>:

UART_STATUS_t UART_TransmitChar(uint16_t data)
{
	while (! (READ_BIT(UCSRA, UDRE)));
 33c:	5d 9b       	sbis	0x0b, 5	; 11
 33e:	fe cf       	rjmp	.-4      	; 0x33c <UART_TransmitChar>
	if (g_ST_UART_CONFIG_t.CHAR_BITS == UART_9_Bit_CHAR)
 340:	20 91 bd 00 	lds	r18, 0x00BD	; 0x8000bd <__data_end+0x7>
 344:	24 30       	cpi	r18, 0x04	; 4
 346:	21 f4       	brne	.+8      	; 0x350 <UART_TransmitChar+0x14>
	{
		UCSRB |= ((data >> 8) & 1);
 348:	2a b1       	in	r18, 0x0a	; 10
 34a:	91 70       	andi	r25, 0x01	; 1
 34c:	92 2b       	or	r25, r18
 34e:	9a b9       	out	0x0a, r25	; 10
	}
	/* Put data into buffer, sends the data */
	UDR = data;
 350:	8c b9       	out	0x0c, r24	; 12
	return UART_SUCCESS;
}
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret

00000356 <UART_TransmitString>:

UART_STATUS_t UART_TransmitString(uint8_t *data)
{
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	8c 01       	movw	r16, r24
	uint8_t j = STRING_START;
 35e:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (data[j]!= STRING_END)		/* Send string till null */
 360:	04 c0       	rjmp	.+8      	; 0x36a <UART_TransmitString+0x14>
	{
		UART_TransmitChar(data[j]);
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 9e 01 	call	0x33c	; 0x33c <UART_TransmitChar>
		j++;
 368:	cf 5f       	subi	r28, 0xFF	; 255

UART_STATUS_t UART_TransmitString(uint8_t *data)
{
	uint8_t j = STRING_START;
	
	while (data[j]!= STRING_END)		/* Send string till null */
 36a:	f8 01       	movw	r30, r16
 36c:	ec 0f       	add	r30, r28
 36e:	f1 1d       	adc	r31, r1
 370:	80 81       	ld	r24, Z
 372:	81 11       	cpse	r24, r1
 374:	f6 cf       	rjmp	.-20     	; 0x362 <UART_TransmitString+0xc>
	{
		UART_TransmitChar(data[j]);
		j++;
	}
	data[j] = STRING_END;
 376:	10 82       	st	Z, r1
	return UART_SUCCESS;
}
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <UART_RecieveChar>:

UART_STATUS_t UART_RecieveChar(uint16_t * character)
{
 380:	fc 01       	movw	r30, r24
	while (! (READ_BIT(UCSRA, RXC)));
 382:	5f 9b       	sbis	0x0b, 7	; 11
 384:	fe cf       	rjmp	.-4      	; 0x382 <UART_RecieveChar+0x2>
	if (g_ST_UART_CONFIG_t.CHAR_BITS == UART_9_Bit_CHAR)
 386:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <__data_end+0x7>
 38a:	84 30       	cpi	r24, 0x04	; 4
 38c:	79 f4       	brne	.+30     	; 0x3ac <UART_RecieveChar+0x2c>
	{
		while ((UCSRA) & ((1<<FE)|(1<<DOR)|(1<<PE)));
 38e:	9b b1       	in	r25, 0x0b	; 11
 390:	9c 71       	andi	r25, 0x1C	; 28
 392:	e9 f7       	brne	.-6      	; 0x38e <UART_RecieveChar+0xe>
		UCSRB = (UCSRB >> 1) & 0x01;
 394:	8a b1       	in	r24, 0x0a	; 10
 396:	86 95       	lsr	r24
 398:	81 70       	andi	r24, 0x01	; 1
 39a:	8a b9       	out	0x0a, r24	; 10
		*character = ((UCSRB << 8) | UDR);
 39c:	2a b1       	in	r18, 0x0a	; 10
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	32 2f       	mov	r19, r18
 3a2:	22 27       	eor	r18, r18
 3a4:	8c b1       	in	r24, 0x0c	; 12
 3a6:	28 2b       	or	r18, r24
 3a8:	31 83       	std	Z+1, r19	; 0x01
 3aa:	20 83       	st	Z, r18
	}
	
	*character =  UDR;				/* Return the byte*/
 3ac:	2c b1       	in	r18, 0x0c	; 12
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	31 83       	std	Z+1, r19	; 0x01
 3b2:	20 83       	st	Z, r18
	return UART_SUCCESS;
}
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret

000003b8 <UART_RecieveString>:

UART_STATUS_t UART_RecieveString(uint8_t *data)
{
 3b8:	ac 01       	movw	r20, r24
	uint8_t i = 0;
 3ba:	20 e0       	ldi	r18, 0x00	; 0
	
	while (1) {
		uint8_t c;
		// wait for another char
		while (! (READ_BIT(UCSRA, RXC)));
 3bc:	5f 9b       	sbis	0x0b, 7	; 11
 3be:	fe cf       	rjmp	.-4      	; 0x3bc <UART_RecieveString+0x4>
		c = (uint8_t)UDR;
 3c0:	9c b1       	in	r25, 0x0c	; 12
		// break on NULL character or new line
		// when backspace
		if ((c == STRING_END) || (c == NEW_LINE)) break;
 3c2:	99 23       	and	r25, r25
 3c4:	71 f0       	breq	.+28     	; 0x3e2 <UART_RecieveString+0x2a>
 3c6:	9d 30       	cpi	r25, 0x0D	; 13
 3c8:	61 f0       	breq	.+24     	; 0x3e2 <UART_RecieveString+0x2a>
		else if (c == BACKSPACE)
 3ca:	98 30       	cpi	r25, 0x08	; 8
 3cc:	21 f4       	brne	.+8      	; 0x3d6 <UART_RecieveString+0x1e>
		{
			if (i != 0)
 3ce:	22 23       	and	r18, r18
 3d0:	a9 f3       	breq	.-22     	; 0x3bc <UART_RecieveString+0x4>
			{
				i--;
 3d2:	21 50       	subi	r18, 0x01	; 1
			}
			continue;
 3d4:	f3 cf       	rjmp	.-26     	; 0x3bc <UART_RecieveString+0x4>
		}
		// write into the supplied buffer
		data[i] =  (uint8_t)c;
 3d6:	fa 01       	movw	r30, r20
 3d8:	e2 0f       	add	r30, r18
 3da:	f1 1d       	adc	r31, r1
 3dc:	90 83       	st	Z, r25
		i++;
 3de:	2f 5f       	subi	r18, 0xFF	; 255
 3e0:	ed cf       	rjmp	.-38     	; 0x3bc <UART_RecieveString+0x4>
	}
	data[i] = STRING_END;
 3e2:	fa 01       	movw	r30, r20
 3e4:	e2 0f       	add	r30, r18
 3e6:	f1 1d       	adc	r31, r1
 3e8:	10 82       	st	Z, r1
	//return the received string
	return UART_SUCCESS;
}
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret

000003ee <__udivmodsi4>:
 3ee:	a1 e2       	ldi	r26, 0x21	; 33
 3f0:	1a 2e       	mov	r1, r26
 3f2:	aa 1b       	sub	r26, r26
 3f4:	bb 1b       	sub	r27, r27
 3f6:	fd 01       	movw	r30, r26
 3f8:	0d c0       	rjmp	.+26     	; 0x414 <__udivmodsi4_ep>

000003fa <__udivmodsi4_loop>:
 3fa:	aa 1f       	adc	r26, r26
 3fc:	bb 1f       	adc	r27, r27
 3fe:	ee 1f       	adc	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	a2 17       	cp	r26, r18
 404:	b3 07       	cpc	r27, r19
 406:	e4 07       	cpc	r30, r20
 408:	f5 07       	cpc	r31, r21
 40a:	20 f0       	brcs	.+8      	; 0x414 <__udivmodsi4_ep>
 40c:	a2 1b       	sub	r26, r18
 40e:	b3 0b       	sbc	r27, r19
 410:	e4 0b       	sbc	r30, r20
 412:	f5 0b       	sbc	r31, r21

00000414 <__udivmodsi4_ep>:
 414:	66 1f       	adc	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	88 1f       	adc	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	1a 94       	dec	r1
 41e:	69 f7       	brne	.-38     	; 0x3fa <__udivmodsi4_loop>
 420:	60 95       	com	r22
 422:	70 95       	com	r23
 424:	80 95       	com	r24
 426:	90 95       	com	r25
 428:	9b 01       	movw	r18, r22
 42a:	ac 01       	movw	r20, r24
 42c:	bd 01       	movw	r22, r26
 42e:	cf 01       	movw	r24, r30
 430:	08 95       	ret

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
