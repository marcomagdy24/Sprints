
I2C Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  000002fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e42  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c9  00000000  00000000  00001272  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e1  00000000  00000000  00001a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  0000211c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000574  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000055a  00000000  00000000  00002838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002d92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  74:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <I2C_Master_Init>:
/******************************************************************************
*                         APIS IMPLEMENTATION											*
*******************************************************************************/

void I2C_Master_Init(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;
	PORTA_DIR = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	8a bb       	out	0x1a, r24	; 26
	/* initialize I2C */
	I2C_Init(I2C_CH_0);
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 cb 00 	call	0x196	; 0x196 <I2C_Init>
	/* start I2C */
	I2C_Start(I2C_CH_0);
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <I2C_Start>
	/* get the status */
	I2C_GetStatus(I2C_CH_0, &status);
  96:	be 01       	movw	r22, r28
  98:	6f 5f       	subi	r22, 0xFF	; 255
  9a:	7f 4f       	sbci	r23, 0xFF	; 255
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_GetStatus>
	/* make sure the master node got the bus. */
	if(status != I2C_STATUS_START)
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	51 f4       	brne	.+20     	; 0xbc <I2C_Master_Init+0x40>
	{
		return;
	}
	/* send the slave address + master write */
	I2C_Write(I2C_CH_0, SLAVE_ADDR);
  a8:	60 ea       	ldi	r22, 0xA0	; 160
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 17 01 	call	0x22e	; 0x22e <I2C_Write>
	I2C_GetStatus(I2C_CH_0, &status);
  b0:	be 01       	movw	r22, r28
  b2:	6f 5f       	subi	r22, 0xFF	; 255
  b4:	7f 4f       	sbci	r23, 0xFF	; 255
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_GetStatus>
	if(status != I2C_STATUS_T_ADDR_ACK)
	{
		return;
	}
	
}
  bc:	0f 90       	pop	r0
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <I2C_Master_Update>:

void I2C_Master_Update(void)
{
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	1f 92       	push	r1
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t status;
	
	
	for (uint8_t i = 0; i < 255; i++)
  d0:	10 e0       	ldi	r17, 0x00	; 0
  d2:	2e c0       	rjmp	.+92     	; 0x130 <I2C_Master_Update+0x6c>
	{
		I2C_Write(I2C_CH_0, i);
  d4:	61 2f       	mov	r22, r17
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 17 01 	call	0x22e	; 0x22e <I2C_Write>
		/* get the status */
		I2C_GetStatus(I2C_CH_0,&status);
  dc:	be 01       	movw	r22, r28
  de:	6f 5f       	subi	r22, 0xFF	; 255
  e0:	7f 4f       	sbci	r23, 0xFF	; 255
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_GetStatus>
		/* make sure the master node got ack from slave. */
		if(status != I2C_STATUS_T_DATA_ACK)
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	88 32       	cpi	r24, 0x28	; 40
  ec:	31 f5       	brne	.+76     	; 0x13a <I2C_Master_Update+0x76>
		{
			return;
		}
		/* start I2C */
		I2C_RepeatedStart(I2C_CH_0);
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <I2C_RepeatedStart>
		/* get the status */
		I2C_GetStatus(I2C_CH_0, &status);
  f4:	be 01       	movw	r22, r28
  f6:	6f 5f       	subi	r22, 0xFF	; 255
  f8:	7f 4f       	sbci	r23, 0xFF	; 255
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_GetStatus>
		/* make sure the master node got the bus. */
		if(status != I2C_STATUS_REPEATED_START)
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	80 31       	cpi	r24, 0x10	; 16
 104:	d1 f4       	brne	.+52     	; 0x13a <I2C_Master_Update+0x76>
		{
			return;
		}
		/* send the slave address + master write */
		I2C_Write(I2C_CH_0, SLAVE_ADDR);
 106:	60 ea       	ldi	r22, 0xA0	; 160
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0e 94 17 01 	call	0x22e	; 0x22e <I2C_Write>
		I2C_GetStatus(I2C_CH_0, &status);
 10e:	be 01       	movw	r22, r28
 110:	6f 5f       	subi	r22, 0xFF	; 255
 112:	7f 4f       	sbci	r23, 0xFF	; 255
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 2c 01 	call	0x258	; 0x258 <I2C_GetStatus>
		/* make sure the master node got ack from slave. */
		if(status != I2C_STATUS_T_ADDR_ACK)
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	88 31       	cpi	r24, 0x18	; 24
 11e:	69 f4       	brne	.+26     	; 0x13a <I2C_Master_Update+0x76>
		{
			return;
		}
		PORTA_DATA = i;
 120:	1b bb       	out	0x1b, r17	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	87 e8       	ldi	r24, 0x87	; 135
 124:	93 e1       	ldi	r25, 0x13	; 19
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <I2C_Master_Update+0x62>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <I2C_Master_Update+0x68>
 12c:	00 00       	nop
void I2C_Master_Update(void)
{
	uint8_t status;
	
	
	for (uint8_t i = 0; i < 255; i++)
 12e:	1f 5f       	subi	r17, 0xFF	; 255
 130:	1f 3f       	cpi	r17, 0xFF	; 255
 132:	81 f6       	brne	.-96     	; 0xd4 <I2C_Master_Update+0x10>
		}
		PORTA_DATA = i;
		_delay_ms(20);
	}
	/* stop condition */
	I2C_Stop(I2C_CH_0);		
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Stop>
}
 13a:	0f 90       	pop	r0
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	08 95       	ret

00000144 <main>:

#include "APP/I2C_MASTER/master.h"

int main(void)
{
    I2C_Master_Init();
 144:	0e 94 3e 00 	call	0x7c	; 0x7c <I2C_Master_Init>
	 I2C_Master_Update();
 148:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Master_Update>
 14c:	ff cf       	rjmp	.-2      	; 0x14c <main+0x8>

0000014e <I2C_InitRegisters>:
	while (!(*gvpu8_I2C_Control_R & I2C_INTERRUPT_FLAG));
	/* Copy data in TWI data register */
	*pu8_Data = *gvpu8_I2C_Data_R;
	/* return success macro */
	return I2C_SUCCESS;
}
 14e:	81 11       	cpse	r24, r1
 150:	20 c0       	rjmp	.+64     	; 0x192 <I2C_InitRegisters+0x44>
 152:	83 e2       	ldi	r24, 0x23	; 35
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <gvpu8_I2C_Data_R+0x1>
 15a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gvpu8_I2C_Data_R>
 15e:	86 e5       	ldi	r24, 0x56	; 86
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <gvpu8_I2C_Control_R+0x1>
 166:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gvpu8_I2C_Control_R>
 16a:	81 e2       	ldi	r24, 0x21	; 33
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <gvpu8_I2C_Status_R+0x1>
 172:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <gvpu8_I2C_Status_R>
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <gvpu8_I2C_BitRate_R+0x1>
 17e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gvpu8_I2C_BitRate_R>
 182:	82 e2       	ldi	r24, 0x22	; 34
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 18a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	08 95       	ret
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret

00000196 <I2C_Init>:
 196:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_InitRegisters>
 19a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <gvpu8_I2C_Status_R>
 19e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <gvpu8_I2C_Status_R+0x1>
 1a2:	10 82       	st	Z, r1
 1a4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <gvpu8_I2C_BitRate_R>
 1a8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <gvpu8_I2C_BitRate_R+0x1>
 1ac:	87 e0       	ldi	r24, 0x07	; 7
 1ae:	80 83       	st	Z, r24
 1b0:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <gvpu8_I2C_Control_R>
 1b4:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <gvpu8_I2C_Control_R+0x1>
 1b8:	84 e0       	ldi	r24, 0x04	; 4
 1ba:	80 83       	st	Z, r24
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	08 95       	ret

000001c0 <I2C_Start>:
 1c0:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_InitRegisters>
 1c4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <gvpu8_I2C_Control_R>
 1c8:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <gvpu8_I2C_Control_R+0x1>
 1cc:	84 ea       	ldi	r24, 0xA4	; 164
 1ce:	80 83       	st	Z, r24
 1d0:	80 81       	ld	r24, Z
 1d2:	88 23       	and	r24, r24
 1d4:	ec f7       	brge	.-6      	; 0x1d0 <I2C_Start+0x10>
 1d6:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <gvpu8_I2C_Status_R>
 1da:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <gvpu8_I2C_Status_R+0x1>
 1de:	80 81       	ld	r24, Z
 1e0:	88 7f       	andi	r24, 0xF8	; 248
 1e2:	88 30       	cpi	r24, 0x08	; 8
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <I2C_Start+0x22>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	08 95       	ret

000001ea <I2C_RepeatedStart>:
 1ea:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_InitRegisters>
 1ee:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <gvpu8_I2C_Control_R>
 1f2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <gvpu8_I2C_Control_R+0x1>
 1f6:	84 ea       	ldi	r24, 0xA4	; 164
 1f8:	80 83       	st	Z, r24
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	ec f7       	brge	.-6      	; 0x1fa <I2C_RepeatedStart+0x10>
 200:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <gvpu8_I2C_Status_R>
 204:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <gvpu8_I2C_Status_R+0x1>
 208:	80 81       	ld	r24, Z
 20a:	88 7f       	andi	r24, 0xF8	; 248
 20c:	80 31       	cpi	r24, 0x10	; 16
 20e:	f1 f7       	brne	.-4      	; 0x20c <I2C_RepeatedStart+0x22>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret

00000214 <I2C_Stop>:
 214:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_InitRegisters>
 218:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <gvpu8_I2C_Control_R>
 21c:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <gvpu8_I2C_Control_R+0x1>
 220:	84 e9       	ldi	r24, 0x94	; 148
 222:	80 83       	st	Z, r24
 224:	80 81       	ld	r24, Z
 226:	84 fd       	sbrc	r24, 4
 228:	fd cf       	rjmp	.-6      	; 0x224 <I2C_Stop+0x10>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret

0000022e <I2C_Write>:
 22e:	cf 93       	push	r28
 230:	c6 2f       	mov	r28, r22
 232:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_InitRegisters>
 236:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <gvpu8_I2C_Data_R>
 23a:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <gvpu8_I2C_Data_R+0x1>
 23e:	c0 83       	st	Z, r28
 240:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <gvpu8_I2C_Control_R>
 244:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <gvpu8_I2C_Control_R+0x1>
 248:	84 e8       	ldi	r24, 0x84	; 132
 24a:	80 83       	st	Z, r24
 24c:	80 81       	ld	r24, Z
 24e:	88 23       	and	r24, r24
 250:	ec f7       	brge	.-6      	; 0x24c <I2C_Write+0x1e>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <I2C_GetStatus>:

I2C_STATUS_t I2C_GetStatus(uint8_t u8_I2C_CH, uint8_t * pu8_Status)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
	/* check the pointer before using it */
	if(pu8_Status == NULL_PTR)
 25c:	61 15       	cp	r22, r1
 25e:	71 05       	cpc	r23, r1
 260:	61 f0       	breq	.+24     	; 0x27a <I2C_GetStatus+0x22>
 262:	eb 01       	movw	r28, r22
	{
		return I2C_NULL_PTR;
	}
	
	/* Initialize registers */
	I2C_InitRegisters(u8_I2C_CH);
 264:	0e 94 a7 00 	call	0x14e	; 0x14e <I2C_InitRegisters>
	
	/* Copy data in TWI status register */
	*pu8_Status = (*gvpu8_I2C_Status_R & I2C_STATUS_BITS);
 268:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <gvpu8_I2C_Status_R>
 26c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <gvpu8_I2C_Status_R+0x1>
 270:	80 81       	ld	r24, Z
 272:	88 7f       	andi	r24, 0xF8	; 248
 274:	88 83       	st	Y, r24
	
	/* return success macro */
	return I2C_SUCCESS;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	01 c0       	rjmp	.+2      	; 0x27c <I2C_GetStatus+0x24>
I2C_STATUS_t I2C_GetStatus(uint8_t u8_I2C_CH, uint8_t * pu8_Status)
{
	/* check the pointer before using it */
	if(pu8_Status == NULL_PTR)
	{
		return I2C_NULL_PTR;
 27a:	82 e0       	ldi	r24, 0x02	; 2
	/* Copy data in TWI status register */
	*pu8_Status = (*gvpu8_I2C_Status_R & I2C_STATUS_BITS);
	
	/* return success macro */
	return I2C_SUCCESS;
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
