
I2C Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800060  00800060  0000021a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce4  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000761  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064c  00000000  00000000  00001795  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000528  00000000  00000000  00001f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a0  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000293c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6f 00 	call	0xde	; 0xde <main>
  74:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <I2C_Slave_Init>:
*                         APIS IMPLEMENTATION											*
*******************************************************************************/

void I2C_Slave_Init(void)
{
	PORTA_DIR = 0xFF;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	/* set slave address */
	I2C_SetSlaveAddress(I2C_CH_0, SLAVE_ADDR);
  80:	60 ea       	ldi	r22, 0xA0	; 160
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	0e 94 98 00 	call	0x130	; 0x130 <I2C_SetSlaveAddress>
  88:	08 95       	ret

0000008a <I2C_Slave_Update>:
}

void I2C_Slave_Update(void)
{
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	00 d0       	rcall	.+0      	; 0x90 <I2C_Slave_Update+0x6>
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	uint8_t status;
	/* get data from bus */
	I2C_ReadAck(I2C_CH_0, &data);
  94:	be 01       	movw	r22, r28
  96:	6f 5f       	subi	r22, 0xFF	; 255
  98:	7f 4f       	sbci	r23, 0xFF	; 255
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 a4 00 	call	0x148	; 0x148 <I2C_ReadAck>
	/* get the status */
	I2C_GetStatus(I2C_CH_0, &status);
  a0:	be 01       	movw	r22, r28
  a2:	6e 5f       	subi	r22, 0xFE	; 254
  a4:	7f 4f       	sbci	r23, 0xFF	; 255
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_GetStatus>
	/* make sure the slave node received it's address and send ack to master. */
	if(status != I2C_STATUS_R_ADDR_ACK)
  ac:	8a 81       	ldd	r24, Y+2	; 0x02
  ae:	80 36       	cpi	r24, 0x60	; 96
  b0:	89 f4       	brne	.+34     	; 0xd4 <I2C_Slave_Update+0x4a>
	{
		return;
	}
	/* get data from bus */
	I2C_ReadAck(I2C_CH_0, &data);
  b2:	be 01       	movw	r22, r28
  b4:	6f 5f       	subi	r22, 0xFF	; 255
  b6:	7f 4f       	sbci	r23, 0xFF	; 255
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 a4 00 	call	0x148	; 0x148 <I2C_ReadAck>
	/* get the status */
	I2C_GetStatus(I2C_CH_0, &status);
  be:	be 01       	movw	r22, r28
  c0:	6e 5f       	subi	r22, 0xFE	; 254
  c2:	7f 4f       	sbci	r23, 0xFF	; 255
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_GetStatus>
	/* make sure the slave node received the data and send ack to master. */
	if(status != I2C_STATUS_R_DATA_ACK)
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	80 38       	cpi	r24, 0x80	; 128
  ce:	11 f4       	brne	.+4      	; 0xd4 <I2C_Slave_Update+0x4a>
	{
		return;
	}
	/* set portA pins to the received data */
	PORTA_DATA = data;
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	8b bb       	out	0x1b, r24	; 27
	//EEPROM_Read(0x00,&ptr);
}
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:


int main(void)
{
    /* Replace with your application code */
	 I2C_Slave_Init();
  de:	0e 94 3e 00 	call	0x7c	; 0x7c <I2C_Slave_Init>
	 
    while (1) 
    {
		 I2C_Slave_Update();
  e2:	0e 94 45 00 	call	0x8a	; 0x8a <I2C_Slave_Update>
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <main+0x4>

000000e8 <I2C_InitRegisters>:
	while (!(*gvpu8_I2C_Control_R & I2C_INTERRUPT_FLAG));
	/* Copy data in TWI data register */
	*pu8_Data = *gvpu8_I2C_Data_R;
	/* return success macro */
	return I2C_SUCCESS;
}
  e8:	81 11       	cpse	r24, r1
  ea:	20 c0       	rjmp	.+64     	; 0x12c <I2C_InitRegisters+0x44>
  ec:	83 e2       	ldi	r24, 0x23	; 35
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <gvpu8_I2C_Data_R+0x1>
  f4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <gvpu8_I2C_Data_R>
  f8:	86 e5       	ldi	r24, 0x56	; 86
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <gvpu8_I2C_Control_R+0x1>
 100:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <gvpu8_I2C_Control_R>
 104:	81 e2       	ldi	r24, 0x21	; 33
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <gvpu8_I2C_Status_R+0x1>
 10c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <gvpu8_I2C_Status_R>
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <gvpu8_I2C_BitRate_R+0x1>
 118:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <gvpu8_I2C_BitRate_R>
 11c:	82 e2       	ldi	r24, 0x22	; 34
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	08 95       	ret

00000130 <I2C_SetSlaveAddress>:
 130:	cf 93       	push	r28
 132:	c6 2f       	mov	r28, r22
 134:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_InitRegisters>
 138:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 13c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 140:	c0 83       	st	Z, r28
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <I2C_ReadAck>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	eb 01       	movw	r28, r22
 14e:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_InitRegisters>
 152:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <gvpu8_I2C_Control_R>
 156:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <gvpu8_I2C_Control_R+0x1>
 15a:	84 ec       	ldi	r24, 0xC4	; 196
 15c:	80 83       	st	Z, r24
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	ec f7       	brge	.-6      	; 0x15e <I2C_ReadAck+0x16>
 164:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <gvpu8_I2C_Data_R>
 168:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <gvpu8_I2C_Data_R+0x1>
 16c:	80 81       	ld	r24, Z
 16e:	88 83       	st	Y, r24
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <I2C_GetStatus>:

I2C_STATUS_t I2C_GetStatus(uint8_t u8_I2C_CH, uint8_t * pu8_Status)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
	/* check the pointer before using it */
	if(pu8_Status == NULL_PTR)
 17c:	61 15       	cp	r22, r1
 17e:	71 05       	cpc	r23, r1
 180:	61 f0       	breq	.+24     	; 0x19a <I2C_GetStatus+0x22>
 182:	eb 01       	movw	r28, r22
	{
		return I2C_NULL_PTR;
	}
	
	/* Initialize registers */
	I2C_InitRegisters(u8_I2C_CH);
 184:	0e 94 74 00 	call	0xe8	; 0xe8 <I2C_InitRegisters>
	
	/* Copy data in TWI status register */
	*pu8_Status = (*gvpu8_I2C_Status_R & I2C_STATUS_BITS);
 188:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <gvpu8_I2C_Status_R>
 18c:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <gvpu8_I2C_Status_R+0x1>
 190:	80 81       	ld	r24, Z
 192:	88 7f       	andi	r24, 0xF8	; 248
 194:	88 83       	st	Y, r24
	
	/* return success macro */
	return I2C_SUCCESS;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	01 c0       	rjmp	.+2      	; 0x19c <I2C_GetStatus+0x24>
I2C_STATUS_t I2C_GetStatus(uint8_t u8_I2C_CH, uint8_t * pu8_Status)
{
	/* check the pointer before using it */
	if(pu8_Status == NULL_PTR)
	{
		return I2C_NULL_PTR;
 19a:	82 e0       	ldi	r24, 0x02	; 2
	/* Copy data in TWI status register */
	*pu8_Status = (*gvpu8_I2C_Status_R & I2C_STATUS_BITS);
	
	/* return success macro */
	return I2C_SUCCESS;
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
