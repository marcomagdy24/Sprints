
Thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  0000073e  000007d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800092  00800092  00000804  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e1a  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b18  00000000  00000000  0000282a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000104b  00000000  00000000  00003342  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00004390  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000701  00000000  00000000  00004664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa9  00000000  00000000  00004d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000580e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 08 01 	call	0x210	; 0x210 <main>
  8a:	0c 94 9d 03 	jmp	0x73a	; 0x73a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <displayMaximumTemp>:
*******************************************************************************/
char temp_str[2];

void displayMaximumTemp(void)
{
	LCD_clear_screen();
  92:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_clear_screen>
	LCD_GOTO_XY(SECOND_ROW,0);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_GOTO_XY>
	LCD_WRITE_STRING((uint8_t *)"Max Temp=   C");
  9e:	87 e6       	ldi	r24, 0x67	; 103
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_WRITE_STRING>
	LCD_GOTO_XY(SECOND_ROW,10);
  a6:	6a e0       	ldi	r22, 0x0A	; 10
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_GOTO_XY>
	LCD_WRITE_STRING((uint8_t *) temp_str);
  ae:	82 e9       	ldi	r24, 0x92	; 146
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_WRITE_STRING>
  b6:	08 95       	ret

000000b8 <displayTemp>:
}

void displayTemp(void)
{
	LCD_GOTO_XY(FIRST_ROW,0);
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_GOTO_XY>
	LCD_WRITE_STRING((uint8_t *)"Temp=   C");
  c0:	8b e6       	ldi	r24, 0x6B	; 107
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_WRITE_STRING>
  c8:	08 95       	ret

000000ca <getMaximumTemp>:
}

void getMaximumTemp(void)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
	uint8_t key_pressed;
	uint8_t i = 0;
	LCD_WRITE_STRING((uint8_t *)"Enter the maximum temp:   C");
  ce:	85 e7       	ldi	r24, 0x75	; 117
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_WRITE_STRING>
	LCD_GOTO_XY(SECOND_ROW,8);
  d6:	68 e0       	ldi	r22, 0x08	; 8
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_GOTO_XY>
}

void getMaximumTemp(void)
{
	uint8_t key_pressed;
	uint8_t i = 0;
  de:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_WRITE_STRING((uint8_t *)"Enter the maximum temp:   C");
	LCD_GOTO_XY(SECOND_ROW,8);
	while(i < 2){
  e0:	13 c0       	rjmp	.+38     	; 0x108 <getMaximumTemp+0x3e>
		key_pressed = KEYPAD_GETCHAR();
  e2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <KEYPAD_GETCHAR>
  e6:	c8 2f       	mov	r28, r24
		switch(key_pressed){
  e8:	8a 32       	cpi	r24, 0x2A	; 42
  ea:	19 f0       	breq	.+6      	; 0xf2 <getMaximumTemp+0x28>
  ec:	8e 34       	cpi	r24, 0x4E	; 78
  ee:	61 f0       	breq	.+24     	; 0x108 <getMaximumTemp+0x3e>
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <getMaximumTemp+0x2e>
			case ('N'):
			break;
			case ('*'):
			LCD_clear_screen();
  f2:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_clear_screen>
			break;
  f6:	08 c0       	rjmp	.+16     	; 0x108 <getMaximumTemp+0x3e>
			default:
			LCD_WRITE_CHAR(key_pressed);
  f8:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_WRITE_CHAR>
			temp_str[i++] = key_pressed;
  fc:	ed 2f       	mov	r30, r29
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ee 56       	subi	r30, 0x6E	; 110
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	c0 83       	st	Z, r28
 106:	df 5f       	subi	r29, 0xFF	; 255
{
	uint8_t key_pressed;
	uint8_t i = 0;
	LCD_WRITE_STRING((uint8_t *)"Enter the maximum temp:   C");
	LCD_GOTO_XY(SECOND_ROW,8);
	while(i < 2){
 108:	d2 30       	cpi	r29, 0x02	; 2
 10a:	58 f3       	brcs	.-42     	; 0xe2 <getMaximumTemp+0x18>
			default:
			LCD_WRITE_CHAR(key_pressed);
			temp_str[i++] = key_pressed;
		}
	}
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <THERMOSTAT_Init>:
*                         APIS IMPLEMENTATION											*
*******************************************************************************/

void THERMOSTAT_Init(void)
{
	ADC_Init();
 112:	0e 94 0d 01 	call	0x21a	; 0x21a <ADC_Init>
	LCD_INIT();
 116:	0e 94 b2 02 	call	0x564	; 0x564 <LCD_INIT>
	MOTOR_INIT();
 11a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <MOTOR_INIT>
	KEYPAD_INIT();
 11e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <KEYPAD_INIT>
	DIO_SetPinDirection(PORT_B, PIN1, PIN_OUTPUT);
 122:	41 e0       	ldi	r20, 0x01	; 1
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPinDirection>
	getMaximumTemp();
 12c:	0e 94 65 00 	call	0xca	; 0xca <getMaximumTemp>
	displayMaximumTemp();
 130:	0e 94 49 00 	call	0x92	; 0x92 <displayMaximumTemp>
	displayTemp();
 134:	0e 94 5c 00 	call	0xb8	; 0xb8 <displayTemp>
 138:	08 95       	ret

0000013a <THERMOSTAT_Update>:
}

void THERMOSTAT_Update(void)
{
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	62 97       	sbiw	r28, 0x12	; 18
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
	uint16_t temp;
	uint16_t max_temp;
	char buff[16];
	
	max_temp = atoi(temp_str);
 152:	82 e9       	ldi	r24, 0x92	; 146
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 42 03 	call	0x684	; 0x684 <atoi>
 15a:	8c 01       	movw	r16, r24
	ADC_Read(ADC_CHANNEL_0, &temp);
 15c:	be 01       	movw	r22, r28
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_Read>
	temp = (temp * 150 / 308);
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	9a 81       	ldd	r25, Y+2	; 0x02
 16c:	46 e9       	ldi	r20, 0x96	; 150
 16e:	48 9f       	mul	r20, r24
 170:	90 01       	movw	r18, r0
 172:	49 9f       	mul	r20, r25
 174:	30 0d       	add	r19, r0
 176:	11 24       	eor	r1, r1
 178:	a9 e9       	ldi	r26, 0x99	; 153
 17a:	ba e1       	ldi	r27, 0x1A	; 26
 17c:	0e 94 33 03 	call	0x666	; 0x666 <__umulhisi3>
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	92 95       	swap	r25
 186:	82 95       	swap	r24
 188:	8f 70       	andi	r24, 0x0F	; 15
 18a:	89 27       	eor	r24, r25
 18c:	9f 70       	andi	r25, 0x0F	; 15
 18e:	89 27       	eor	r24, r25
 190:	9a 83       	std	Y+2, r25	; 0x02
 192:	89 83       	std	Y+1, r24	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 194:	4a e0       	ldi	r20, 0x0A	; 10
 196:	be 01       	movw	r22, r28
 198:	6d 5f       	subi	r22, 0xFD	; 253
 19a:	7f 4f       	sbci	r23, 0xFF	; 255
 19c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__itoa_ncheck>
	itoa(temp, buff,10);
	LCD_GOTO_XY(FIRST_ROW,6);
 1a0:	66 e0       	ldi	r22, 0x06	; 6
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_GOTO_XY>
	LCD_WRITE_STRING((uint8_t *) buff);
 1a8:	ce 01       	movw	r24, r28
 1aa:	03 96       	adiw	r24, 0x03	; 3
 1ac:	0e 94 0b 03 	call	0x616	; 0x616 <LCD_WRITE_STRING>
	if (temp >= max_temp)
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	9a 81       	ldd	r25, Y+2	; 0x02
 1b4:	80 17       	cp	r24, r16
 1b6:	91 07       	cpc	r25, r17
 1b8:	18 f0       	brcs	.+6      	; 0x1c0 <THERMOSTAT_Update+0x86>
	{
		MOTOR_START();
 1ba:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <MOTOR_START>
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <THERMOSTAT_Update+0x8a>
	}
	else
	{
		MOTOR_STOP();
 1c0:	0e 94 01 01 	call	0x202	; 0x202 <MOTOR_STOP>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	87 ea       	ldi	r24, 0xA7	; 167
 1c6:	91 e6       	ldi	r25, 0x61	; 97
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <THERMOSTAT_Update+0x8e>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <THERMOSTAT_Update+0x94>
 1ce:	00 00       	nop
	}
	_delay_ms(100);
}
 1d0:	62 96       	adiw	r28, 0x12	; 18
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	f8 94       	cli
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	cd bf       	out	0x3d, r28	; 61
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <MOTOR_INIT>:
	}
	else if ((MOTOR_PIN > PIN7) || (MOTOR_PIN < PIN0))
	{
		return MOTOR_INVALID_PORT;
	}
	DIO_SetPinDirection(MOTOR_PORT, MOTOR_PIN, PIN_OUTPUT);
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPinDirection>
	return MOTOR_SUCCESS;
}
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret

000001f4 <MOTOR_START>:
MOTOR_STATUS_t MOTOR_START(void)
{
	DIO_WritePin(MOTOR_PORT, MOTOR_PIN, PIN_HIGH);
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	0e 94 91 01 	call	0x322	; 0x322 <DIO_WritePin>
	return MOTOR_SUCCESS;
}
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret

00000202 <MOTOR_STOP>:
MOTOR_STATUS_t MOTOR_STOP(void)
{
	DIO_WritePin(MOTOR_PORT, MOTOR_PIN, PIN_LOW);
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 91 01 	call	0x322	; 0x322 <DIO_WritePin>
	return MOTOR_SUCCESS;
}
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret

00000210 <main>:

#include "APP/Thermostat/thermostat.h"

int main(void)
{
	THERMOSTAT_Init();
 210:	0e 94 89 00 	call	0x112	; 0x112 <THERMOSTAT_Init>
	while (1)
	{
		THERMOSTAT_Update();
 214:	0e 94 9d 00 	call	0x13a	; 0x13a <THERMOSTAT_Update>
 218:	fd cf       	rjmp	.-6      	; 0x214 <main+0x4>

0000021a <ADC_Init>:
*                         APIS IMPLEMENTATION											*
*******************************************************************************/
ADC_STATUS_t ADC_Init(void)
{
	/* Enable ADC, fr/128  */
	ADCSRA |= (ADC_ENABLE | ADC_PRESCALER_SELECTION);
 21a:	86 b1       	in	r24, 0x06	; 6
 21c:	87 68       	ori	r24, 0x87	; 135
 21e:	86 b9       	out	0x06, r24	; 6
	/* Vref: Avcc */
	ADMUX |= VOLTAGE_REFERENCE_SELECTION ;
 220:	87 b1       	in	r24, 0x07	; 7
 222:	80 64       	ori	r24, 0x40	; 64
 224:	87 b9       	out	0x07, r24	; 7
	return ADC_SUCCESS;
}
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret

0000022a <ADC_Read>:

ADC_STATUS_t ADC_Read(uint8_t u8_ADC_CH, uint16_t * u8_Data)
{
	/* Set input channel to read */
	if (u8_Data == NULL_PTR)
 22a:	61 15       	cp	r22, r1
 22c:	71 05       	cpc	r23, r1
 22e:	e9 f0       	breq	.+58     	; 0x26a <ADC_Read+0x40>
	{
		return ADC_NULL_PTR;
	}
	else if ((u8_ADC_CH > ADC_CHANNEL_7) || (u8_ADC_CH < ADC_CHANNEL_0))
 230:	88 30       	cpi	r24, 0x08	; 8
 232:	e8 f4       	brcc	.+58     	; 0x26e <ADC_Read+0x44>
	{
		return ADC_INVALID_CH;
	}
	/* Select the required ADC channel */
	
	ADMUX |= (u8_ADC_CH & 0x1F);
 234:	97 b1       	in	r25, 0x07	; 7
 236:	8f 71       	andi	r24, 0x1F	; 31
 238:	89 2b       	or	r24, r25
 23a:	87 b9       	out	0x07, r24	; 7
	/* Start conversion */
	
	ADCSRA |= ADC_START_CONVERSION;
 23c:	86 b1       	in	r24, 0x06	; 6
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	86 b9       	out	0x06, r24	; 6
	/* Monitor end of conversion interrupt */
	while(! (ADCSRA&(1<<ADIF)));	
 242:	34 9b       	sbis	0x06, 4	; 6
 244:	fe cf       	rjmp	.-4      	; 0x242 <ADC_Read+0x18>
	/* clear interrupt flag */
	ADCSRA |= ADIF;
 246:	86 b1       	in	r24, 0x06	; 6
 248:	84 60       	ori	r24, 0x04	; 4
 24a:	86 b9       	out	0x06, r24	; 6
	*u8_Data = (ADCL);
 24c:	84 b1       	in	r24, 0x04	; 4
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	fb 01       	movw	r30, r22
 252:	91 83       	std	Z+1, r25	; 0x01
 254:	80 83       	st	Z, r24
	*u8_Data += (ADCH << 8);
 256:	25 b1       	in	r18, 0x05	; 5
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	32 2f       	mov	r19, r18
 25c:	22 27       	eor	r18, r18
 25e:	82 0f       	add	r24, r18
 260:	93 1f       	adc	r25, r19
 262:	91 83       	std	Z+1, r25	; 0x01
 264:	80 83       	st	Z, r24
	return ADC_SUCCESS;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
ADC_STATUS_t ADC_Read(uint8_t u8_ADC_CH, uint16_t * u8_Data)
{
	/* Set input channel to read */
	if (u8_Data == NULL_PTR)
	{
		return ADC_NULL_PTR;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 95       	ret
	}
	else if ((u8_ADC_CH > ADC_CHANNEL_7) || (u8_ADC_CH < ADC_CHANNEL_0))
	{
		return ADC_INVALID_CH;
 26e:	81 e0       	ldi	r24, 0x01	; 1
	/* clear interrupt flag */
	ADCSRA |= ADIF;
	*u8_Data = (ADCL);
	*u8_Data += (ADCH << 8);
	return ADC_SUCCESS;
}
 270:	08 95       	ret

00000272 <DIO_SetPinDirection>:

#include "DIO.h"

uint8_t DIO_SetPinDirection(uint8_t PortName , uint8_t PinNo ,uint8_t PinDirection)
{
	switch(PortName)
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	d1 f0       	breq	.+52     	; 0x2aa <DIO_SetPinDirection+0x38>
 276:	28 f0       	brcs	.+10     	; 0x282 <DIO_SetPinDirection+0x10>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	59 f1       	breq	.+86     	; 0x2d2 <DIO_SetPinDirection+0x60>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	e9 f1       	breq	.+122    	; 0x2fa <DIO_SetPinDirection+0x88>
 280:	08 95       	ret
	{
		case PORT_A:
			BIT_WRITE(DDRA,PinNo,PinDirection);
 282:	2a b3       	in	r18, 0x1a	; 26
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	06 2e       	mov	r0, r22
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPinDirection+0x1e>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	0a 94       	dec	r0
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPinDirection+0x1a>
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_SetPinDirection+0x2a>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_SetPinDirection+0x26>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	48 2b       	or	r20, r24
 2a6:	4a bb       	out	0x1a, r20	; 26
			break;
 2a8:	08 95       	ret
		case PORT_B:
			BIT_WRITE(DDRB,PinNo,PinDirection);
 2aa:	27 b3       	in	r18, 0x17	; 23
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	06 2e       	mov	r0, r22
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_SetPinDirection+0x46>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_SetPinDirection+0x42>
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_SetPinDirection+0x52>
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_SetPinDirection+0x4e>
 2c8:	80 95       	com	r24
 2ca:	82 23       	and	r24, r18
 2cc:	48 2b       	or	r20, r24
 2ce:	47 bb       	out	0x17, r20	; 23
			break;
 2d0:	08 95       	ret
		case PORT_C:
			BIT_WRITE(DDRC,PinNo,PinDirection);
 2d2:	24 b3       	in	r18, 0x14	; 20
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	06 2e       	mov	r0, r22
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_SetPinDirection+0x6e>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_SetPinDirection+0x6a>
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_SetPinDirection+0x7a>
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_SetPinDirection+0x76>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	48 2b       	or	r20, r24
 2f6:	44 bb       	out	0x14, r20	; 20
			break;
 2f8:	08 95       	ret
		case PORT_D:
			BIT_WRITE(DDRD,PinNo,PinDirection);
 2fa:	21 b3       	in	r18, 0x11	; 17
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	06 2e       	mov	r0, r22
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_SetPinDirection+0x96>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_SetPinDirection+0x92>
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_SetPinDirection+0xa2>
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_SetPinDirection+0x9e>
 318:	80 95       	com	r24
 31a:	82 23       	and	r24, r18
 31c:	48 2b       	or	r20, r24
 31e:	41 bb       	out	0x11, r20	; 17
			break;
		default:
			break;
	}
}
 320:	08 95       	ret

00000322 <DIO_WritePin>:
uint8_t DIO_WritePin(uint8_t PortName , uint8_t PinNo ,uint8_t PinValue)
{
	switch(PortName)
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	d1 f0       	breq	.+52     	; 0x35a <DIO_WritePin+0x38>
 326:	28 f0       	brcs	.+10     	; 0x332 <DIO_WritePin+0x10>
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	59 f1       	breq	.+86     	; 0x382 <DIO_WritePin+0x60>
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	e9 f1       	breq	.+122    	; 0x3aa <DIO_WritePin+0x88>
 330:	08 95       	ret
	{
		case PORT_A:
			BIT_WRITE(PORTA,PinNo,PinValue);
 332:	2b b3       	in	r18, 0x1b	; 27
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_WritePin+0x1e>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_WritePin+0x1a>
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_WritePin+0x2a>
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_WritePin+0x26>
 350:	80 95       	com	r24
 352:	82 23       	and	r24, r18
 354:	48 2b       	or	r20, r24
 356:	4b bb       	out	0x1b, r20	; 27
			break;
 358:	08 95       	ret
		case PORT_B:
			BIT_WRITE(PORTB,PinNo,PinValue);
 35a:	28 b3       	in	r18, 0x18	; 24
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	06 2e       	mov	r0, r22
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_WritePin+0x46>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_WritePin+0x42>
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_WritePin+0x52>
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_WritePin+0x4e>
 378:	80 95       	com	r24
 37a:	82 23       	and	r24, r18
 37c:	48 2b       	or	r20, r24
 37e:	48 bb       	out	0x18, r20	; 24
			break;
 380:	08 95       	ret
		case PORT_C:
			BIT_WRITE(PORTC,PinNo,PinValue);
 382:	25 b3       	in	r18, 0x15	; 21
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	06 2e       	mov	r0, r22
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_WritePin+0x6e>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_WritePin+0x6a>
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_WritePin+0x7a>
 398:	44 0f       	add	r20, r20
 39a:	55 1f       	adc	r21, r21
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_WritePin+0x76>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	48 2b       	or	r20, r24
 3a6:	45 bb       	out	0x15, r20	; 21
			break;
 3a8:	08 95       	ret
		case PORT_D:
			BIT_WRITE(PORTD,PinNo,PinValue);
 3aa:	22 b3       	in	r18, 0x12	; 18
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	06 2e       	mov	r0, r22
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_WritePin+0x96>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_WritePin+0x92>
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_WritePin+0xa2>
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_WritePin+0x9e>
 3c8:	80 95       	com	r24
 3ca:	82 23       	and	r24, r18
 3cc:	48 2b       	or	r20, r24
 3ce:	42 bb       	out	0x12, r20	; 18
			break;
		default:
			break;
	}	
}
 3d0:	08 95       	ret

000003d2 <KEYPAD_INIT>:

uint8_t Keypad_R[] = {R0, R1, R2, R3};
uint8_t Keypad_C[] = {C0, C1, C2};

void KEYPAD_INIT(){
	DataDir_KEYPAD_PORT &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3));
 3d2:	8a b3       	in	r24, 0x1a	; 26
 3d4:	8f 70       	andi	r24, 0x0F	; 15
 3d6:	8a bb       	out	0x1a, r24	; 26
	DataDir_KEYPAD_PORT |= ((1<<C0) | (1<<C1) | (1<<C2));
 3d8:	8a b3       	in	r24, 0x1a	; 26
 3da:	8e 60       	ori	r24, 0x0E	; 14
 3dc:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_PORT = 0xFF;
 3de:	8f ef       	ldi	r24, 0xFF	; 255
 3e0:	8b bb       	out	0x1b, r24	; 27
 3e2:	08 95       	ret

000003e4 <KEYPAD_GETCHAR>:
}

uint8_t KEYPAD_GETCHAR(){
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
	uint8_t i,j;
	for (i = 0; i < 3; i++)
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	6f c0       	rjmp	.+222    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
	{
		KEYPAD_PORT |= ((1 << Keypad_C[0]) | (1 << Keypad_C[1]) | (1 << Keypad_C[2]));
 3ec:	3b b3       	in	r19, 0x1b	; 27
 3ee:	a0 e6       	ldi	r26, 0x60	; 96
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	ec 01       	movw	r28, r24
 3f8:	0c 90       	ld	r0, X
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	cc 0f       	add	r28, r28
 3fe:	dd 1f       	adc	r29, r29
 400:	0a 94       	dec	r0
 402:	e2 f7       	brpl	.-8      	; 0x3fc <KEYPAD_GETCHAR+0x18>
 404:	fc 01       	movw	r30, r24
 406:	11 96       	adiw	r26, 0x01	; 1
 408:	0c 90       	ld	r0, X
 40a:	11 97       	sbiw	r26, 0x01	; 1
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	ee 0f       	add	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	bc 01       	movw	r22, r24
 418:	12 96       	adiw	r26, 0x02	; 2
 41a:	0c 90       	ld	r0, X
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	2c 2f       	mov	r18, r28
 428:	2e 2b       	or	r18, r30
 42a:	26 2b       	or	r18, r22
 42c:	23 2b       	or	r18, r19
 42e:	2b bb       	out	0x1b, r18	; 27
		KEYPAD_PORT &= ~ (1<<Keypad_C[i]);
 430:	2b b3       	in	r18, 0x1b	; 27
 432:	e5 2f       	mov	r30, r21
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	e0 5a       	subi	r30, 0xA0	; 160
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	00 80       	ld	r0, Z
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	0a 94       	dec	r0
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	80 95       	com	r24
 448:	82 23       	and	r24, r18
 44a:	8b bb       	out	0x1b, r24	; 27
		for(j = 0; j < 4; j++){
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	3a c0       	rjmp	.+116    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
			if (!(KEYPAD_PIN & (1<<Keypad_R[j]))){
 450:	89 b3       	in	r24, 0x19	; 25
 452:	e4 2f       	mov	r30, r20
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	ed 59       	subi	r30, 0x9D	; 157
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	60 81       	ld	r22, Z
 45c:	26 2f       	mov	r18, r22
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	95 95       	asr	r25
 464:	87 95       	ror	r24
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	80 fd       	sbrc	r24, 0
 46c:	2a c0       	rjmp	.+84     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
				while (!(KEYPAD_PIN & (1<<Keypad_R[j])));
 46e:	89 b3       	in	r24, 0x19	; 25
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 2e       	mov	r0, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 476:	95 95       	asr	r25
 478:	87 95       	ror	r24
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	80 ff       	sbrs	r24, 0
 480:	f6 cf       	rjmp	.-20     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
				switch(i){
 482:	51 30       	cpi	r21, 0x01	; 1
 484:	69 f0       	breq	.+26     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 486:	18 f0       	brcs	.+6      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 488:	52 30       	cpi	r21, 0x02	; 2
 48a:	99 f0       	breq	.+38     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 48c:	1a c0       	rjmp	.+52     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
					case(0):
					{
						if (j == 0) return '1';
 48e:	44 23       	and	r20, r20
 490:	09 f1       	breq	.+66     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
						else if (j == 1) return '4';
 492:	41 30       	cpi	r20, 0x01	; 1
 494:	09 f1       	breq	.+66     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
						else if (j == 2) return '7';
 496:	42 30       	cpi	r20, 0x02	; 2
 498:	09 f1       	breq	.+66     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
						else if (j == 3) return '*';
 49a:	43 30       	cpi	r20, 0x03	; 3
 49c:	91 f4       	brne	.+36     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 49e:	20 c0       	rjmp	.+64     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
						break;
					}
					case(1):
					{
						if (j == 0) return '2';
 4a0:	44 23       	and	r20, r20
 4a2:	01 f1       	breq	.+64     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
						else if (j == 1) return '5';
 4a4:	41 30       	cpi	r20, 0x01	; 1
 4a6:	01 f1       	breq	.+64     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
						else if (j == 2) return '8';
 4a8:	42 30       	cpi	r20, 0x02	; 2
 4aa:	01 f1       	breq	.+64     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
						else if (j == 3) return '0';
 4ac:	43 30       	cpi	r20, 0x03	; 3
 4ae:	49 f4       	brne	.+18     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4b0:	1f c0       	rjmp	.+62     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
						break;
					}
					case(2):
					{
						if (j == 0) return '3';
 4b2:	44 23       	and	r20, r20
 4b4:	f9 f0       	breq	.+62     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
						else if (j == 1) return '6';
 4b6:	41 30       	cpi	r20, 0x01	; 1
 4b8:	f9 f0       	breq	.+62     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
						else if (j == 2) return '9';
 4ba:	42 30       	cpi	r20, 0x02	; 2
 4bc:	f9 f0       	breq	.+62     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
						else if (j == 3) return '#';
 4be:	43 30       	cpi	r20, 0x03	; 3
 4c0:	f9 f0       	breq	.+62     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
	uint8_t i,j;
	for (i = 0; i < 3; i++)
	{
		KEYPAD_PORT |= ((1 << Keypad_C[0]) | (1 << Keypad_C[1]) | (1 << Keypad_C[2]));
		KEYPAD_PORT &= ~ (1<<Keypad_C[i]);
		for(j = 0; j < 4; j++){
 4c2:	4f 5f       	subi	r20, 0xFF	; 255
 4c4:	44 30       	cpi	r20, 0x04	; 4
 4c6:	20 f2       	brcs	.-120    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
	KEYPAD_PORT = 0xFF;
}

uint8_t KEYPAD_GETCHAR(){
	uint8_t i,j;
	for (i = 0; i < 3; i++)
 4c8:	5f 5f       	subi	r21, 0xFF	; 255
 4ca:	53 30       	cpi	r21, 0x03	; 3
 4cc:	08 f4       	brcc	.+2      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ce:	8e cf       	rjmp	.-228    	; 0x3ec <KEYPAD_GETCHAR+0x8>
					}
				}
			}
		}
	}
	return 'N';
 4d0:	8e e4       	ldi	r24, 0x4E	; 78
 4d2:	17 c0       	rjmp	.+46     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
			if (!(KEYPAD_PIN & (1<<Keypad_R[j]))){
				while (!(KEYPAD_PIN & (1<<Keypad_R[j])));
				switch(i){
					case(0):
					{
						if (j == 0) return '1';
 4d4:	81 e3       	ldi	r24, 0x31	; 49
 4d6:	15 c0       	rjmp	.+42     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						else if (j == 1) return '4';
 4d8:	84 e3       	ldi	r24, 0x34	; 52
 4da:	13 c0       	rjmp	.+38     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						else if (j == 2) return '7';
 4dc:	87 e3       	ldi	r24, 0x37	; 55
 4de:	11 c0       	rjmp	.+34     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						else if (j == 3) return '*';
 4e0:	8a e2       	ldi	r24, 0x2A	; 42
 4e2:	0f c0       	rjmp	.+30     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						break;
					}
					case(1):
					{
						if (j == 0) return '2';
 4e4:	82 e3       	ldi	r24, 0x32	; 50
 4e6:	0d c0       	rjmp	.+26     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						else if (j == 1) return '5';
 4e8:	85 e3       	ldi	r24, 0x35	; 53
 4ea:	0b c0       	rjmp	.+22     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						else if (j == 2) return '8';
 4ec:	88 e3       	ldi	r24, 0x38	; 56
 4ee:	09 c0       	rjmp	.+18     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						else if (j == 3) return '0';
 4f0:	80 e3       	ldi	r24, 0x30	; 48
 4f2:	07 c0       	rjmp	.+14     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						break;
					}
					case(2):
					{
						if (j == 0) return '3';
 4f4:	83 e3       	ldi	r24, 0x33	; 51
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						else if (j == 1) return '6';
 4f8:	86 e3       	ldi	r24, 0x36	; 54
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						else if (j == 2) return '9';
 4fc:	89 e3       	ldi	r24, 0x39	; 57
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
						else if (j == 3) return '#';
 500:	83 e2       	ldi	r24, 0x23	; 35
				}
			}
		}
	}
	return 'N';
}
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <LCD_KICK>:
	DataDir_LCD_PORT &= ~(0xff<<DATA_SHIFT) ;
	LCD_CTRL |= (1<<RW_SWITCH); // read
	LCD_CTRL &= ~ (1<<RS_SWITCH);
	LCD_KICK ();
	DataDir_LCD_PORT = 0xFF; //0xFF means 0b11111111
	LCD_CTRL &= ~ (1<<RW_SWITCH); //write
 508:	85 b3       	in	r24, 0x15	; 21
 50a:	8f 77       	andi	r24, 0x7F	; 127
 50c:	85 bb       	out	0x15, r24	; 21
 50e:	83 ed       	ldi	r24, 0xD3	; 211
 510:	90 e3       	ldi	r25, 0x30	; 48
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <LCD_KICK+0xa>
 516:	00 c0       	rjmp	.+0      	; 0x518 <LCD_KICK+0x10>
 518:	00 00       	nop
 51a:	85 b3       	in	r24, 0x15	; 21
 51c:	80 68       	ori	r24, 0x80	; 128
 51e:	85 bb       	out	0x15, r24	; 21
 520:	08 95       	ret

00000522 <LCD_WRITE_COMMAND>:
}


void LCD_WRITE_COMMAND(uint8_t command)
{
 522:	cf 93       	push	r28
 524:	c8 2f       	mov	r28, r24
	LCD_KICK ();
	//LCD_PORT = 0;
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_isbusy();
	LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
 526:	82 b3       	in	r24, 0x12	; 18
 528:	8f 70       	andi	r24, 0x0F	; 15
 52a:	9c 2f       	mov	r25, r28
 52c:	90 7f       	andi	r25, 0xF0	; 240
 52e:	89 2b       	or	r24, r25
 530:	82 bb       	out	0x12, r24	; 18
	//LCD_VoidLcd_waitIfBusy();
	//SET_DATA_DIRECTION_REGISTER(LCD_DATA_DIRECTION_PORT, PORT_OUTPUT_DIRECTION);
	//LCD_SET_REGISTER_SELECT(LCD_REGISTER_SELECT_DISABLE);
	//	LCD_SET_READ_WRITE(WRITE_TO_LCD);
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
 532:	85 b3       	in	r24, 0x15	; 21
 534:	8f 79       	andi	r24, 0x9F	; 159
 536:	85 bb       	out	0x15, r24	; 21
	//LCD_VoidLcd_referish();
	LCD_KICK ();
 538:	0e 94 84 02 	call	0x508	; 0x508 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
 53c:	22 b3       	in	r18, 0x12	; 18
 53e:	30 e1       	ldi	r19, 0x10	; 16
 540:	c3 9f       	mul	r28, r19
 542:	c0 01       	movw	r24, r0
 544:	11 24       	eor	r1, r1
 546:	92 2f       	mov	r25, r18
 548:	9f 70       	andi	r25, 0x0F	; 15
 54a:	89 2b       	or	r24, r25
 54c:	82 bb       	out	0x12, r24	; 18
	//LCD_VoidLcd_waitIfBusy();
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
 54e:	85 b3       	in	r24, 0x15	; 21
 550:	8f 79       	andi	r24, 0x9F	; 159
 552:	85 bb       	out	0x15, r24	; 21
	//LCD_VoidLcd_referish();
	LCD_KICK ();
 554:	0e 94 84 02 	call	0x508	; 0x508 <LCD_KICK>
	#endif

}
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <LCD_clear_screen>:

}

void LCD_clear_screen ()
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN); // clear the screen
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WRITE_COMMAND>
 562:	08 95       	ret

00000564 <LCD_INIT>:
 564:	87 e8       	ldi	r24, 0x87	; 135
 566:	93 e1       	ldi	r25, 0x13	; 19
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <LCD_INIT+0x4>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <LCD_INIT+0xa>
 56e:	00 00       	nop
*******************************************************************************/
void LCD_INIT(void)
{

	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RW_SWITCH | 1<<RS_SWITCH) ;
 570:	84 b3       	in	r24, 0x14	; 20
 572:	80 6e       	ori	r24, 0xE0	; 224
 574:	84 bb       	out	0x14, r24	; 20
	LCD_CTRL &= ~(1<<EN_SWITCH | 1<<RW_SWITCH | 1<<RS_SWITCH) ;
 576:	85 b3       	in	r24, 0x15	; 21
 578:	8f 71       	andi	r24, 0x1F	; 31
 57a:	85 bb       	out	0x15, r24	; 21

	DataDir_LCD_PORT = 0xff ;
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	81 bb       	out	0x11, r24	; 17
 580:	85 ea       	ldi	r24, 0xA5	; 165
 582:	9e e0       	ldi	r25, 0x0E	; 14
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <LCD_INIT+0x20>
 588:	00 c0       	rjmp	.+0      	; 0x58a <LCD_INIT+0x26>
 58a:	00 00       	nop
	_delay_ms(15);

	LCD_clear_screen ();
 58c:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);

	#endif
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
 590:	82 e0       	ldi	r24, 0x02	; 2
 592:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WRITE_COMMAND>

	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 596:	88 e2       	ldi	r24, 0x28	; 40
 598:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WRITE_COMMAND>

	#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 59c:	86 e0       	ldi	r24, 0x06	; 6
 59e:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 5a2:	80 e8       	ldi	r24, 0x80	; 128
 5a4:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 5a8:	8f e0       	ldi	r24, 0x0F	; 15
 5aa:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WRITE_COMMAND>
 5ae:	08 95       	ret

000005b0 <LCD_GOTO_XY>:
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN); // clear the screen
}

void LCD_GOTO_XY(uint8_t line, uint8_t position)
{
	if ((position < LCD_END) && (position >=LCD_BEGIN))
 5b0:	60 31       	cpi	r22, 0x10	; 16
 5b2:	68 f4       	brcc	.+26     	; 0x5ce <LCD_GOTO_XY+0x1e>
	{
		if(line == FIRST_ROW)
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	29 f4       	brne	.+10     	; 0x5c2 <LCD_GOTO_XY+0x12>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 5b8:	80 e8       	ldi	r24, 0x80	; 128
 5ba:	86 0f       	add	r24, r22
 5bc:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WRITE_COMMAND>
 5c0:	08 95       	ret
		}
		else if(line == SECOND_ROW)
 5c2:	82 30       	cpi	r24, 0x02	; 2
 5c4:	21 f4       	brne	.+8      	; 0x5ce <LCD_GOTO_XY+0x1e>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 5c6:	80 ec       	ldi	r24, 0xC0	; 192
 5c8:	86 0f       	add	r24, r22
 5ca:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WRITE_COMMAND>
 5ce:	08 95       	ret

000005d0 <LCD_WRITE_CHAR>:

}


void LCD_WRITE_CHAR(uint8_t data)
{
 5d0:	cf 93       	push	r28
 5d2:	c8 2f       	mov	r28, r24
	LCD_KICK ();
	//LCD_PORT = 0;
	#endif

	#ifdef FOUR_BIT_MODE
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
 5d4:	82 b3       	in	r24, 0x12	; 18
 5d6:	8f 70       	andi	r24, 0x0F	; 15
 5d8:	9c 2f       	mov	r25, r28
 5da:	90 7f       	andi	r25, 0xF0	; 240
 5dc:	89 2b       	or	r24, r25
 5de:	82 bb       	out	0x12, r24	; 18
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 5e0:	85 b3       	in	r24, 0x15	; 21
 5e2:	80 62       	ori	r24, 0x20	; 32
 5e4:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 5e6:	85 b3       	in	r24, 0x15	; 21
 5e8:	8f 7b       	andi	r24, 0xBF	; 191
 5ea:	85 bb       	out	0x15, r24	; 21
	LCD_KICK ();
 5ec:	0e 94 84 02 	call	0x508	; 0x508 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (data << 4);
 5f0:	22 b3       	in	r18, 0x12	; 18
 5f2:	30 e1       	ldi	r19, 0x10	; 16
 5f4:	c3 9f       	mul	r28, r19
 5f6:	c0 01       	movw	r24, r0
 5f8:	11 24       	eor	r1, r1
 5fa:	92 2f       	mov	r25, r18
 5fc:	9f 70       	andi	r25, 0x0F	; 15
 5fe:	89 2b       	or	r24, r25
 600:	82 bb       	out	0x12, r24	; 18
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 602:	85 b3       	in	r24, 0x15	; 21
 604:	80 62       	ori	r24, 0x20	; 32
 606:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 608:	85 b3       	in	r24, 0x15	; 21
 60a:	8f 7b       	andi	r24, 0xBF	; 191
 60c:	85 bb       	out	0x15, r24	; 21
	LCD_KICK ();
 60e:	0e 94 84 02 	call	0x508	; 0x508 <LCD_KICK>

	#endif


}
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(uint8_t *data)
{
 616:	0f 93       	push	r16
 618:	1f 93       	push	r17
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	8c 01       	movw	r16, r24

	/* To count how much uint8_t on the line (it should be 16 uint8_t only) */
	uint8_t count = LCD_BEGIN ;
 620:	c0 e0       	ldi	r28, 0x00	; 0
	while(*data > LCD_BEGIN)
 622:	18 c0       	rjmp	.+48     	; 0x654 <LCD_WRITE_STRING+0x3e>
	{
		count++;
 624:	d1 e0       	ldi	r29, 0x01	; 1
 626:	dc 0f       	add	r29, r28
		LCD_WRITE_CHAR(*data++);
 628:	0f 5f       	subi	r16, 0xFF	; 255
 62a:	1f 4f       	sbci	r17, 0xFF	; 255
 62c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_WRITE_CHAR>
		if (count == FIRST_ROW_LIMIT) // go to the second line
 630:	d0 31       	cpi	r29, 0x10	; 16
 632:	29 f4       	brne	.+10     	; 0x63e <LCD_WRITE_STRING+0x28>
		{
			LCD_GOTO_XY(SECOND_ROW, LCD_BEGIN); //Second line position zero
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_GOTO_XY>
 63c:	0a c0       	rjmp	.+20     	; 0x652 <LCD_WRITE_STRING+0x3c>
		}
		else if ((count == SECOND_ROW_LIMIT) || (count == SECOND_ROW_LIMIT + 1)) // clear screen and show again
 63e:	cf 51       	subi	r28, 0x1F	; 31
 640:	c2 30       	cpi	r28, 0x02	; 2
 642:	38 f4       	brcc	.+14     	; 0x652 <LCD_WRITE_STRING+0x3c>
		{
			LCD_clear_screen();
 644:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_clear_screen>
			LCD_GOTO_XY(FIRST_ROW,LCD_BEGIN); //First Line position zero
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_GOTO_XY>
			count = LCD_BEGIN ;
 650:	d0 e0       	ldi	r29, 0x00	; 0
 652:	cd 2f       	mov	r28, r29
void LCD_WRITE_STRING(uint8_t *data)
{

	/* To count how much uint8_t on the line (it should be 16 uint8_t only) */
	uint8_t count = LCD_BEGIN ;
	while(*data > LCD_BEGIN)
 654:	f8 01       	movw	r30, r16
 656:	80 81       	ld	r24, Z
 658:	81 11       	cpse	r24, r1
 65a:	e4 cf       	rjmp	.-56     	; 0x624 <LCD_WRITE_STRING+0xe>
			LCD_clear_screen();
			LCD_GOTO_XY(FIRST_ROW,LCD_BEGIN); //First Line position zero
			count = LCD_BEGIN ;
		}
	}
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	08 95       	ret

00000666 <__umulhisi3>:
 666:	a2 9f       	mul	r26, r18
 668:	b0 01       	movw	r22, r0
 66a:	b3 9f       	mul	r27, r19
 66c:	c0 01       	movw	r24, r0
 66e:	a3 9f       	mul	r26, r19
 670:	70 0d       	add	r23, r0
 672:	81 1d       	adc	r24, r1
 674:	11 24       	eor	r1, r1
 676:	91 1d       	adc	r25, r1
 678:	b2 9f       	mul	r27, r18
 67a:	70 0d       	add	r23, r0
 67c:	81 1d       	adc	r24, r1
 67e:	11 24       	eor	r1, r1
 680:	91 1d       	adc	r25, r1
 682:	08 95       	ret

00000684 <atoi>:
 684:	fc 01       	movw	r30, r24
 686:	88 27       	eor	r24, r24
 688:	99 27       	eor	r25, r25
 68a:	e8 94       	clt
 68c:	21 91       	ld	r18, Z+
 68e:	20 32       	cpi	r18, 0x20	; 32
 690:	e9 f3       	breq	.-6      	; 0x68c <atoi+0x8>
 692:	29 30       	cpi	r18, 0x09	; 9
 694:	10 f0       	brcs	.+4      	; 0x69a <atoi+0x16>
 696:	2e 30       	cpi	r18, 0x0E	; 14
 698:	c8 f3       	brcs	.-14     	; 0x68c <atoi+0x8>
 69a:	2b 32       	cpi	r18, 0x2B	; 43
 69c:	41 f0       	breq	.+16     	; 0x6ae <atoi+0x2a>
 69e:	2d 32       	cpi	r18, 0x2D	; 45
 6a0:	39 f4       	brne	.+14     	; 0x6b0 <atoi+0x2c>
 6a2:	68 94       	set
 6a4:	04 c0       	rjmp	.+8      	; 0x6ae <atoi+0x2a>
 6a6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__mulhi_const_10>
 6aa:	82 0f       	add	r24, r18
 6ac:	91 1d       	adc	r25, r1
 6ae:	21 91       	ld	r18, Z+
 6b0:	20 53       	subi	r18, 0x30	; 48
 6b2:	2a 30       	cpi	r18, 0x0A	; 10
 6b4:	c0 f3       	brcs	.-16     	; 0x6a6 <atoi+0x22>
 6b6:	1e f4       	brtc	.+6      	; 0x6be <atoi+0x3a>
 6b8:	90 95       	com	r25
 6ba:	81 95       	neg	r24
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	08 95       	ret

000006c0 <__itoa_ncheck>:
 6c0:	bb 27       	eor	r27, r27
 6c2:	4a 30       	cpi	r20, 0x0A	; 10
 6c4:	31 f4       	brne	.+12     	; 0x6d2 <__itoa_ncheck+0x12>
 6c6:	99 23       	and	r25, r25
 6c8:	22 f4       	brpl	.+8      	; 0x6d2 <__itoa_ncheck+0x12>
 6ca:	bd e2       	ldi	r27, 0x2D	; 45
 6cc:	90 95       	com	r25
 6ce:	81 95       	neg	r24
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__utoa_common>

000006d6 <__mulhi_const_10>:
 6d6:	7a e0       	ldi	r23, 0x0A	; 10
 6d8:	97 9f       	mul	r25, r23
 6da:	90 2d       	mov	r25, r0
 6dc:	87 9f       	mul	r24, r23
 6de:	80 2d       	mov	r24, r0
 6e0:	91 0d       	add	r25, r1
 6e2:	11 24       	eor	r1, r1
 6e4:	08 95       	ret

000006e6 <__utoa_ncheck>:
 6e6:	bb 27       	eor	r27, r27

000006e8 <__utoa_common>:
 6e8:	fb 01       	movw	r30, r22
 6ea:	55 27       	eor	r21, r21
 6ec:	aa 27       	eor	r26, r26
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	aa 1f       	adc	r26, r26
 6f4:	a4 17       	cp	r26, r20
 6f6:	10 f0       	brcs	.+4      	; 0x6fc <__utoa_common+0x14>
 6f8:	a4 1b       	sub	r26, r20
 6fa:	83 95       	inc	r24
 6fc:	50 51       	subi	r21, 0x10	; 16
 6fe:	b9 f7       	brne	.-18     	; 0x6ee <__utoa_common+0x6>
 700:	a0 5d       	subi	r26, 0xD0	; 208
 702:	aa 33       	cpi	r26, 0x3A	; 58
 704:	08 f0       	brcs	.+2      	; 0x708 <__utoa_common+0x20>
 706:	a9 5d       	subi	r26, 0xD9	; 217
 708:	a1 93       	st	Z+, r26
 70a:	00 97       	sbiw	r24, 0x00	; 0
 70c:	79 f7       	brne	.-34     	; 0x6ec <__utoa_common+0x4>
 70e:	b1 11       	cpse	r27, r1
 710:	b1 93       	st	Z+, r27
 712:	11 92       	st	Z+, r1
 714:	cb 01       	movw	r24, r22
 716:	0c 94 8d 03 	jmp	0x71a	; 0x71a <strrev>

0000071a <strrev>:
 71a:	dc 01       	movw	r26, r24
 71c:	fc 01       	movw	r30, r24
 71e:	67 2f       	mov	r22, r23
 720:	71 91       	ld	r23, Z+
 722:	77 23       	and	r23, r23
 724:	e1 f7       	brne	.-8      	; 0x71e <strrev+0x4>
 726:	32 97       	sbiw	r30, 0x02	; 2
 728:	04 c0       	rjmp	.+8      	; 0x732 <strrev+0x18>
 72a:	7c 91       	ld	r23, X
 72c:	6d 93       	st	X+, r22
 72e:	70 83       	st	Z, r23
 730:	62 91       	ld	r22, -Z
 732:	ae 17       	cp	r26, r30
 734:	bf 07       	cpc	r27, r31
 736:	c8 f3       	brcs	.-14     	; 0x72a <strrev+0x10>
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
