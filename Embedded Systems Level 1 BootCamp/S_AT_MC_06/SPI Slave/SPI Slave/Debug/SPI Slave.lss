
SPI Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001b4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec6  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000899  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ad  00000000  00000000  00001abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b5  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  000028f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002a8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  8a:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_Slave_Init>:
*                         APIS IMPLEMENTATION											*
*******************************************************************************/

void SPI_Slave_Init(void)
{
	PORTA_DIR = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	SPI_Init();
  96:	0e 94 65 00 	call	0xca	; 0xca <SPI_Init>
  9a:	08 95       	ret

0000009c <SPI_Slave_Update>:
}

void SPI_Slave_Update(void)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
	uint8_t* recieved;
	SPI_RecieveChar(recieved);
  a0:	c0 e0       	ldi	r28, 0x00	; 0
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	ce 01       	movw	r24, r28
  a6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SPI_RecieveChar>
	PORTA_DATA = *recieved;
  aa:	88 81       	ld	r24, Y
  ac:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	87 ea       	ldi	r24, 0xA7	; 167
  b0:	91 e6       	ldi	r25, 0x61	; 97
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <SPI_Slave_Update+0x16>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <SPI_Slave_Update+0x1c>
  b8:	00 00       	nop
	_delay_ms(100);

  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <main>:
#include "APP/SPI_SLAVE/slave.h"

int main(void)
{
    /* Replace with your application code */
	 SPI_Slave_Init();
  c0:	0e 94 49 00 	call	0x92	; 0x92 <SPI_Slave_Init>
    while (1) 
    {
		 SPI_Slave_Update();
  c4:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_Slave_Update>
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <main+0x4>

000000ca <SPI_Init>:
		j++;
	}
	data[j] = STRING_END;
	SPI_TransmitChar(data[j]);
	return SPI_SUCCESS;
}
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	e0 e6       	ldi	r30, 0x60	; 96
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	a8 e6       	ldi	r26, 0x68	; 104
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	01 90       	ld	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	8a 95       	dec	r24
  da:	e1 f7       	brne	.-8      	; 0xd4 <SPI_Init+0xa>
  dc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
  e0:	80 31       	cpi	r24, 0x10	; 16
  e2:	21 f4       	brne	.+8      	; 0xec <SPI_Init+0x22>
  e4:	87 b3       	in	r24, 0x17	; 23
  e6:	80 6b       	ori	r24, 0xB0	; 176
  e8:	87 bb       	out	0x17, r24	; 23
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <SPI_Init+0x2c>
  ec:	81 11       	cpse	r24, r1
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <SPI_Init+0x2c>
  f0:	87 b3       	in	r24, 0x17	; 23
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__data_end+0x7>
  fa:	80 38       	cpi	r24, 0x80	; 128
  fc:	11 f0       	breq	.+4      	; 0x102 <SPI_Init+0x38>
  fe:	81 11       	cpse	r24, r1
 100:	40 c0       	rjmp	.+128    	; 0x182 <SPI_Init+0xb8>
 102:	9d b1       	in	r25, 0x0d	; 13
 104:	89 2b       	or	r24, r25
 106:	8d b9       	out	0x0d, r24	; 13
 108:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__data_end+0x5>
 10c:	80 32       	cpi	r24, 0x20	; 32
 10e:	11 f0       	breq	.+4      	; 0x114 <SPI_Init+0x4a>
 110:	81 11       	cpse	r24, r1
 112:	39 c0       	rjmp	.+114    	; 0x186 <SPI_Init+0xbc>
 114:	9d b1       	in	r25, 0x0d	; 13
 116:	89 2b       	or	r24, r25
 118:	8d b9       	out	0x0d, r24	; 13
 11a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 11e:	88 23       	and	r24, r24
 120:	11 f0       	breq	.+4      	; 0x126 <SPI_Init+0x5c>
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	91 f5       	brne	.+100    	; 0x18a <SPI_Init+0xc0>
 126:	9d b1       	in	r25, 0x0d	; 13
 128:	89 2b       	or	r24, r25
 12a:	8d b9       	out	0x0d, r24	; 13
 12c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__data_end+0x3>
 130:	88 23       	and	r24, r24
 132:	11 f0       	breq	.+4      	; 0x138 <SPI_Init+0x6e>
 134:	88 30       	cpi	r24, 0x08	; 8
 136:	59 f5       	brne	.+86     	; 0x18e <SPI_Init+0xc4>
 138:	9d b1       	in	r25, 0x0d	; 13
 13a:	89 2b       	or	r24, r25
 13c:	8d b9       	out	0x0d, r24	; 13
 13e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end+0x4>
 142:	88 23       	and	r24, r24
 144:	11 f0       	breq	.+4      	; 0x14a <SPI_Init+0x80>
 146:	84 30       	cpi	r24, 0x04	; 4
 148:	21 f5       	brne	.+72     	; 0x192 <SPI_Init+0xc8>
 14a:	9d b1       	in	r25, 0x0d	; 13
 14c:	89 2b       	or	r24, r25
 14e:	8d b9       	out	0x0d, r24	; 13
 150:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	f8 f4       	brcc	.+62     	; 0x196 <SPI_Init+0xcc>
 158:	9d b1       	in	r25, 0x0d	; 13
 15a:	89 2b       	or	r24, r25
 15c:	8d b9       	out	0x0d, r24	; 13
 15e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__data_end+0x1>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	d0 f4       	brcc	.+52     	; 0x19a <SPI_Init+0xd0>
 166:	9e b1       	in	r25, 0x0e	; 14
 168:	89 2b       	or	r24, r25
 16a:	8e b9       	out	0x0e, r24	; 14
 16c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end+0x6>
 170:	88 23       	and	r24, r24
 172:	11 f0       	breq	.+4      	; 0x178 <SPI_Init+0xae>
 174:	80 34       	cpi	r24, 0x40	; 64
 176:	99 f4       	brne	.+38     	; 0x19e <SPI_Init+0xd4>
 178:	9d b1       	in	r25, 0x0d	; 13
 17a:	89 2b       	or	r24, r25
 17c:	8d b9       	out	0x0d, r24	; 13
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret
 182:	85 e0       	ldi	r24, 0x05	; 5
 184:	08 95       	ret
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	08 95       	ret
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	08 95       	ret
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	08 95       	ret
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	08 95       	ret
 196:	88 e0       	ldi	r24, 0x08	; 8
 198:	08 95       	ret
 19a:	89 e0       	ldi	r24, 0x09	; 9
 19c:	08 95       	ret
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	08 95       	ret

000001a2 <SPI_RecieveChar>:

SPI_STATUS_t SPI_RecieveChar(uint8_t * data)
{
	// Wait for reception complete
	while (! (READ_BIT(SPSR, SPIF)));
 1a2:	77 9b       	sbis	0x0e, 7	; 14
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <SPI_RecieveChar>
	*data = SPDR;
 1a6:	2f b1       	in	r18, 0x0f	; 15
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
	return SPI_SUCCESS;
}
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
