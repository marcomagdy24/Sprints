
SPI Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000204  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d15  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a2  00000000  00000000  00001081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000570  00000000  00000000  00001823  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069d  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d7  00000000  00000000  00002525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  74:	0c 94 00 01 	jmp	0x200	; 0x200 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <SPI_Slave_Init>:
/******************************************************************************
*                         APIS IMPLEMENTATION											*
*******************************************************************************/

void SPI_Slave_Init(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
	PORTA_DIR = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
	ST_SPI_CONFIG_t configs = {
  94:	fe 01       	movw	r30, r28
  96:	31 96       	adiw	r30, 0x01	; 1
  98:	88 e0       	ldi	r24, 0x08	; 8
  9a:	df 01       	movw	r26, r30
  9c:	1d 92       	st	X+, r1
  9e:	8a 95       	dec	r24
  a0:	e9 f7       	brne	.-6      	; 0x9c <SPI_Slave_Init+0x20>
  a2:	80 e4       	ldi	r24, 0x40	; 64
  a4:	8f 83       	std	Y+7, r24	; 0x07
	{
		SPI_DDR |= (1 << SS) | (1 << MOSI) | (1 << SCK);
	}
	else if (configs.MASTER_SLAVE_MODE == SPI_SLAVE_MODE)
	{
		SPI_DDR |= (1 << MISO);
  a6:	87 b3       	in	r24, 0x17	; 23
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	87 bb       	out	0x17, r24	; 23
	}
	SPI_Init(configs);
  ac:	29 81       	ldd	r18, Y+1	; 0x01
  ae:	3a 81       	ldd	r19, Y+2	; 0x02
  b0:	4b 81       	ldd	r20, Y+3	; 0x03
  b2:	5c 81       	ldd	r21, Y+4	; 0x04
  b4:	6d 81       	ldd	r22, Y+5	; 0x05
  b6:	7e 81       	ldd	r23, Y+6	; 0x06
  b8:	8f 81       	ldd	r24, Y+7	; 0x07
  ba:	98 85       	ldd	r25, Y+8	; 0x08
  bc:	0e 94 80 00 	call	0x100	; 0x100 <SPI_Init>
}
  c0:	28 96       	adiw	r28, 0x08	; 8
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <SPI_Slave_Update>:

void SPI_Slave_Update(void)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
	uint8_t* recieved;
	SPI_RecieveChar(recieved);
  d6:	c0 e0       	ldi	r28, 0x00	; 0
  d8:	d0 e0       	ldi	r29, 0x00	; 0
  da:	ce 01       	movw	r24, r28
  dc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <SPI_RecieveChar>
	PORTA_DATA = *recieved;
  e0:	88 81       	ld	r24, Y
  e2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	87 ea       	ldi	r24, 0xA7	; 167
  e6:	91 e6       	ldi	r25, 0x61	; 97
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <SPI_Slave_Update+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <SPI_Slave_Update+0x1c>
  ee:	00 00       	nop
	_delay_ms(100);

  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:
#include "APP/SPI_SLAVE/slave.h"

int main(void)
{
    /* Replace with your application code */
	 SPI_Slave_Init();
  f6:	0e 94 3e 00 	call	0x7c	; 0x7c <SPI_Slave_Init>
    while (1) 
    {
		 SPI_Slave_Update();
  fa:	0e 94 69 00 	call	0xd2	; 0xd2 <SPI_Slave_Update>
  fe:	fd cf       	rjmp	.-6      	; 0xfa <main+0x4>

00000100 <SPI_Init>:
	{
		SPI_TransmitChar(*data);
	}
	
	return SPI_SUCCESS;
}
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	28 97       	sbiw	r28, 0x08	; 8
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	29 83       	std	Y+1, r18	; 0x01
 116:	3a 83       	std	Y+2, r19	; 0x02
 118:	4b 83       	std	Y+3, r20	; 0x03
 11a:	5c 83       	std	Y+4, r21	; 0x04
 11c:	6d 83       	std	Y+5, r22	; 0x05
 11e:	7e 83       	std	Y+6, r23	; 0x06
 120:	8f 83       	std	Y+7, r24	; 0x07
 122:	98 87       	std	Y+8, r25	; 0x08
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	fe 01       	movw	r30, r28
 128:	31 96       	adiw	r30, 0x01	; 1
 12a:	a0 e6       	ldi	r26, 0x60	; 96
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	8a 95       	dec	r24
 134:	e1 f7       	brne	.-8      	; 0x12e <SPI_Init+0x2e>
 136:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 13a:	80 38       	cpi	r24, 0x80	; 128
 13c:	11 f0       	breq	.+4      	; 0x142 <SPI_Init+0x42>
 13e:	81 11       	cpse	r24, r1
 140:	40 c0       	rjmp	.+128    	; 0x1c2 <SPI_Init+0xc2>
 142:	9d b1       	in	r25, 0x0d	; 13
 144:	89 2b       	or	r24, r25
 146:	8d b9       	out	0x0d, r24	; 13
 148:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 14c:	80 32       	cpi	r24, 0x20	; 32
 14e:	11 f0       	breq	.+4      	; 0x154 <SPI_Init+0x54>
 150:	81 11       	cpse	r24, r1
 152:	39 c0       	rjmp	.+114    	; 0x1c6 <SPI_Init+0xc6>
 154:	9d b1       	in	r25, 0x0d	; 13
 156:	89 2b       	or	r24, r25
 158:	8d b9       	out	0x0d, r24	; 13
 15a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15e:	88 23       	and	r24, r24
 160:	11 f0       	breq	.+4      	; 0x166 <SPI_Init+0x66>
 162:	80 31       	cpi	r24, 0x10	; 16
 164:	91 f5       	brne	.+100    	; 0x1ca <SPI_Init+0xca>
 166:	9d b1       	in	r25, 0x0d	; 13
 168:	89 2b       	or	r24, r25
 16a:	8d b9       	out	0x0d, r24	; 13
 16c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 170:	88 23       	and	r24, r24
 172:	11 f0       	breq	.+4      	; 0x178 <SPI_Init+0x78>
 174:	88 30       	cpi	r24, 0x08	; 8
 176:	59 f5       	brne	.+86     	; 0x1ce <SPI_Init+0xce>
 178:	9d b1       	in	r25, 0x0d	; 13
 17a:	89 2b       	or	r24, r25
 17c:	8d b9       	out	0x0d, r24	; 13
 17e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 182:	88 23       	and	r24, r24
 184:	11 f0       	breq	.+4      	; 0x18a <SPI_Init+0x8a>
 186:	84 30       	cpi	r24, 0x04	; 4
 188:	21 f5       	brne	.+72     	; 0x1d2 <SPI_Init+0xd2>
 18a:	9d b1       	in	r25, 0x0d	; 13
 18c:	89 2b       	or	r24, r25
 18e:	8d b9       	out	0x0d, r24	; 13
 190:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 194:	84 30       	cpi	r24, 0x04	; 4
 196:	f8 f4       	brcc	.+62     	; 0x1d6 <SPI_Init+0xd6>
 198:	9d b1       	in	r25, 0x0d	; 13
 19a:	89 2b       	or	r24, r25
 19c:	8d b9       	out	0x0d, r24	; 13
 19e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	d0 f4       	brcc	.+52     	; 0x1da <SPI_Init+0xda>
 1a6:	9e b1       	in	r25, 0x0e	; 14
 1a8:	89 2b       	or	r24, r25
 1aa:	8e b9       	out	0x0e, r24	; 14
 1ac:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 1b0:	88 23       	and	r24, r24
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <SPI_Init+0xb8>
 1b4:	80 34       	cpi	r24, 0x40	; 64
 1b6:	99 f4       	brne	.+38     	; 0x1de <SPI_Init+0xde>
 1b8:	9d b1       	in	r25, 0x0d	; 13
 1ba:	89 2b       	or	r24, r25
 1bc:	8d b9       	out	0x0d, r24	; 13
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0f c0       	rjmp	.+30     	; 0x1e0 <SPI_Init+0xe0>
 1c2:	85 e0       	ldi	r24, 0x05	; 5
 1c4:	0d c0       	rjmp	.+26     	; 0x1e0 <SPI_Init+0xe0>
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0b c0       	rjmp	.+22     	; 0x1e0 <SPI_Init+0xe0>
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <SPI_Init+0xe0>
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <SPI_Init+0xe0>
 1d2:	87 e0       	ldi	r24, 0x07	; 7
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <SPI_Init+0xe0>
 1d6:	88 e0       	ldi	r24, 0x08	; 8
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <SPI_Init+0xe0>
 1da:	89 e0       	ldi	r24, 0x09	; 9
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <SPI_Init+0xe0>
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	28 96       	adiw	r28, 0x08	; 8
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <SPI_RecieveChar>:

SPI_STATUS_t SPI_RecieveChar(uint8_t * data)
{
	// Wait for reception complete
	while (! (READ_BIT(SPSR, SPIF)));
 1f2:	77 9b       	sbis	0x0e, 7	; 14
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <SPI_RecieveChar>
	*data = SPDR;
 1f6:	2f b1       	in	r18, 0x0f	; 15
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
	return SPI_SUCCESS;
}
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	08 95       	ret

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
