
SPI Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000021e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  000002ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0f  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a8  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b5  00000000  00000000  00001867  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069a  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e9  00000000  00000000  000025a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000278f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 88 00 	call	0x110	; 0x110 <main>
  8a:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_Master_Init>:
/******************************************************************************
*                         APIS IMPLEMENTATION											*
*******************************************************************************/

void SPI_Master_Init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	PORTA_DIR = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a bb       	out	0x1a, r24	; 26
	ST_SPI_CONFIG_t configs = {
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	e0 e6       	ldi	r30, 0x60	; 96
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <SPI_Master_Init+0x22>
		SPI_RECIEVE_ENABLE,
		SPI_RECIEVER_INT_DISABLE,
	};
	if (configs.MASTER_SLAVE_MODE == SPI_MASTER_MODE)
	{
		SPI_DDR |= (1 << SS) | (1 << MOSI) | (1 << SCK);
  bc:	87 b3       	in	r24, 0x17	; 23
  be:	80 6b       	ori	r24, 0xB0	; 176
  c0:	87 bb       	out	0x17, r24	; 23
	}
	else if (configs.MASTER_SLAVE_MODE == SPI_SLAVE_MODE)
	{
		SPI_DDR |= (1 << MISO);
	}
	SPI_Init(configs);
  c2:	29 81       	ldd	r18, Y+1	; 0x01
  c4:	3a 81       	ldd	r19, Y+2	; 0x02
  c6:	4b 81       	ldd	r20, Y+3	; 0x03
  c8:	5c 81       	ldd	r21, Y+4	; 0x04
  ca:	6d 81       	ldd	r22, Y+5	; 0x05
  cc:	7e 81       	ldd	r23, Y+6	; 0x06
  ce:	8f 81       	ldd	r24, Y+7	; 0x07
  d0:	98 85       	ldd	r25, Y+8	; 0x08
  d2:	0e 94 8d 00 	call	0x11a	; 0x11a <SPI_Init>
}
  d6:	28 96       	adiw	r28, 0x08	; 8
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <SPI_Master_Update>:

void SPI_Master_Update(void)
{
  e8:	cf 93       	push	r28
	for (uint8_t i = 0; i < 255; i++)
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	0d c0       	rjmp	.+26     	; 0x108 <SPI_Master_Update+0x20>
	{
		while ((READ_BIT(SPSR, WCOL)));
  ee:	76 99       	sbic	0x0e, 6	; 14
  f0:	fe cf       	rjmp	.-4      	; 0xee <SPI_Master_Update+0x6>
		SPI_TransmitChar(i);
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 06 01 	call	0x20c	; 0x20c <SPI_TransmitChar>
		PORTA_DATA = i;
  f8:	cb bb       	out	0x1b, r28	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	87 ea       	ldi	r24, 0xA7	; 167
  fc:	91 e6       	ldi	r25, 0x61	; 97
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <SPI_Master_Update+0x16>
 102:	00 c0       	rjmp	.+0      	; 0x104 <SPI_Master_Update+0x1c>
 104:	00 00       	nop
	SPI_Init(configs);
}

void SPI_Master_Update(void)
{
	for (uint8_t i = 0; i < 255; i++)
 106:	cf 5f       	subi	r28, 0xFF	; 255
 108:	cf 3f       	cpi	r28, 0xFF	; 255
 10a:	89 f7       	brne	.-30     	; 0xee <SPI_Master_Update+0x6>
		while ((READ_BIT(SPSR, WCOL)));
		SPI_TransmitChar(i);
		PORTA_DATA = i;
		_delay_ms(100);
	}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <main>:
#include "APP/SPI_MASTER/master.h"

int main(void)
{
    /* Replace with your application code */
	 SPI_Master_Init();
 110:	0e 94 49 00 	call	0x92	; 0x92 <SPI_Master_Init>
    while (1) 
    {
		 SPI_Master_Update();
 114:	0e 94 74 00 	call	0xe8	; 0xe8 <SPI_Master_Update>
 118:	fd cf       	rjmp	.-6      	; 0x114 <main+0x4>

0000011a <SPI_Init>:

/******************************************************************************
*                         APIS IMPLEMENTATION											*
*******************************************************************************/
SPI_STATUS_t SPI_Init(ST_SPI_CONFIG_t config)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	28 97       	sbiw	r28, 0x08	; 8
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	29 83       	std	Y+1, r18	; 0x01
 130:	3a 83       	std	Y+2, r19	; 0x02
 132:	4b 83       	std	Y+3, r20	; 0x03
 134:	5c 83       	std	Y+4, r21	; 0x04
 136:	6d 83       	std	Y+5, r22	; 0x05
 138:	7e 83       	std	Y+6, r23	; 0x06
 13a:	8f 83       	std	Y+7, r24	; 0x07
 13c:	98 87       	std	Y+8, r25	; 0x08
	g_ST_SPI_CONFIG_t = config;
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	fe 01       	movw	r30, r28
 142:	31 96       	adiw	r30, 0x01	; 1
 144:	a8 e6       	ldi	r26, 0x68	; 104
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	8a 95       	dec	r24
 14e:	e1 f7       	brne	.-8      	; 0x148 <SPI_Init+0x2e>
	/********************Enable SPI Interrupt ******************/
	if ((g_ST_SPI_CONFIG_t.RECIEVER_INT == SPI_RECIEVER_INT_ENABLE) || (g_ST_SPI_CONFIG_t.RECIEVER_INT == SPI_RECIEVER_INT_DISABLE))
 150:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__data_end+0x7>
 154:	80 38       	cpi	r24, 0x80	; 128
 156:	11 f0       	breq	.+4      	; 0x15c <SPI_Init+0x42>
 158:	81 11       	cpse	r24, r1
 15a:	40 c0       	rjmp	.+128    	; 0x1dc <SPI_Init+0xc2>
	{
		SPCR |= g_ST_SPI_CONFIG_t.RECIEVER_INT;
 15c:	9d b1       	in	r25, 0x0d	; 13
 15e:	89 2b       	or	r24, r25
 160:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_RECIEVE_INT_ERROR;
	}
	/******************** Data Order ******************/
	if ((g_ST_SPI_CONFIG_t.DATA_ORDER == SPI_LSB_FIRST) || (g_ST_SPI_CONFIG_t.DATA_ORDER == SPI_MSB_FIRST))
 162:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__data_end+0x5>
 166:	80 32       	cpi	r24, 0x20	; 32
 168:	11 f0       	breq	.+4      	; 0x16e <SPI_Init+0x54>
 16a:	81 11       	cpse	r24, r1
 16c:	39 c0       	rjmp	.+114    	; 0x1e0 <SPI_Init+0xc6>
	{
		SPCR |= g_ST_SPI_CONFIG_t.DATA_ORDER;
 16e:	9d b1       	in	r25, 0x0d	; 13
 170:	89 2b       	or	r24, r25
 172:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_DATA_ORDER_ERROR;
	}
	/******************** Master Slave Select ******************/
	if ((g_ST_SPI_CONFIG_t.MASTER_SLAVE_MODE == SPI_SLAVE_MODE) || (g_ST_SPI_CONFIG_t.MASTER_SLAVE_MODE == SPI_MASTER_MODE))
 174:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 178:	88 23       	and	r24, r24
 17a:	11 f0       	breq	.+4      	; 0x180 <SPI_Init+0x66>
 17c:	80 31       	cpi	r24, 0x10	; 16
 17e:	91 f5       	brne	.+100    	; 0x1e4 <SPI_Init+0xca>
	{
		SPCR |= g_ST_SPI_CONFIG_t.MASTER_SLAVE_MODE;
 180:	9d b1       	in	r25, 0x0d	; 13
 182:	89 2b       	or	r24, r25
 184:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_MASTER_SLAVE_ERROR;
	}
	/******************** Clock Polarity ******************/
	if ((g_ST_SPI_CONFIG_t.CLOCK_POLARITY == SPI_CLOCK_POLARITY_RISING) || (g_ST_SPI_CONFIG_t.CLOCK_POLARITY == SPI_CLOCK_POLARITY_FALLING))
 186:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__data_end+0x3>
 18a:	88 23       	and	r24, r24
 18c:	11 f0       	breq	.+4      	; 0x192 <SPI_Init+0x78>
 18e:	88 30       	cpi	r24, 0x08	; 8
 190:	59 f5       	brne	.+86     	; 0x1e8 <SPI_Init+0xce>
	{
		SPCR |= g_ST_SPI_CONFIG_t.CLOCK_POLARITY;
 192:	9d b1       	in	r25, 0x0d	; 13
 194:	89 2b       	or	r24, r25
 196:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_CLOCK_POLARITY_ERROR;
	}
	/******************** Clock Phase ******************/
	if ((g_ST_SPI_CONFIG_t.CLOCK_PHASE == SPI_CLOCK_PHASE_SAMPLE) || (g_ST_SPI_CONFIG_t.CLOCK_PHASE == SPI_CLOCK_PHASE_SETUP))
 198:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end+0x4>
 19c:	88 23       	and	r24, r24
 19e:	11 f0       	breq	.+4      	; 0x1a4 <SPI_Init+0x8a>
 1a0:	84 30       	cpi	r24, 0x04	; 4
 1a2:	21 f5       	brne	.+72     	; 0x1ec <SPI_Init+0xd2>
	{
		SPCR |= g_ST_SPI_CONFIG_t.CLOCK_PHASE;
 1a4:	9d b1       	in	r25, 0x0d	; 13
 1a6:	89 2b       	or	r24, r25
 1a8:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_CLOCK_PHASE_ERROR;
	}
	/******************** SCK and Oscillator Frequency ******************/
	if ((g_ST_SPI_CONFIG_t.PRESCALAR >= SPI_Fosc_4) && (g_ST_SPI_CONFIG_t.PRESCALAR <= SPI_Fosc_128))
 1aa:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	f8 f4       	brcc	.+62     	; 0x1f0 <SPI_Init+0xd6>
	{
		SPCR |= g_ST_SPI_CONFIG_t.PRESCALAR;
 1b2:	9d b1       	in	r25, 0x0d	; 13
 1b4:	89 2b       	or	r24, r25
 1b6:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_PRESCALAR_ERROR;
	}
	/******************** Double SPI speed ******************/
	if ((g_ST_SPI_CONFIG_t.SPI_SPEED == SPI_NORMAL_SPEED) || (g_ST_SPI_CONFIG_t.SPI_SPEED == SPI_DOUBLE_SPEED))
 1b8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__data_end+0x1>
 1bc:	82 30       	cpi	r24, 0x02	; 2
 1be:	d0 f4       	brcc	.+52     	; 0x1f4 <SPI_Init+0xda>
	{
		SPSR |= g_ST_SPI_CONFIG_t.SPI_SPEED;
 1c0:	9e b1       	in	r25, 0x0e	; 14
 1c2:	89 2b       	or	r24, r25
 1c4:	8e b9       	out	0x0e, r24	; 14
	else
	{
		return SPI_SPEED_ERROR;
	}
	/******************** Enable SPI ******************/
	if ((g_ST_SPI_CONFIG_t.RECIEVE == SPI_RECIEVE_DISABLE) || (g_ST_SPI_CONFIG_t.RECIEVE == SPI_RECIEVE_ENABLE))
 1c6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end+0x6>
 1ca:	88 23       	and	r24, r24
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <SPI_Init+0xb8>
 1ce:	80 34       	cpi	r24, 0x40	; 64
 1d0:	99 f4       	brne	.+38     	; 0x1f8 <SPI_Init+0xde>
	{
		SPCR |= g_ST_SPI_CONFIG_t.RECIEVE;
 1d2:	9d b1       	in	r25, 0x0d	; 13
 1d4:	89 2b       	or	r24, r25
 1d6:	8d b9       	out	0x0d, r24	; 13
	}
	else
	{
		return SPI_RECIEVE_ERROR;
	}
	return SPI_SUCCESS;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0f c0       	rjmp	.+30     	; 0x1fa <SPI_Init+0xe0>
	{
		SPCR |= g_ST_SPI_CONFIG_t.RECIEVER_INT;
	}
	else
	{
		return SPI_RECIEVE_INT_ERROR;
 1dc:	85 e0       	ldi	r24, 0x05	; 5
 1de:	0d c0       	rjmp	.+26     	; 0x1fa <SPI_Init+0xe0>
	{
		SPCR |= g_ST_SPI_CONFIG_t.DATA_ORDER;
	}
	else
	{
		return SPI_DATA_ORDER_ERROR;
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0b c0       	rjmp	.+22     	; 0x1fa <SPI_Init+0xe0>
	{
		SPCR |= g_ST_SPI_CONFIG_t.MASTER_SLAVE_MODE;
	}
	else
	{
		return SPI_MASTER_SLAVE_ERROR;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	09 c0       	rjmp	.+18     	; 0x1fa <SPI_Init+0xe0>
	{
		SPCR |= g_ST_SPI_CONFIG_t.CLOCK_POLARITY;
	}
	else
	{
		return SPI_CLOCK_POLARITY_ERROR;
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	07 c0       	rjmp	.+14     	; 0x1fa <SPI_Init+0xe0>
	{
		SPCR |= g_ST_SPI_CONFIG_t.CLOCK_PHASE;
	}
	else
	{
		return SPI_CLOCK_PHASE_ERROR;
 1ec:	87 e0       	ldi	r24, 0x07	; 7
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <SPI_Init+0xe0>
	{
		SPCR |= g_ST_SPI_CONFIG_t.PRESCALAR;
	}
	else
	{
		return SPI_PRESCALAR_ERROR;
 1f0:	88 e0       	ldi	r24, 0x08	; 8
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <SPI_Init+0xe0>
	{
		SPSR |= g_ST_SPI_CONFIG_t.SPI_SPEED;
	}
	else
	{
		return SPI_SPEED_ERROR;
 1f4:	89 e0       	ldi	r24, 0x09	; 9
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <SPI_Init+0xe0>
	{
		SPCR |= g_ST_SPI_CONFIG_t.RECIEVE;
	}
	else
	{
		return SPI_RECIEVE_ERROR;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
	}
	return SPI_SUCCESS;
}
 1fa:	28 96       	adiw	r28, 0x08	; 8
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <SPI_TransmitChar>:

SPI_STATUS_t SPI_TransmitChar(uint8_t data)
{
	while ((READ_BIT(SPSR, WCOL)));
 20c:	76 99       	sbic	0x0e, 6	; 14
 20e:	fe cf       	rjmp	.-4      	; 0x20c <SPI_TransmitChar>
	SPDR = data;
 210:	8f b9       	out	0x0f, r24	; 15
	while (! (READ_BIT(SPSR, SPIF)));
 212:	77 9b       	sbis	0x0e, 7	; 14
 214:	fe cf       	rjmp	.-4      	; 0x212 <SPI_TransmitChar+0x6>
	return SPI_SUCCESS;
}
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
