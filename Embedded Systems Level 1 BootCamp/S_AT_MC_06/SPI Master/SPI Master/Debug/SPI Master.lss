
SPI Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001b4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec0  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000890  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e8  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00002194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b2  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a8  00000000  00000000  0000291a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002ac2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8a:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_Master_Init>:
*                         APIS IMPLEMENTATION											*
*******************************************************************************/

void SPI_Master_Init(void)
{
	PORTA_DIR = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	SPI_Init();
  96:	0e 94 67 00 	call	0xce	; 0xce <SPI_Init>
  9a:	08 95       	ret

0000009c <SPI_Master_Update>:
}

void SPI_Master_Update(void)
{
  9c:	cf 93       	push	r28
	for (uint8_t i = 0; i < 255; i++)
  9e:	c0 e0       	ldi	r28, 0x00	; 0
  a0:	0d c0       	rjmp	.+26     	; 0xbc <SPI_Master_Update+0x20>
	{
		while ((READ_BIT(SPSR, WCOL)));
  a2:	76 99       	sbic	0x0e, 6	; 14
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <SPI_Master_Update+0x6>
		SPI_TransmitChar(i);
  a6:	8c 2f       	mov	r24, r28
  a8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SPI_TransmitChar>
		PORTA_DATA = i;
  ac:	cb bb       	out	0x1b, r28	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	87 ea       	ldi	r24, 0xA7	; 167
  b0:	91 e6       	ldi	r25, 0x61	; 97
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <SPI_Master_Update+0x16>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <SPI_Master_Update+0x1c>
  b8:	00 00       	nop
	SPI_Init();
}

void SPI_Master_Update(void)
{
	for (uint8_t i = 0; i < 255; i++)
  ba:	cf 5f       	subi	r28, 0xFF	; 255
  bc:	cf 3f       	cpi	r28, 0xFF	; 255
  be:	89 f7       	brne	.-30     	; 0xa2 <SPI_Master_Update+0x6>
		while ((READ_BIT(SPSR, WCOL)));
		SPI_TransmitChar(i);
		PORTA_DATA = i;
		_delay_ms(100);
	}
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <main>:
#include "APP/SPI_MASTER/master.h"

int main(void)
{
    /* Replace with your application code */
	 SPI_Master_Init();
  c4:	0e 94 49 00 	call	0x92	; 0x92 <SPI_Master_Init>
    while (1) 
    {
		 SPI_Master_Update();
  c8:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_Master_Update>
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <main+0x4>

000000ce <SPI_Init>:
/******************************************************************************
*                         APIS IMPLEMENTATION											*
*******************************************************************************/
SPI_STATUS_t SPI_Init()
{
	g_ST_SPI_CONFIG_t = config;
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	e0 e6       	ldi	r30, 0x60	; 96
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	a8 e6       	ldi	r26, 0x68	; 104
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	8a 95       	dec	r24
  de:	e1 f7       	brne	.-8      	; 0xd8 <SPI_Init+0xa>
	
	if (g_ST_SPI_CONFIG_t.MASTER_SLAVE_MODE == SPI_MASTER_MODE)
  e0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
  e4:	80 31       	cpi	r24, 0x10	; 16
  e6:	21 f4       	brne	.+8      	; 0xf0 <SPI_Init+0x22>
	{
		SPI_DDR |= (1 << SS) | (1 << MOSI) | (1 << SCK);
  e8:	87 b3       	in	r24, 0x17	; 23
  ea:	80 6b       	ori	r24, 0xB0	; 176
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	05 c0       	rjmp	.+10     	; 0xfa <SPI_Init+0x2c>
	}
	else if (g_ST_SPI_CONFIG_t.MASTER_SLAVE_MODE == SPI_SLAVE_MODE)
  f0:	81 11       	cpse	r24, r1
  f2:	03 c0       	rjmp	.+6      	; 0xfa <SPI_Init+0x2c>
	{
		SPI_DDR |= (1 << MISO);
  f4:	87 b3       	in	r24, 0x17	; 23
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	87 bb       	out	0x17, r24	; 23
	}
	
	/********************Enable SPI Interrupt ******************/
	if ((g_ST_SPI_CONFIG_t.RECIEVER_INT == SPI_RECIEVER_INT_ENABLE) || (g_ST_SPI_CONFIG_t.RECIEVER_INT == SPI_RECIEVER_INT_DISABLE))
  fa:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__data_end+0x7>
  fe:	80 38       	cpi	r24, 0x80	; 128
 100:	11 f0       	breq	.+4      	; 0x106 <SPI_Init+0x38>
 102:	81 11       	cpse	r24, r1
 104:	40 c0       	rjmp	.+128    	; 0x186 <SPI_Init+0xb8>
	{
		SPCR |= g_ST_SPI_CONFIG_t.RECIEVER_INT;
 106:	9d b1       	in	r25, 0x0d	; 13
 108:	89 2b       	or	r24, r25
 10a:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_RECIEVE_INT_ERROR;
	}
	/******************** Data Order ******************/
	if ((g_ST_SPI_CONFIG_t.DATA_ORDER == SPI_LSB_FIRST) || (g_ST_SPI_CONFIG_t.DATA_ORDER == SPI_MSB_FIRST))
 10c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__data_end+0x5>
 110:	80 32       	cpi	r24, 0x20	; 32
 112:	11 f0       	breq	.+4      	; 0x118 <SPI_Init+0x4a>
 114:	81 11       	cpse	r24, r1
 116:	39 c0       	rjmp	.+114    	; 0x18a <SPI_Init+0xbc>
	{
		SPCR |= g_ST_SPI_CONFIG_t.DATA_ORDER;
 118:	9d b1       	in	r25, 0x0d	; 13
 11a:	89 2b       	or	r24, r25
 11c:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_DATA_ORDER_ERROR;
	}
	/******************** Master Slave Select ******************/
	if ((g_ST_SPI_CONFIG_t.MASTER_SLAVE_MODE == SPI_SLAVE_MODE) || (g_ST_SPI_CONFIG_t.MASTER_SLAVE_MODE == SPI_MASTER_MODE))
 11e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 122:	88 23       	and	r24, r24
 124:	11 f0       	breq	.+4      	; 0x12a <SPI_Init+0x5c>
 126:	80 31       	cpi	r24, 0x10	; 16
 128:	91 f5       	brne	.+100    	; 0x18e <SPI_Init+0xc0>
	{
		SPCR |= g_ST_SPI_CONFIG_t.MASTER_SLAVE_MODE;
 12a:	9d b1       	in	r25, 0x0d	; 13
 12c:	89 2b       	or	r24, r25
 12e:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_MASTER_SLAVE_ERROR;
	}
	/******************** Clock Polarity ******************/
	if ((g_ST_SPI_CONFIG_t.CLOCK_POLARITY == SPI_CLOCK_POLARITY_RISING) || (g_ST_SPI_CONFIG_t.CLOCK_POLARITY == SPI_CLOCK_POLARITY_FALLING))
 130:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__data_end+0x3>
 134:	88 23       	and	r24, r24
 136:	11 f0       	breq	.+4      	; 0x13c <SPI_Init+0x6e>
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	59 f5       	brne	.+86     	; 0x192 <SPI_Init+0xc4>
	{
		SPCR |= g_ST_SPI_CONFIG_t.CLOCK_POLARITY;
 13c:	9d b1       	in	r25, 0x0d	; 13
 13e:	89 2b       	or	r24, r25
 140:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_CLOCK_POLARITY_ERROR;
	}
	/******************** Clock Phase ******************/
	if ((g_ST_SPI_CONFIG_t.CLOCK_PHASE == SPI_CLOCK_PHASE_SAMPLE) || (g_ST_SPI_CONFIG_t.CLOCK_PHASE == SPI_CLOCK_PHASE_SETUP))
 142:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end+0x4>
 146:	88 23       	and	r24, r24
 148:	11 f0       	breq	.+4      	; 0x14e <SPI_Init+0x80>
 14a:	84 30       	cpi	r24, 0x04	; 4
 14c:	21 f5       	brne	.+72     	; 0x196 <SPI_Init+0xc8>
	{
		SPCR |= g_ST_SPI_CONFIG_t.CLOCK_PHASE;
 14e:	9d b1       	in	r25, 0x0d	; 13
 150:	89 2b       	or	r24, r25
 152:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_CLOCK_PHASE_ERROR;
	}
	/******************** SCK and Oscillator Frequency ******************/
	if ((g_ST_SPI_CONFIG_t.PRESCALAR >= SPI_Fosc_4) && (g_ST_SPI_CONFIG_t.PRESCALAR <= SPI_Fosc_128))
 154:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end+0x2>
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	f8 f4       	brcc	.+62     	; 0x19a <SPI_Init+0xcc>
	{
		SPCR |= g_ST_SPI_CONFIG_t.PRESCALAR;
 15c:	9d b1       	in	r25, 0x0d	; 13
 15e:	89 2b       	or	r24, r25
 160:	8d b9       	out	0x0d, r24	; 13
	else
	{
		return SPI_PRESCALAR_ERROR;
	}
	/******************** Double SPI speed ******************/
	if ((g_ST_SPI_CONFIG_t.SPI_SPEED == SPI_NORMAL_SPEED) || (g_ST_SPI_CONFIG_t.SPI_SPEED == SPI_DOUBLE_SPEED))
 162:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__data_end+0x1>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	d0 f4       	brcc	.+52     	; 0x19e <SPI_Init+0xd0>
	{
		SPSR |= g_ST_SPI_CONFIG_t.SPI_SPEED;
 16a:	9e b1       	in	r25, 0x0e	; 14
 16c:	89 2b       	or	r24, r25
 16e:	8e b9       	out	0x0e, r24	; 14
	else
	{
		return SPI_SPEED_ERROR;
	}
	/******************** Enable SPI ******************/
	if ((g_ST_SPI_CONFIG_t.RECIEVE == SPI_RECIEVE_DISABLE) || (g_ST_SPI_CONFIG_t.RECIEVE == SPI_RECIEVE_ENABLE))
 170:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end+0x6>
 174:	88 23       	and	r24, r24
 176:	11 f0       	breq	.+4      	; 0x17c <SPI_Init+0xae>
 178:	80 34       	cpi	r24, 0x40	; 64
 17a:	99 f4       	brne	.+38     	; 0x1a2 <SPI_Init+0xd4>
	{
		SPCR |= g_ST_SPI_CONFIG_t.RECIEVE;
 17c:	9d b1       	in	r25, 0x0d	; 13
 17e:	89 2b       	or	r24, r25
 180:	8d b9       	out	0x0d, r24	; 13
	}
	else
	{
		return SPI_RECIEVE_ERROR;
	}
	return SPI_SUCCESS;
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
	{
		SPCR |= g_ST_SPI_CONFIG_t.RECIEVER_INT;
	}
	else
	{
		return SPI_RECIEVE_INT_ERROR;
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	08 95       	ret
	{
		SPCR |= g_ST_SPI_CONFIG_t.DATA_ORDER;
	}
	else
	{
		return SPI_DATA_ORDER_ERROR;
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	08 95       	ret
	{
		SPCR |= g_ST_SPI_CONFIG_t.MASTER_SLAVE_MODE;
	}
	else
	{
		return SPI_MASTER_SLAVE_ERROR;
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	08 95       	ret
	{
		SPCR |= g_ST_SPI_CONFIG_t.CLOCK_POLARITY;
	}
	else
	{
		return SPI_CLOCK_POLARITY_ERROR;
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	08 95       	ret
	{
		SPCR |= g_ST_SPI_CONFIG_t.CLOCK_PHASE;
	}
	else
	{
		return SPI_CLOCK_PHASE_ERROR;
 196:	87 e0       	ldi	r24, 0x07	; 7
 198:	08 95       	ret
	{
		SPCR |= g_ST_SPI_CONFIG_t.PRESCALAR;
	}
	else
	{
		return SPI_PRESCALAR_ERROR;
 19a:	88 e0       	ldi	r24, 0x08	; 8
 19c:	08 95       	ret
	{
		SPSR |= g_ST_SPI_CONFIG_t.SPI_SPEED;
	}
	else
	{
		return SPI_SPEED_ERROR;
 19e:	89 e0       	ldi	r24, 0x09	; 9
 1a0:	08 95       	ret
	{
		SPCR |= g_ST_SPI_CONFIG_t.RECIEVE;
	}
	else
	{
		return SPI_RECIEVE_ERROR;
 1a2:	83 e0       	ldi	r24, 0x03	; 3
	}
	return SPI_SUCCESS;
}
 1a4:	08 95       	ret

000001a6 <SPI_TransmitChar>:

SPI_STATUS_t SPI_TransmitChar(uint8_t data)
{
	SPDR = data;
 1a6:	8f b9       	out	0x0f, r24	; 15
	while (! (READ_BIT(SPSR, SPIF)));
 1a8:	77 9b       	sbis	0x0e, 7	; 14
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <SPI_TransmitChar+0x2>
	return SPI_SUCCESS;
}
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
