
I2C Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00000710  000007a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080011e  0080011e  00000862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000188a  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ad  00000000  00000000  000022b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c35  00000000  00000000  00002c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00003894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f4  00000000  00000000  00003bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ac2  00000000  00000000  000044a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004f6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 31       	cpi	r26, 0x1E	; 30
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e1       	ldi	r26, 0x1E	; 30
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 33       	cpi	r26, 0x34	; 52
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  8a:	0c 94 86 03 	jmp	0x70c	; 0x70c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <compare>:
#include "master.h"
/******************************************************************************
*                         LOCAL FUNCTION IMPLEMENTATION								*
*******************************************************************************/
uint8_t compare(uint8_t *a,uint8_t *b)
{
  92:	fc 01       	movw	r30, r24
  94:	db 01       	movw	r26, r22
	uint8_t flag=0;
  96:	20 e0       	ldi	r18, 0x00	; 0
	while((*a!=STRING_END) && (*b!=STRING_END)) // while loop
  98:	04 c0       	rjmp	.+8      	; 0xa2 <compare+0x10>
	{
		if(*a!=*b)
  9a:	89 13       	cpse	r24, r25
		{
			flag=1;
  9c:	21 e0       	ldi	r18, 0x01	; 1
		}
		a++;
  9e:	31 96       	adiw	r30, 0x01	; 1
		b++;
  a0:	11 96       	adiw	r26, 0x01	; 1
*                         LOCAL FUNCTION IMPLEMENTATION								*
*******************************************************************************/
uint8_t compare(uint8_t *a,uint8_t *b)
{
	uint8_t flag=0;
	while((*a!=STRING_END) && (*b!=STRING_END)) // while loop
  a2:	80 81       	ld	r24, Z
  a4:	88 23       	and	r24, r24
  a6:	19 f0       	breq	.+6      	; 0xae <compare+0x1c>
  a8:	9c 91       	ld	r25, X
  aa:	91 11       	cpse	r25, r1
  ac:	f6 cf       	rjmp	.-20     	; 0x9a <compare+0x8>
			flag=1;
		}
		a++;
		b++;
	}
	if(flag==0)
  ae:	21 11       	cpse	r18, r1
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <compare+0x24>
	return 0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	08 95       	ret
	else
	return 1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
}
  b8:	08 95       	ret

000000ba <Write_EEPROM>:


void Write_EEPROM(uint16_t * data, uint16_t * addr)
{
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ec 01       	movw	r28, r24
  c4:	8b 01       	movw	r16, r22
	UART_TransmitString(DATA_INFO);
  c6:	8c e6       	ldi	r24, 0x6C	; 108
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 14 03 	call	0x628	; 0x628 <UART_TransmitString>
	UART_RecieveChar(data);
  ce:	ce 01       	movw	r24, r28
  d0:	0e 94 28 03 	call	0x650	; 0x650 <UART_RecieveChar>
	UART_TransmitChar(NEW_LINE);
  d4:	8d e0       	ldi	r24, 0x0D	; 13
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 07 03 	call	0x60e	; 0x60e <UART_TransmitChar>
	UART_TransmitString(RECEIVED_COMMAND);
  dc:	86 e8       	ldi	r24, 0x86	; 134
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 14 03 	call	0x628	; 0x628 <UART_TransmitString>
	UART_TransmitChar(*data);
  e4:	88 81       	ld	r24, Y
  e6:	99 81       	ldd	r25, Y+1	; 0x01
  e8:	0e 94 07 03 	call	0x60e	; 0x60e <UART_TransmitChar>
	UART_TransmitChar(NEW_LINE);
  ec:	8d e0       	ldi	r24, 0x0D	; 13
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 07 03 	call	0x60e	; 0x60e <UART_TransmitChar>
	UART_TransmitString(OK_COMMAND);
  f4:	81 e9       	ldi	r24, 0x91	; 145
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 14 03 	call	0x628	; 0x628 <UART_TransmitString>
	EEPROM_Write(*data,*addr);
  fc:	f8 01       	movw	r30, r16
  fe:	60 81       	ld	r22, Z
 100:	88 81       	ld	r24, Y
 102:	0e 94 44 01 	call	0x288	; 0x288 <EEPROM_Write>
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <Get_ADDR>:

void Get_ADDR(uint8_t cmd[], uint16_t * addr)
{
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	8c 01       	movw	r16, r24
 11a:	eb 01       	movw	r28, r22
	UART_TransmitString(READ_WRITE);
 11c:	86 e9       	ldi	r24, 0x96	; 150
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 14 03 	call	0x628	; 0x628 <UART_TransmitString>
	UART_RecieveString(cmd);
 124:	c8 01       	movw	r24, r16
 126:	0e 94 44 03 	call	0x688	; 0x688 <UART_RecieveString>
	UART_TransmitString(ADDRESS_INFO);
 12a:	80 ec       	ldi	r24, 0xC0	; 192
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 14 03 	call	0x628	; 0x628 <UART_TransmitString>
	UART_RecieveChar(addr);
 132:	ce 01       	movw	r24, r28
 134:	0e 94 28 03 	call	0x650	; 0x650 <UART_RecieveChar>
	UART_TransmitChar(NEW_LINE);
 138:	8d e0       	ldi	r24, 0x0D	; 13
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 07 03 	call	0x60e	; 0x60e <UART_TransmitChar>
	UART_TransmitString(RECEIVED_COMMAND);
 140:	86 e8       	ldi	r24, 0x86	; 134
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 14 03 	call	0x628	; 0x628 <UART_TransmitString>
	UART_TransmitChar(*addr);
 148:	88 81       	ld	r24, Y
 14a:	99 81       	ldd	r25, Y+1	; 0x01
 14c:	0e 94 07 03 	call	0x60e	; 0x60e <UART_TransmitChar>
	UART_TransmitChar(NEW_LINE);
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 07 03 	call	0x60e	; 0x60e <UART_TransmitChar>
	UART_TransmitString(OK_COMMAND);
 158:	81 e9       	ldi	r24, 0x91	; 145
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 14 03 	call	0x628	; 0x628 <UART_TransmitString>
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <Read_EEPROM>:

void Read_EEPROM(uint16_t addr, uint8_t * ptr)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	eb 01       	movw	r28, r22
	EEPROM_Read(addr,ptr);
 170:	0e 94 5d 01 	call	0x2ba	; 0x2ba <EEPROM_Read>
	UART_TransmitString(DATA_COMMAND);
 174:	8d ed       	ldi	r24, 0xDD	; 221
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 14 03 	call	0x628	; 0x628 <UART_TransmitString>
	UART_TransmitChar(*ptr);
 17c:	88 81       	ld	r24, Y
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 07 03 	call	0x60e	; 0x60e <UART_TransmitChar>
	UART_TransmitChar(NEW_LINE);
 184:	8d e0       	ldi	r24, 0x0D	; 13
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 07 03 	call	0x60e	; 0x60e <UART_TransmitChar>
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <I2C_Master_Init>:
/******************************************************************************
*                         APIS IMPLEMENTATION											*
*******************************************************************************/

void I2C_Master_Init(void)
{
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	2c 97       	sbiw	r28, 0x0c	; 12
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
	ST_UART_CONFIG_t configs = {
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	e0 e6       	ldi	r30, 0x60	; 96
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	de 01       	movw	r26, r28
 1b6:	11 96       	adiw	r26, 0x01	; 1
 1b8:	01 90       	ld	r0, Z+
 1ba:	0d 92       	st	X+, r0
 1bc:	8a 95       	dec	r24
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <I2C_Master_Init+0x26>
		UART_NO_PARITY,
		UART_1_STOP_BIT,
		UART_TRANSMITER_INT_DISABLE,
		UART_RECIEVER_INT_DISABLE
	};
	UART_Init(configs);
 1c0:	e9 80       	ldd	r14, Y+1	; 0x01
 1c2:	fa 80       	ldd	r15, Y+2	; 0x02
 1c4:	0b 81       	ldd	r16, Y+3	; 0x03
 1c6:	1c 81       	ldd	r17, Y+4	; 0x04
 1c8:	2d 81       	ldd	r18, Y+5	; 0x05
 1ca:	3e 81       	ldd	r19, Y+6	; 0x06
 1cc:	4f 81       	ldd	r20, Y+7	; 0x07
 1ce:	58 85       	ldd	r21, Y+8	; 0x08
 1d0:	69 85       	ldd	r22, Y+9	; 0x09
 1d2:	7a 85       	ldd	r23, Y+10	; 0x0a
 1d4:	8b 85       	ldd	r24, Y+11	; 0x0b
 1d6:	9c 85       	ldd	r25, Y+12	; 0x0c
 1d8:	0e 94 1d 02 	call	0x43a	; 0x43a <UART_Init>
	UART_TransmitString(START_COMMAND);
 1dc:	82 ef       	ldi	r24, 0xF2	; 242
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 14 03 	call	0x628	; 0x628 <UART_TransmitString>
}
 1e4:	2c 96       	adiw	r28, 0x0c	; 12
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	08 95       	ret

000001fe <I2C_Master_Update>:

void I2C_Master_Update(void)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	2b 97       	sbiw	r28, 0x0b	; 11
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
	uint8_t ptr;
	uint8_t cmd[6];
	uint16_t addr;
	uint16_t data;
	Get_ADDR(cmd, &addr);
 212:	be 01       	movw	r22, r28
 214:	68 5f       	subi	r22, 0xF8	; 248
 216:	7f 4f       	sbci	r23, 0xFF	; 255
 218:	ce 01       	movw	r24, r28
 21a:	02 96       	adiw	r24, 0x02	; 2
 21c:	0e 94 88 00 	call	0x110	; 0x110 <Get_ADDR>
	if (!(compare (WRITE_COMMAND, cmd)))
 220:	be 01       	movw	r22, r28
 222:	6e 5f       	subi	r22, 0xFE	; 254
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	8a ef       	ldi	r24, 0xFA	; 250
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 49 00 	call	0x92	; 0x92 <compare>
 22e:	81 11       	cpse	r24, r1
 230:	08 c0       	rjmp	.+16     	; 0x242 <I2C_Master_Update+0x44>
	{
		Write_EEPROM(&data, &addr);
 232:	be 01       	movw	r22, r28
 234:	68 5f       	subi	r22, 0xF8	; 248
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	ce 01       	movw	r24, r28
 23a:	0a 96       	adiw	r24, 0x0a	; 10
 23c:	0e 94 5d 00 	call	0xba	; 0xba <Write_EEPROM>
 240:	15 c0       	rjmp	.+42     	; 0x26c <I2C_Master_Update+0x6e>
	}
	else if (!(compare (READ_COMMAND, cmd)))
 242:	be 01       	movw	r22, r28
 244:	6e 5f       	subi	r22, 0xFE	; 254
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 49 00 	call	0x92	; 0x92 <compare>
 250:	81 11       	cpse	r24, r1
 252:	08 c0       	rjmp	.+16     	; 0x264 <I2C_Master_Update+0x66>
	{
		Read_EEPROM(addr, &ptr);
 254:	be 01       	movw	r22, r28
 256:	6f 5f       	subi	r22, 0xFF	; 255
 258:	7f 4f       	sbci	r23, 0xFF	; 255
 25a:	88 85       	ldd	r24, Y+8	; 0x08
 25c:	99 85       	ldd	r25, Y+9	; 0x09
 25e:	0e 94 b5 00 	call	0x16a	; 0x16a <Read_EEPROM>
 262:	04 c0       	rjmp	.+8      	; 0x26c <I2C_Master_Update+0x6e>
	}
	else
	{
		UART_TransmitString(INVALID_COMMAND);
 264:	85 e0       	ldi	r24, 0x05	; 5
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 14 03 	call	0x628	; 0x628 <UART_TransmitString>
	
	
	
	//EEPROM_Read(0x00,&ptr);
	
}
 26c:	2b 96       	adiw	r28, 0x0b	; 11
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	de bf       	out	0x3e, r29	; 62
 274:	0f be       	out	0x3f, r0	; 63
 276:	cd bf       	out	0x3d, r28	; 61
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <main>:
#include "APP/I2C_MASTER/master.h"

int main(void)
{
    /* Replace with your application code */
	 I2C_Master_Init();
 27e:	0e 94 c9 00 	call	0x192	; 0x192 <I2C_Master_Init>
	 
    while (1) 
    {
		I2C_Master_Update();
 282:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_Master_Update>
 286:	fd cf       	rjmp	.-6      	; 0x282 <main+0x4>

00000288 <EEPROM_Write>:

/******************************************************************************
*                         APIS IMPLEMENTATION											*
*******************************************************************************/
void EEPROM_Write (uint8_t u8_Data, uint8_t u8_ADDR)
{
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	c8 2f       	mov	r28, r24
 28e:	d6 2f       	mov	r29, r22
	I2C_Start(I2C_CH_0);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 a3 01 	call	0x346	; 0x346 <I2C_Start>
	I2C_Write(I2C_CH_0, 0xA8); //slave address is 1010.100 and a 0 in the 8th bit to indicate writing.
 296:	68 ea       	ldi	r22, 0xA8	; 168
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <I2C_Write>
	I2C_Write(I2C_CH_0, u8_ADDR);
 29e:	6d 2f       	mov	r22, r29
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <I2C_Write>
	I2C_Write(I2C_CH_0, u8_Data);
 2a6:	6c 2f       	mov	r22, r28
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 da 01 	call	0x3b4	; 0x3b4 <I2C_Write>
	I2C_Stop(I2C_CH_0);
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_Stop>
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <EEPROM_Read>:
/* the function arguments are an address 
   in the EEPROM to read from and a pointer to a memory 
	place in the MCU to store the read data in */
void EEPROM_Read (uint8_t u8_ADDR, uint8_t * ptr)
{
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	18 2f       	mov	r17, r24
 2c2:	eb 01       	movw	r28, r22
	I2C_Start(I2C_CH_0);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 a3 01 	call	0x346	; 0x346 <I2C_Start>
	I2C_Write(I2C_CH_0, 0xA8);
 2ca:	68 ea       	ldi	r22, 0xA8	; 168
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 da 01 	call	0x3b4	; 0x3b4 <I2C_Write>
	I2C_Write(I2C_CH_0, u8_ADDR);
 2d2:	61 2f       	mov	r22, r17
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <I2C_Write>
	I2C_RepeatedStart(I2C_CH_0);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 b8 01 	call	0x370	; 0x370 <I2C_RepeatedStart>
	I2C_Write(I2C_CH_0, 0xA9);
 2e0:	69 ea       	ldi	r22, 0xA9	; 169
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <I2C_Write>
	I2C_ReadNotAck(I2C_CH_0, ptr);
 2e8:	be 01       	movw	r22, r28
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 ef 01 	call	0x3de	; 0x3de <I2C_ReadNotAck>
	I2C_Stop(I2C_CH_0);
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 cd 01 	call	0x39a	; 0x39a <I2C_Stop>
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	08 95       	ret

000002fe <I2C_InitRegisters>:
	while (!(*gvpu8_I2C_Control_R & I2C_INTERRUPT_FLAG));
	/* Copy data in TWI data register */
	*pu8_Data = *gvpu8_I2C_Data_R;
	/* return success macro */
	return I2C_SUCCESS;
}
 2fe:	81 11       	cpse	r24, r1
 300:	20 c0       	rjmp	.+64     	; 0x342 <I2C_InitRegisters+0x44>
 302:	83 e2       	ldi	r24, 0x23	; 35
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <gvpu8_I2C_Data_R+0x1>
 30a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <gvpu8_I2C_Data_R>
 30e:	86 e5       	ldi	r24, 0x56	; 86
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <gvpu8_I2C_Control_R+0x1>
 316:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <gvpu8_I2C_Control_R>
 31a:	81 e2       	ldi	r24, 0x21	; 33
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <gvpu8_I2C_Status_R+0x1>
 322:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <gvpu8_I2C_Status_R>
 326:	80 e2       	ldi	r24, 0x20	; 32
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <gvpu8_I2C_BitRate_R+0x1>
 32e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <gvpu8_I2C_BitRate_R>
 332:	82 e2       	ldi	r24, 0x22	; 34
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__data_end+0x1>
 33a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	08 95       	ret

00000346 <I2C_Start>:
 346:	0e 94 7f 01 	call	0x2fe	; 0x2fe <I2C_InitRegisters>
 34a:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <gvpu8_I2C_Control_R>
 34e:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <gvpu8_I2C_Control_R+0x1>
 352:	84 ea       	ldi	r24, 0xA4	; 164
 354:	80 83       	st	Z, r24
 356:	80 81       	ld	r24, Z
 358:	88 23       	and	r24, r24
 35a:	ec f7       	brge	.-6      	; 0x356 <I2C_Start+0x10>
 35c:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <gvpu8_I2C_Status_R>
 360:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <gvpu8_I2C_Status_R+0x1>
 364:	80 81       	ld	r24, Z
 366:	88 7f       	andi	r24, 0xF8	; 248
 368:	88 30       	cpi	r24, 0x08	; 8
 36a:	f1 f7       	brne	.-4      	; 0x368 <I2C_Start+0x22>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	08 95       	ret

00000370 <I2C_RepeatedStart>:
 370:	0e 94 7f 01 	call	0x2fe	; 0x2fe <I2C_InitRegisters>
 374:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <gvpu8_I2C_Control_R>
 378:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <gvpu8_I2C_Control_R+0x1>
 37c:	84 ea       	ldi	r24, 0xA4	; 164
 37e:	80 83       	st	Z, r24
 380:	80 81       	ld	r24, Z
 382:	88 23       	and	r24, r24
 384:	ec f7       	brge	.-6      	; 0x380 <I2C_RepeatedStart+0x10>
 386:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <gvpu8_I2C_Status_R>
 38a:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <gvpu8_I2C_Status_R+0x1>
 38e:	80 81       	ld	r24, Z
 390:	88 7f       	andi	r24, 0xF8	; 248
 392:	80 31       	cpi	r24, 0x10	; 16
 394:	f1 f7       	brne	.-4      	; 0x392 <I2C_RepeatedStart+0x22>
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret

0000039a <I2C_Stop>:
 39a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <I2C_InitRegisters>
 39e:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <gvpu8_I2C_Control_R>
 3a2:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <gvpu8_I2C_Control_R+0x1>
 3a6:	84 e9       	ldi	r24, 0x94	; 148
 3a8:	80 83       	st	Z, r24
 3aa:	80 81       	ld	r24, Z
 3ac:	84 fd       	sbrc	r24, 4
 3ae:	fd cf       	rjmp	.-6      	; 0x3aa <I2C_Stop+0x10>
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	08 95       	ret

000003b4 <I2C_Write>:
 3b4:	cf 93       	push	r28
 3b6:	c6 2f       	mov	r28, r22
 3b8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <I2C_InitRegisters>
 3bc:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <gvpu8_I2C_Data_R>
 3c0:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <gvpu8_I2C_Data_R+0x1>
 3c4:	c0 83       	st	Z, r28
 3c6:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <gvpu8_I2C_Control_R>
 3ca:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <gvpu8_I2C_Control_R+0x1>
 3ce:	84 e8       	ldi	r24, 0x84	; 132
 3d0:	80 83       	st	Z, r24
 3d2:	80 81       	ld	r24, Z
 3d4:	88 23       	and	r24, r24
 3d6:	ec f7       	brge	.-6      	; 0x3d2 <I2C_Write+0x1e>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <I2C_ReadNotAck>:

I2C_STATUS_t I2C_ReadNotAck(uint8_t u8_I2C_CH, uint8_t * pu8_Data)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	eb 01       	movw	r28, r22
	/* Initialize registers */
	I2C_InitRegisters(u8_I2C_CH);
 3e4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <I2C_InitRegisters>
	/* Enable TWI, Ack and clear interrupt flag */
	*gvpu8_I2C_Control_R |= (I2C_EN | I2C_INTERRUPT_FLAG);
 3e8:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <gvpu8_I2C_Control_R>
 3ec:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <gvpu8_I2C_Control_R+0x1>
 3f0:	80 81       	ld	r24, Z
 3f2:	84 68       	ori	r24, 0x84	; 132
 3f4:	80 83       	st	Z, r24
	/* Wait until TWI finish its current job */
	while (!(*gvpu8_I2C_Control_R & I2C_INTERRUPT_FLAG));
 3f6:	80 81       	ld	r24, Z
 3f8:	88 23       	and	r24, r24
 3fa:	ec f7       	brge	.-6      	; 0x3f6 <I2C_ReadNotAck+0x18>
	/* Copy data in TWI data register */
	*pu8_Data = *gvpu8_I2C_Data_R;
 3fc:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <gvpu8_I2C_Data_R>
 400:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <gvpu8_I2C_Data_R+0x1>
 404:	80 81       	ld	r24, Z
 406:	88 83       	st	Y, r24
	/* return success macro */
	return I2C_SUCCESS;
}
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <char_bits>:
*                         LOCAL FUNCTION IMPLEMENTATION								*
*******************************************************************************/

void char_bits(uint8_t bits_no)
{
	switch (bits_no){
 410:	84 30       	cpi	r24, 0x04	; 4
 412:	49 f4       	brne	.+18     	; 0x426 <char_bits+0x16>
		case (UART_9_Bit_CHAR) :
		{
			SET_BIT(UCSRC, URSEL);
 414:	90 b5       	in	r25, 0x20	; 32
 416:	90 68       	ori	r25, 0x80	; 128
 418:	90 bd       	out	0x20, r25	; 32
			UCSRC |= ((uint8_t)(UART_8_Bit_CHAR) << 1);
 41a:	90 b5       	in	r25, 0x20	; 32
 41c:	96 60       	ori	r25, 0x06	; 6
 41e:	90 bd       	out	0x20, r25	; 32
			SET_BIT(UCSRB, UCSZ2);
 420:	9a b1       	in	r25, 0x0a	; 10
 422:	94 60       	ori	r25, 0x04	; 4
 424:	9a b9       	out	0x0a, r25	; 10
		}
		default:
		{
			SET_BIT(UCSRC, URSEL);
 426:	90 b5       	in	r25, 0x20	; 32
 428:	90 68       	ori	r25, 0x80	; 128
 42a:	90 bd       	out	0x20, r25	; 32
			UCSRC |= (bits_no << 1);
 42c:	20 b5       	in	r18, 0x20	; 32
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	82 2b       	or	r24, r18
 436:	80 bd       	out	0x20, r24	; 32
 438:	08 95       	ret

0000043a <UART_Init>:

/******************************************************************************
*                         APIS IMPLEMENTATION											*
*******************************************************************************/
UART_STATUS UART_Init(ST_UART_CONFIG_t config)
{
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	2c 97       	sbiw	r28, 0x0c	; 12
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	e9 82       	std	Y+1, r14	; 0x01
 458:	fa 82       	std	Y+2, r15	; 0x02
 45a:	0b 83       	std	Y+3, r16	; 0x03
 45c:	1c 83       	std	Y+4, r17	; 0x04
 45e:	2d 83       	std	Y+5, r18	; 0x05
 460:	3e 83       	std	Y+6, r19	; 0x06
 462:	4f 83       	std	Y+7, r20	; 0x07
 464:	58 87       	std	Y+8, r21	; 0x08
 466:	69 87       	std	Y+9, r22	; 0x09
 468:	7a 87       	std	Y+10, r23	; 0x0a
 46a:	8b 87       	std	Y+11, r24	; 0x0b
 46c:	9c 87       	std	Y+12, r25	; 0x0c
	g_ST_UART_CONFIG_t = config;
 46e:	8c e0       	ldi	r24, 0x0C	; 12
 470:	fe 01       	movw	r30, r28
 472:	31 96       	adiw	r30, 0x01	; 1
 474:	a8 e2       	ldi	r26, 0x28	; 40
 476:	b1 e0       	ldi	r27, 0x01	; 1
 478:	01 90       	ld	r0, Z+
 47a:	0d 92       	st	X+, r0
 47c:	8a 95       	dec	r24
 47e:	e1 f7       	brne	.-8      	; 0x478 <UART_Init+0x3e>
	uint32_t UBRR_VAL;
	/************** Check Baud rate and Speed mode **************/
	if ((g_ST_UART_CONFIG_t.BAUD_RATE >= 0) && (g_ST_UART_CONFIG_t.BAUD_RATE <= MAX_BAUD_RATE))
 480:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <g_ST_UART_CONFIG_t+0x1>
 484:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <g_ST_UART_CONFIG_t+0x2>
 488:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <g_ST_UART_CONFIG_t+0x3>
 48c:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <g_ST_UART_CONFIG_t+0x4>
 490:	81 15       	cp	r24, r1
 492:	20 e1       	ldi	r18, 0x10	; 16
 494:	92 07       	cpc	r25, r18
 496:	a1 05       	cpc	r26, r1
 498:	b1 05       	cpc	r27, r1
 49a:	08 f0       	brcs	.+2      	; 0x49e <UART_Init+0x64>
 49c:	9a c0       	rjmp	.+308    	; 0x5d2 <UART_Init+0x198>
	{
		if(g_ST_UART_CONFIG_t.SPEED_MODE == UART_NORMAL_SPEED){
 49e:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <g_ST_UART_CONFIG_t>
 4a2:	21 11       	cpse	r18, r1
 4a4:	1f c0       	rjmp	.+62     	; 0x4e4 <UART_Init+0xaa>
			UBRR_VAL = (uint32_t) ((F_CPU/(16*g_ST_UART_CONFIG_t.BAUD_RATE))-1);
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	aa 1f       	adc	r26, r26
 4ac:	bb 1f       	adc	r27, r27
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	aa 1f       	adc	r26, r26
 4b4:	bb 1f       	adc	r27, r27
 4b6:	9c 01       	movw	r18, r24
 4b8:	ad 01       	movw	r20, r26
 4ba:	22 0f       	add	r18, r18
 4bc:	33 1f       	adc	r19, r19
 4be:	44 1f       	adc	r20, r20
 4c0:	55 1f       	adc	r21, r21
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	44 1f       	adc	r20, r20
 4c8:	55 1f       	adc	r21, r21
 4ca:	60 e4       	ldi	r22, 0x40	; 64
 4cc:	72 e4       	ldi	r23, 0x42	; 66
 4ce:	8f e0       	ldi	r24, 0x0F	; 15
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__udivmodsi4>
 4d6:	ba 01       	movw	r22, r20
 4d8:	a9 01       	movw	r20, r18
 4da:	41 50       	subi	r20, 0x01	; 1
 4dc:	51 09       	sbc	r21, r1
 4de:	61 09       	sbc	r22, r1
 4e0:	71 09       	sbc	r23, r1
 4e2:	27 c0       	rjmp	.+78     	; 0x532 <UART_Init+0xf8>
		}
		else if(g_ST_UART_CONFIG_t.SPEED_MODE == UART_DOUBLE_SPEED)
 4e4:	22 30       	cpi	r18, 0x02	; 2
 4e6:	09 f0       	breq	.+2      	; 0x4ea <UART_Init+0xb0>
 4e8:	76 c0       	rjmp	.+236    	; 0x5d6 <UART_Init+0x19c>
		{
			SET_BIT(UCSRA, U2X);
 4ea:	8b b1       	in	r24, 0x0b	; 11
 4ec:	82 60       	ori	r24, 0x02	; 2
 4ee:	8b b9       	out	0x0b, r24	; 11
			UBRR_VAL = (uint16_t) ((F_CPU/(8*g_ST_UART_CONFIG_t.BAUD_RATE))-1);
 4f0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <g_ST_UART_CONFIG_t+0x1>
 4f4:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <g_ST_UART_CONFIG_t+0x2>
 4f8:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <g_ST_UART_CONFIG_t+0x3>
 4fc:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <g_ST_UART_CONFIG_t+0x4>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	aa 1f       	adc	r26, r26
 506:	bb 1f       	adc	r27, r27
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	aa 1f       	adc	r26, r26
 50e:	bb 1f       	adc	r27, r27
 510:	9c 01       	movw	r18, r24
 512:	ad 01       	movw	r20, r26
 514:	22 0f       	add	r18, r18
 516:	33 1f       	adc	r19, r19
 518:	44 1f       	adc	r20, r20
 51a:	55 1f       	adc	r21, r21
 51c:	60 e4       	ldi	r22, 0x40	; 64
 51e:	72 e4       	ldi	r23, 0x42	; 66
 520:	8f e0       	ldi	r24, 0x0F	; 15
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__udivmodsi4>
 528:	21 50       	subi	r18, 0x01	; 1
 52a:	31 09       	sbc	r19, r1
 52c:	a9 01       	movw	r20, r18
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	70 e0       	ldi	r23, 0x00	; 0
	}
	else
	{
		return UART_INVALID_BAUD_RATE;
	}
	UBRRH =(uint8_t) (UBRR_VAL >> 8);
 532:	bb 27       	eor	r27, r27
 534:	a7 2f       	mov	r26, r23
 536:	96 2f       	mov	r25, r22
 538:	85 2f       	mov	r24, r21
 53a:	80 bd       	out	0x20, r24	; 32
	UBRRL = (uint8_t) UBRR_VAL;
 53c:	49 b9       	out	0x09, r20	; 9
	
	
	/************** Enable transmitter **************/
	if ((g_ST_UART_CONFIG_t.TRANSMIT == UART_TRANSMIT_ENABLE) || (g_ST_UART_CONFIG_t.TRANSMIT == UART_TRANSMIT_DISABLE))
 53e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <g_ST_UART_CONFIG_t+0x5>
 542:	88 30       	cpi	r24, 0x08	; 8
 544:	11 f0       	breq	.+4      	; 0x54a <UART_Init+0x110>
 546:	81 11       	cpse	r24, r1
 548:	48 c0       	rjmp	.+144    	; 0x5da <UART_Init+0x1a0>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMIT));
 54a:	9a b1       	in	r25, 0x0a	; 10
 54c:	89 2b       	or	r24, r25
 54e:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_TRANSMIT_ERROR;
	}
	/************** Enable receiver **************/
	if ((g_ST_UART_CONFIG_t.RECIEVE == UART_RECIEVE_ENABLE) || (g_ST_UART_CONFIG_t.RECIEVE == UART_RECIEVE_DISABLE))
 550:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_ST_UART_CONFIG_t+0x6>
 554:	80 31       	cpi	r24, 0x10	; 16
 556:	11 f0       	breq	.+4      	; 0x55c <UART_Init+0x122>
 558:	81 11       	cpse	r24, r1
 55a:	41 c0       	rjmp	.+130    	; 0x5de <UART_Init+0x1a4>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE));
 55c:	9a b1       	in	r25, 0x0a	; 10
 55e:	89 2b       	or	r24, r25
 560:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_RECIEVE_ERROR;
	}
	/************** Char BITS **************/
	if ((g_ST_UART_CONFIG_t.CHAR_BITS >= UART_5_Bit_CHAR) && (g_ST_UART_CONFIG_t.CHAR_BITS <= UART_9_Bit_CHAR))
 562:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_ST_UART_CONFIG_t+0x7>
 566:	85 30       	cpi	r24, 0x05	; 5
 568:	e0 f5       	brcc	.+120    	; 0x5e2 <UART_Init+0x1a8>
	{
		char_bits(g_ST_UART_CONFIG_t.CHAR_BITS);
 56a:	0e 94 08 02 	call	0x410	; 0x410 <char_bits>
	else
	{
		return UART_CHAR_BITS_ERROR;
	}
	/************** Stop BITS **************/
	if ((g_ST_UART_CONFIG_t.STOP_BIT == UART_1_STOP_BIT) || (g_ST_UART_CONFIG_t.STOP_BIT == UART_2_STOP_BIT))
 56e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_ST_UART_CONFIG_t+0x9>
 572:	88 23       	and	r24, r24
 574:	11 f0       	breq	.+4      	; 0x57a <UART_Init+0x140>
 576:	88 30       	cpi	r24, 0x08	; 8
 578:	b1 f5       	brne	.+108    	; 0x5e6 <UART_Init+0x1ac>
	{
		SET_BIT(UCSRC, URSEL);
 57a:	80 b5       	in	r24, 0x20	; 32
 57c:	80 68       	ori	r24, 0x80	; 128
 57e:	80 bd       	out	0x20, r24	; 32
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.STOP_BIT));
 580:	90 b5       	in	r25, 0x20	; 32
 582:	e8 e2       	ldi	r30, 0x28	; 40
 584:	f1 e0       	ldi	r31, 0x01	; 1
 586:	81 85       	ldd	r24, Z+9	; 0x09
 588:	89 2b       	or	r24, r25
 58a:	80 bd       	out	0x20, r24	; 32
	else
	{
		return UART_STOP_BITS_ERROR;
	}
	/************** Parity BITS **************/
	if ((g_ST_UART_CONFIG_t.PARITY_MODE == UART_NO_PARITY) || (g_ST_UART_CONFIG_t.PARITY_MODE == UART_EVEN_PARITY) || (g_ST_UART_CONFIG_t.PARITY_MODE == UART_ODD_PARITY))
 58c:	80 85       	ldd	r24, Z+8	; 0x08
 58e:	88 23       	and	r24, r24
 590:	21 f0       	breq	.+8      	; 0x59a <UART_Init+0x160>
 592:	80 32       	cpi	r24, 0x20	; 32
 594:	11 f0       	breq	.+4      	; 0x59a <UART_Init+0x160>
 596:	80 33       	cpi	r24, 0x30	; 48
 598:	41 f5       	brne	.+80     	; 0x5ea <UART_Init+0x1b0>
	{
		SET_BIT(UCSRC, URSEL);
 59a:	80 b5       	in	r24, 0x20	; 32
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	80 bd       	out	0x20, r24	; 32
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.PARITY_MODE));
 5a0:	90 b5       	in	r25, 0x20	; 32
 5a2:	e8 e2       	ldi	r30, 0x28	; 40
 5a4:	f1 e0       	ldi	r31, 0x01	; 1
 5a6:	80 85       	ldd	r24, Z+8	; 0x08
 5a8:	89 2b       	or	r24, r25
 5aa:	80 bd       	out	0x20, r24	; 32
	else
	{
		return UART_PARITY_ERROR;
	}
	/************** Enable transmitter interrupt**************/
	if ((g_ST_UART_CONFIG_t.TRANSMITER_INT == UART_TRANSMITER_INT_ENABLE) || (g_ST_UART_CONFIG_t.TRANSMITER_INT == UART_TRANSMITER_INT_DISABLE))
 5ac:	82 85       	ldd	r24, Z+10	; 0x0a
 5ae:	80 34       	cpi	r24, 0x40	; 64
 5b0:	11 f0       	breq	.+4      	; 0x5b6 <UART_Init+0x17c>
 5b2:	81 11       	cpse	r24, r1
 5b4:	1c c0       	rjmp	.+56     	; 0x5ee <UART_Init+0x1b4>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMITER_INT));
 5b6:	9a b1       	in	r25, 0x0a	; 10
 5b8:	89 2b       	or	r24, r25
 5ba:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_TRANSMIT_ERROR;
	}
	/************** Enable receiver interrupt **************/
	if ((g_ST_UART_CONFIG_t.RECIEVE_INT == UART_RECIEVER_INT_ENABLE) || (g_ST_UART_CONFIG_t.RECIEVE_INT == UART_RECIEVER_INT_DISABLE))
 5bc:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_ST_UART_CONFIG_t+0xb>
 5c0:	80 38       	cpi	r24, 0x80	; 128
 5c2:	11 f0       	breq	.+4      	; 0x5c8 <UART_Init+0x18e>
 5c4:	81 11       	cpse	r24, r1
 5c6:	15 c0       	rjmp	.+42     	; 0x5f2 <UART_Init+0x1b8>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE_INT));
 5c8:	9a b1       	in	r25, 0x0a	; 10
 5ca:	89 2b       	or	r24, r25
 5cc:	8a b9       	out	0x0a, r24	; 10
	else
	{
		return UART_RECIEVE_INT_ERROR;
	}
	g_u8_UART_init = INIT;
	return UART_SUCCESS;
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <UART_Init+0x1ba>
			return UART_ERROR_NOT_INITIALIZED;
		}
	}
	else
	{
		return UART_INVALID_BAUD_RATE;
 5d2:	85 e0       	ldi	r24, 0x05	; 5
 5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <UART_Init+0x1ba>
		{
			SET_BIT(UCSRA, U2X);
			UBRR_VAL = (uint16_t) ((F_CPU/(8*g_ST_UART_CONFIG_t.BAUD_RATE))-1);
		}
		else{
			return UART_ERROR_NOT_INITIALIZED;
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <UART_Init+0x1ba>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMIT));
	}
	else
	{
		return UART_TRANSMIT_ERROR;
 5da:	86 e0       	ldi	r24, 0x06	; 6
 5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <UART_Init+0x1ba>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE));
	}
	else
	{
		return UART_RECIEVE_ERROR;
 5de:	87 e0       	ldi	r24, 0x07	; 7
 5e0:	09 c0       	rjmp	.+18     	; 0x5f4 <UART_Init+0x1ba>
	{
		char_bits(g_ST_UART_CONFIG_t.CHAR_BITS);
	}
	else
	{
		return UART_CHAR_BITS_ERROR;
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <UART_Init+0x1ba>
		SET_BIT(UCSRC, URSEL);
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.STOP_BIT));
	}
	else
	{
		return UART_STOP_BITS_ERROR;
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <UART_Init+0x1ba>
		SET_BIT(UCSRC, URSEL);
		UCSRC |= ((uint8_t)(g_ST_UART_CONFIG_t.PARITY_MODE));
	}
	else
	{
		return UART_PARITY_ERROR;
 5ea:	84 e0       	ldi	r24, 0x04	; 4
 5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <UART_Init+0x1ba>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.TRANSMITER_INT));
	}
	else
	{
		return UART_TRANSMIT_ERROR;
 5ee:	86 e0       	ldi	r24, 0x06	; 6
 5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <UART_Init+0x1ba>
	{
		UCSRB |= ((uint8_t)(g_ST_UART_CONFIG_t.RECIEVE_INT));
	}
	else
	{
		return UART_RECIEVE_INT_ERROR;
 5f2:	89 e0       	ldi	r24, 0x09	; 9
	}
	g_u8_UART_init = INIT;
	return UART_SUCCESS;
}
 5f4:	2c 96       	adiw	r28, 0x0c	; 12
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	f8 94       	cli
 5fa:	de bf       	out	0x3e, r29	; 62
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	cd bf       	out	0x3d, r28	; 61
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	ff 90       	pop	r15
 60a:	ef 90       	pop	r14
 60c:	08 95       	ret

0000060e <UART_TransmitChar>:

UART_STATUS UART_TransmitChar(uint16_t data)
{
	while (! (READ_BIT(UCSRA, UDRE)));
 60e:	5d 9b       	sbis	0x0b, 5	; 11
 610:	fe cf       	rjmp	.-4      	; 0x60e <UART_TransmitChar>
	if (g_ST_UART_CONFIG_t.CHAR_BITS == UART_9_Bit_CHAR)
 612:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <g_ST_UART_CONFIG_t+0x7>
 616:	24 30       	cpi	r18, 0x04	; 4
 618:	21 f4       	brne	.+8      	; 0x622 <UART_TransmitChar+0x14>
	{
		UCSRB |= ((data >> 8) & 1);
 61a:	2a b1       	in	r18, 0x0a	; 10
 61c:	91 70       	andi	r25, 0x01	; 1
 61e:	92 2b       	or	r25, r18
 620:	9a b9       	out	0x0a, r25	; 10
	}
	/* Put data into buffer, sends the data */
	UDR = data;
 622:	8c b9       	out	0x0c, r24	; 12
	return UART_SUCCESS;
}
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	08 95       	ret

00000628 <UART_TransmitString>:

UART_STATUS UART_TransmitString(uint8_t *data)
{
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	8c 01       	movw	r16, r24
	uint8_t j = STRING_START;
 630:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (data[j]!= STRING_END)		/* Send string till null */
 632:	04 c0       	rjmp	.+8      	; 0x63c <UART_TransmitString+0x14>
	{
		UART_TransmitChar(data[j]);
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 07 03 	call	0x60e	; 0x60e <UART_TransmitChar>
		j++;
 63a:	cf 5f       	subi	r28, 0xFF	; 255

UART_STATUS UART_TransmitString(uint8_t *data)
{
	uint8_t j = STRING_START;
	
	while (data[j]!= STRING_END)		/* Send string till null */
 63c:	f8 01       	movw	r30, r16
 63e:	ec 0f       	add	r30, r28
 640:	f1 1d       	adc	r31, r1
 642:	80 81       	ld	r24, Z
 644:	81 11       	cpse	r24, r1
 646:	f6 cf       	rjmp	.-20     	; 0x634 <UART_TransmitString+0xc>
		UART_TransmitChar(data[j]);
		j++;
	}
	
	return UART_SUCCESS;
}
 648:	cf 91       	pop	r28
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	08 95       	ret

00000650 <UART_RecieveChar>:

UART_STATUS UART_RecieveChar(uint16_t * character)
{
 650:	fc 01       	movw	r30, r24
	while (! (READ_BIT(UCSRA, RXC)));
 652:	5f 9b       	sbis	0x0b, 7	; 11
 654:	fe cf       	rjmp	.-4      	; 0x652 <UART_RecieveChar+0x2>
	if (g_ST_UART_CONFIG_t.CHAR_BITS == UART_9_Bit_CHAR)
 656:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_ST_UART_CONFIG_t+0x7>
 65a:	84 30       	cpi	r24, 0x04	; 4
 65c:	79 f4       	brne	.+30     	; 0x67c <UART_RecieveChar+0x2c>
	{
		while ((UCSRA) & ((1<<FE)|(1<<DOR)|(1<<PE)));
 65e:	9b b1       	in	r25, 0x0b	; 11
 660:	9c 71       	andi	r25, 0x1C	; 28
 662:	e9 f7       	brne	.-6      	; 0x65e <UART_RecieveChar+0xe>
		UCSRB = (UCSRB >> 1) & 0x01;
 664:	8a b1       	in	r24, 0x0a	; 10
 666:	86 95       	lsr	r24
 668:	81 70       	andi	r24, 0x01	; 1
 66a:	8a b9       	out	0x0a, r24	; 10
		*character = ((UCSRB << 8) | UDR);
 66c:	2a b1       	in	r18, 0x0a	; 10
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	32 2f       	mov	r19, r18
 672:	22 27       	eor	r18, r18
 674:	8c b1       	in	r24, 0x0c	; 12
 676:	28 2b       	or	r18, r24
 678:	31 83       	std	Z+1, r19	; 0x01
 67a:	20 83       	st	Z, r18
	}
	
	*character =  UDR;				/* Return the byte*/
 67c:	2c b1       	in	r18, 0x0c	; 12
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	31 83       	std	Z+1, r19	; 0x01
 682:	20 83       	st	Z, r18
	return UART_SUCCESS;
}
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	08 95       	ret

00000688 <UART_RecieveString>:

UART_STATUS UART_RecieveString(uint8_t *data)
{
 688:	bc 01       	movw	r22, r24
	uint8_t i = 0;
 68a:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t size = 10;
	
	while (i < size - 1) {
 68c:	12 c0       	rjmp	.+36     	; 0x6b2 <UART_RecieveString+0x2a>
		uint8_t c;
		// wait for another char
		while (! (READ_BIT(UCSRA, RXC)));
 68e:	5f 9b       	sbis	0x0b, 7	; 11
 690:	fe cf       	rjmp	.-4      	; 0x68e <UART_RecieveString+0x6>
		c = (uint8_t)UDR;
 692:	9c b1       	in	r25, 0x0c	; 12
		// break on NULL character
		if ((c == STRING_END) || (c == NEW_LINE)) break;
 694:	99 23       	and	r25, r25
 696:	91 f0       	breq	.+36     	; 0x6bc <UART_RecieveString+0x34>
 698:	9d 30       	cpi	r25, 0x0D	; 13
 69a:	81 f0       	breq	.+32     	; 0x6bc <UART_RecieveString+0x34>
		else if (c == BACKSPACE)
 69c:	98 30       	cpi	r25, 0x08	; 8
 69e:	21 f4       	brne	.+8      	; 0x6a8 <UART_RecieveString+0x20>
		{
			if (i != 0)
 6a0:	22 23       	and	r18, r18
 6a2:	39 f0       	breq	.+14     	; 0x6b2 <UART_RecieveString+0x2a>
			{
				i--;
 6a4:	21 50       	subi	r18, 0x01	; 1
			}
			continue;
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <UART_RecieveString+0x2a>
		}
		// write into the supplied buffer
		data[i] =  (uint8_t)c;
 6a8:	fb 01       	movw	r30, r22
 6aa:	e2 0f       	add	r30, r18
 6ac:	f1 1d       	adc	r31, r1
 6ae:	90 83       	st	Z, r25
		i++;
 6b0:	2f 5f       	subi	r18, 0xFF	; 255
UART_STATUS UART_RecieveString(uint8_t *data)
{
	uint8_t i = 0;
	uint8_t size = 10;
	
	while (i < size - 1) {
 6b2:	42 2f       	mov	r20, r18
 6b4:	50 e0       	ldi	r21, 0x00	; 0
 6b6:	49 30       	cpi	r20, 0x09	; 9
 6b8:	51 05       	cpc	r21, r1
 6ba:	4c f3       	brlt	.-46     	; 0x68e <UART_RecieveString+0x6>
		}
		// write into the supplied buffer
		data[i] =  (uint8_t)c;
		i++;
	}
	data[i] = STRING_END;
 6bc:	fb 01       	movw	r30, r22
 6be:	e2 0f       	add	r30, r18
 6c0:	f1 1d       	adc	r31, r1
 6c2:	10 82       	st	Z, r1
	//return the received string
	return UART_SUCCESS;
}
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	08 95       	ret

000006c8 <__udivmodsi4>:
 6c8:	a1 e2       	ldi	r26, 0x21	; 33
 6ca:	1a 2e       	mov	r1, r26
 6cc:	aa 1b       	sub	r26, r26
 6ce:	bb 1b       	sub	r27, r27
 6d0:	fd 01       	movw	r30, r26
 6d2:	0d c0       	rjmp	.+26     	; 0x6ee <__udivmodsi4_ep>

000006d4 <__udivmodsi4_loop>:
 6d4:	aa 1f       	adc	r26, r26
 6d6:	bb 1f       	adc	r27, r27
 6d8:	ee 1f       	adc	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	a2 17       	cp	r26, r18
 6de:	b3 07       	cpc	r27, r19
 6e0:	e4 07       	cpc	r30, r20
 6e2:	f5 07       	cpc	r31, r21
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__udivmodsi4_ep>
 6e6:	a2 1b       	sub	r26, r18
 6e8:	b3 0b       	sbc	r27, r19
 6ea:	e4 0b       	sbc	r30, r20
 6ec:	f5 0b       	sbc	r31, r21

000006ee <__udivmodsi4_ep>:
 6ee:	66 1f       	adc	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	1a 94       	dec	r1
 6f8:	69 f7       	brne	.-38     	; 0x6d4 <__udivmodsi4_loop>
 6fa:	60 95       	com	r22
 6fc:	70 95       	com	r23
 6fe:	80 95       	com	r24
 700:	90 95       	com	r25
 702:	9b 01       	movw	r18, r22
 704:	ac 01       	movw	r20, r24
 706:	bd 01       	movw	r22, r26
 708:	cf 01       	movw	r24, r30
 70a:	08 95       	ret

0000070c <_exit>:
 70c:	f8 94       	cli

0000070e <__stop_program>:
 70e:	ff cf       	rjmp	.-2      	; 0x70e <__stop_program>
