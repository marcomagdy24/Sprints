
Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f78  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b8  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a9  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007a6  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ac  00000000  00000000  00002d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003532  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
//
//TIFR = 0x1;                            // clear TF0
//}

int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	27 97       	sbiw	r28, 0x07	; 7
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
	ST_DIO_config port_b_5 = {DIO_PORTB, PIN_5, OUTPUT};
  90:	11 e0       	ldi	r17, 0x01	; 1
  92:	19 83       	std	Y+1, r17	; 0x01
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	8a 83       	std	Y+2, r24	; 0x02
  98:	1b 83       	std	Y+3, r17	; 0x03
	DIO_Init(&port_b_5);
  9a:	ce 01       	movw	r24, r28
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	0e 94 7b 00 	call	0xf6	; 0xf6 <DIO_Init>
	ST_TIMER_config_T TM0 = {TOIE0_DISABLE, OCIE0_DISABLE, TIMER0_NORMAL_MODE, TIMER0_PRESCALER_1};
  a2:	1c 82       	std	Y+4, r1	; 0x04
  a4:	1d 82       	std	Y+5, r1	; 0x05
  a6:	1e 82       	std	Y+6, r1	; 0x06
  a8:	1f 83       	std	Y+7, r17	; 0x07
	while (1)
	{
		DIO_Write_PIN(DIO_PORTB, PIN_5, HIGH);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	65 e0       	ldi	r22, 0x05	; 5
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_Write_PIN>
		Timer_Init(&TM0);
  b4:	ce 01       	movw	r24, r28
  b6:	04 96       	adiw	r24, 0x04	; 4
  b8:	0e 94 b6 01 	call	0x36c	; 0x36c <Timer_Init>
		Timer0_Set_Counter_Value(0x20);
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Timer0_Set_Counter_Value>
		TCCR0 = 0x01;                      // Timer0, Normal mode, no prescaler
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	83 bf       	out	0x33, r24	; 51
		while (!(READ_BIT(TIFR, TOV0)));      // wait for TF0 to roll over
  c6:	08 b6       	in	r0, 0x38	; 56
  c8:	00 fe       	sbrs	r0, 0
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <main+0x4a>
		Timer_Stop();
  cc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Timer_Stop>
		TIFR = 0x1;								// repeat forever
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	18 bf       	out	0x38, r17	; 56
		DIO_Write_PIN(DIO_PORTB, PIN_5, LOW);
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	65 e0       	ldi	r22, 0x05	; 5
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 f7 00 	call	0x1ee	; 0x1ee <DIO_Write_PIN>
		Timer0_Set_Counter_Value(0x20);                       // load TCNT0
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Timer0_Set_Counter_Value>
		TCCR0 = 0x01;                      // Timer0, Normal mode, no prescaler
  e4:	13 bf       	out	0x33, r17	; 51
		while (!(READ_BIT(TIFR, TOV0)));      // wait for TF0 to roll over
  e6:	08 b6       	in	r0, 0x38	; 56
  e8:	00 fe       	sbrs	r0, 0
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <main+0x6a>
		Timer_Stop();
  ec:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Timer_Stop>
		TIFR = 0x1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	88 bf       	out	0x38, r24	; 56
	}
  f4:	da cf       	rjmp	.-76     	; 0xaa <main+0x2e>

000000f6 <DIO_Init>:
*/

#include "dio.h"

E_STATUS DIO_Init(ST_DIO_config* configurations)
{
  f6:	fc 01       	movw	r30, r24
	E_STATUS au8_error=E_INVALID;
	if(((configurations->port <= DIO_PORTD)||(configurations->port >= DIO_PORTA))&&
	((configurations->pin <= PIN_7)||(configurations->pin >= PIN_0)))
	{
		switch(configurations->port)
  f8:	90 81       	ld	r25, Z
  fa:	91 30       	cpi	r25, 0x01	; 1
  fc:	19 f1       	breq	.+70     	; 0x144 <DIO_Init+0x4e>
  fe:	30 f0       	brcs	.+12     	; 0x10c <DIO_Init+0x16>
 100:	92 30       	cpi	r25, 0x02	; 2
 102:	e1 f1       	breq	.+120    	; 0x17c <DIO_Init+0x86>
 104:	93 30       	cpi	r25, 0x03	; 3
 106:	09 f4       	brne	.+2      	; 0x10a <DIO_Init+0x14>
 108:	55 c0       	rjmp	.+170    	; 0x1b4 <DIO_Init+0xbe>
 10a:	6f c0       	rjmp	.+222    	; 0x1ea <DIO_Init+0xf4>
		{
			case DIO_PORTA:
			{
				if(configurations->dir == OUTPUT)
 10c:	82 81       	ldd	r24, Z+2	; 0x02
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	61 f4       	brne	.+24     	; 0x12a <DIO_Init+0x34>
				{
					SET_BIT(PORTA_DIR,configurations->pin);
 112:	2a b3       	in	r18, 0x1a	; 26
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	01 80       	ldd	r0, Z+1	; 0x01
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_Init+0x2a>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_Init+0x26>
 124:	82 2b       	or	r24, r18
 126:	8a bb       	out	0x1a, r24	; 26
 128:	60 c0       	rjmp	.+192    	; 0x1ea <DIO_Init+0xf4>
				}else
				{
					RESET_BIT(PORTA_DIR,configurations->pin);
 12a:	2a b3       	in	r18, 0x1a	; 26
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 80       	ldd	r0, Z+1	; 0x01
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_Init+0x42>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_Init+0x3e>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	8a bb       	out	0x1a, r24	; 26
 142:	53 c0       	rjmp	.+166    	; 0x1ea <DIO_Init+0xf4>
				}
				break;
			}
			case DIO_PORTB:
			{
				if(configurations->dir == OUTPUT)
 144:	82 81       	ldd	r24, Z+2	; 0x02
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	61 f4       	brne	.+24     	; 0x162 <DIO_Init+0x6c>
				{
					SET_BIT(PORTB_DIR,configurations->pin);
 14a:	27 b3       	in	r18, 0x17	; 23
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	01 80       	ldd	r0, Z+1	; 0x01
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_Init+0x62>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_Init+0x5e>
 15c:	82 2b       	or	r24, r18
 15e:	87 bb       	out	0x17, r24	; 23
 160:	44 c0       	rjmp	.+136    	; 0x1ea <DIO_Init+0xf4>
				}else
				{
					RESET_BIT(PORTB_DIR,configurations->pin);
 162:	27 b3       	in	r18, 0x17	; 23
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 80       	ldd	r0, Z+1	; 0x01
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_Init+0x7a>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_Init+0x76>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	87 bb       	out	0x17, r24	; 23
 17a:	37 c0       	rjmp	.+110    	; 0x1ea <DIO_Init+0xf4>
				}
				break;
			}
			case DIO_PORTC:
			{
				if(configurations->dir == OUTPUT)
 17c:	82 81       	ldd	r24, Z+2	; 0x02
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	61 f4       	brne	.+24     	; 0x19a <DIO_Init+0xa4>
				{
					SET_BIT(PORTC_DIR,configurations->pin);
 182:	24 b3       	in	r18, 0x14	; 20
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 80       	ldd	r0, Z+1	; 0x01
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_Init+0x9a>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_Init+0x96>
 194:	82 2b       	or	r24, r18
 196:	84 bb       	out	0x14, r24	; 20
 198:	28 c0       	rjmp	.+80     	; 0x1ea <DIO_Init+0xf4>
				}else
				{
					RESET_BIT(PORTC_DIR,configurations->pin);
 19a:	24 b3       	in	r18, 0x14	; 20
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	01 80       	ldd	r0, Z+1	; 0x01
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_Init+0xb2>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_Init+0xae>
 1ac:	80 95       	com	r24
 1ae:	82 23       	and	r24, r18
 1b0:	84 bb       	out	0x14, r24	; 20
 1b2:	1b c0       	rjmp	.+54     	; 0x1ea <DIO_Init+0xf4>
				}
				break;
			}
			case DIO_PORTD:
			{
				if(configurations->dir == OUTPUT)
 1b4:	82 81       	ldd	r24, Z+2	; 0x02
 1b6:	81 30       	cpi	r24, 0x01	; 1
 1b8:	61 f4       	brne	.+24     	; 0x1d2 <DIO_Init+0xdc>
				{
					SET_BIT(PORTD_DIR,configurations->pin);
 1ba:	21 b3       	in	r18, 0x11	; 17
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	01 80       	ldd	r0, Z+1	; 0x01
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_Init+0xd2>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_Init+0xce>
 1cc:	82 2b       	or	r24, r18
 1ce:	81 bb       	out	0x11, r24	; 17
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <DIO_Init+0xf4>
				}else
				{
					RESET_BIT(PORTD_DIR,configurations->pin);
 1d2:	21 b3       	in	r18, 0x11	; 17
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	01 80       	ldd	r0, Z+1	; 0x01
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_Init+0xea>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_Init+0xe6>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	81 bb       	out	0x11, r24	; 17
			}

		}
	}
	return au8_error;
}
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret

000001ee <DIO_Write_PIN>:


E_STATUS DIO_Write_PIN(uint8_t port,EN_pins pin,uint8_t data)
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <DIO_Write_PIN+0x6>
 1f2:	78 c0       	rjmp	.+240    	; 0x2e4 <DIO_Write_PIN+0xf6>
 1f4:	68 30       	cpi	r22, 0x08	; 8
 1f6:	08 f0       	brcs	.+2      	; 0x1fa <DIO_Write_PIN+0xc>
 1f8:	77 c0       	rjmp	.+238    	; 0x2e8 <DIO_Write_PIN+0xfa>
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
		switch(port)
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	11 f1       	breq	.+68     	; 0x242 <DIO_Write_PIN+0x54>
 1fe:	30 f0       	brcs	.+12     	; 0x20c <DIO_Write_PIN+0x1e>
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	d1 f1       	breq	.+116    	; 0x278 <DIO_Write_PIN+0x8a>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	09 f4       	brne	.+2      	; 0x20a <DIO_Write_PIN+0x1c>
 208:	52 c0       	rjmp	.+164    	; 0x2ae <DIO_Write_PIN+0xc0>
 20a:	70 c0       	rjmp	.+224    	; 0x2ec <DIO_Write_PIN+0xfe>
		{
			case DIO_PORTA:
			{
				if(data == HIGH)
 20c:	41 30       	cpi	r20, 0x01	; 1
 20e:	61 f4       	brne	.+24     	; 0x228 <DIO_Write_PIN+0x3a>
				{
					SET_BIT(PORTA_DATA,pin);
 210:	2b b3       	in	r18, 0x1b	; 27
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_Write_PIN+0x2e>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_Write_PIN+0x2a>
 220:	82 2b       	or	r24, r18
 222:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTA_DATA,pin);
				}else
				{
					RESET_BIT(PORTA_DATA,pin);
 228:	2b b3       	in	r18, 0x1b	; 27
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_Write_PIN+0x46>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_Write_PIN+0x42>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	8b bb       	out	0x1b, r24	; 27
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	08 95       	ret
				}
				break;
			}
			case DIO_PORTB:
			{
				if(data == HIGH)
 242:	41 30       	cpi	r20, 0x01	; 1
 244:	61 f4       	brne	.+24     	; 0x25e <DIO_Write_PIN+0x70>
				{
					SET_BIT(PORTB_DATA,pin);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_Write_PIN+0x64>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_Write_PIN+0x60>
 256:	82 2b       	or	r24, r18
 258:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTB_DATA,pin);
				}else
				{
					RESET_BIT(PORTB_DATA,pin);
 25e:	28 b3       	in	r18, 0x18	; 24
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_Write_PIN+0x7c>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_Write_PIN+0x78>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	88 bb       	out	0x18, r24	; 24
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	08 95       	ret
				}
				break;
			}
			case DIO_PORTC:
			{
				if(data == HIGH)
 278:	41 30       	cpi	r20, 0x01	; 1
 27a:	61 f4       	brne	.+24     	; 0x294 <DIO_Write_PIN+0xa6>
				{
					SET_BIT(PORTC_DATA,pin);
 27c:	25 b3       	in	r18, 0x15	; 21
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_Write_PIN+0x9a>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_Write_PIN+0x96>
 28c:	82 2b       	or	r24, r18
 28e:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTC_DATA,pin);
				}else
				{
					RESET_BIT(PORTC_DATA,pin);
 294:	25 b3       	in	r18, 0x15	; 21
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_Write_PIN+0xb2>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_Write_PIN+0xae>
 2a4:	80 95       	com	r24
 2a6:	82 23       	and	r24, r18
 2a8:	85 bb       	out	0x15, r24	; 21
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	08 95       	ret
				}
				break;
			}
			case DIO_PORTD:
			{
				if(data == HIGH)
 2ae:	41 30       	cpi	r20, 0x01	; 1
 2b0:	61 f4       	brne	.+24     	; 0x2ca <DIO_Write_PIN+0xdc>
				{
					SET_BIT(PORTD_DATA,pin);
 2b2:	22 b3       	in	r18, 0x12	; 18
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_Write_PIN+0xd0>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_Write_PIN+0xcc>
 2c2:	82 2b       	or	r24, r18
 2c4:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	08 95       	ret
				if(data == HIGH)
				{
					SET_BIT(PORTD_DATA,pin);
				}else
				{
					RESET_BIT(PORTD_DATA,pin);
 2ca:	22 b3       	in	r18, 0x12	; 18
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_Write_PIN+0xe8>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_Write_PIN+0xe4>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	82 bb       	out	0x12, r24	; 18
{
	E_STATUS au8_error=E_INVALID;
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	08 95       	ret
}


E_STATUS DIO_Write_PIN(uint8_t port,EN_pins pin,uint8_t data)
{
	E_STATUS au8_error=E_INVALID;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	08 95       	ret
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
	if(((port <= DIO_PORTD)&&(port >= DIO_PORTA))&&
	((pin <= PIN_7)&&(pin >= PIN_0)))
	{
		au8_error = E_OK;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
			}

		}
	}
	return au8_error;
}
 2ee:	08 95       	ret

000002f0 <TIMER0_MODE_status>:
}

E_STATUS Timer0_Set_Compare_Value(uint8_t uint8_tVal){
	OCR0 = uint8_tVal;
	return E_OK;
}
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	69 f0       	breq	.+26     	; 0x30e <TIMER0_MODE_status+0x1e>
 2f4:	28 f0       	brcs	.+10     	; 0x300 <TIMER0_MODE_status+0x10>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	89 f0       	breq	.+34     	; 0x31c <TIMER0_MODE_status+0x2c>
 2fa:	83 30       	cpi	r24, 0x03	; 3
 2fc:	b1 f0       	breq	.+44     	; 0x32a <TIMER0_MODE_status+0x3a>
 2fe:	08 95       	ret
 300:	83 b7       	in	r24, 0x33	; 51
 302:	8f 7b       	andi	r24, 0xBF	; 191
 304:	83 bf       	out	0x33, r24	; 51
 306:	83 b7       	in	r24, 0x33	; 51
 308:	87 7f       	andi	r24, 0xF7	; 247
 30a:	83 bf       	out	0x33, r24	; 51
 30c:	08 95       	ret
 30e:	83 b7       	in	r24, 0x33	; 51
 310:	80 64       	ori	r24, 0x40	; 64
 312:	83 bf       	out	0x33, r24	; 51
 314:	83 b7       	in	r24, 0x33	; 51
 316:	87 7f       	andi	r24, 0xF7	; 247
 318:	83 bf       	out	0x33, r24	; 51
 31a:	08 95       	ret
 31c:	83 b7       	in	r24, 0x33	; 51
 31e:	8f 7b       	andi	r24, 0xBF	; 191
 320:	83 bf       	out	0x33, r24	; 51
 322:	83 b7       	in	r24, 0x33	; 51
 324:	88 60       	ori	r24, 0x08	; 8
 326:	83 bf       	out	0x33, r24	; 51
 328:	08 95       	ret
 32a:	83 b7       	in	r24, 0x33	; 51
 32c:	80 64       	ori	r24, 0x40	; 64
 32e:	83 bf       	out	0x33, r24	; 51
 330:	83 b7       	in	r24, 0x33	; 51
 332:	88 60       	ori	r24, 0x08	; 8
 334:	83 bf       	out	0x33, r24	; 51
 336:	08 95       	ret

00000338 <TIMER0_OCIE_status>:
 338:	88 23       	and	r24, r24
 33a:	19 f0       	breq	.+6      	; 0x342 <TIMER0_OCIE_status+0xa>
 33c:	81 30       	cpi	r24, 0x01	; 1
 33e:	29 f0       	breq	.+10     	; 0x34a <TIMER0_OCIE_status+0x12>
 340:	08 95       	ret
 342:	89 b7       	in	r24, 0x39	; 57
 344:	8d 7f       	andi	r24, 0xFD	; 253
 346:	89 bf       	out	0x39, r24	; 57
 348:	08 95       	ret
 34a:	89 b7       	in	r24, 0x39	; 57
 34c:	82 60       	ori	r24, 0x02	; 2
 34e:	89 bf       	out	0x39, r24	; 57
 350:	08 95       	ret

00000352 <TIMER0_OVFI_status>:
 352:	88 23       	and	r24, r24
 354:	19 f0       	breq	.+6      	; 0x35c <TIMER0_OVFI_status+0xa>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	29 f0       	breq	.+10     	; 0x364 <TIMER0_OVFI_status+0x12>
 35a:	08 95       	ret
 35c:	89 b7       	in	r24, 0x39	; 57
 35e:	8e 7f       	andi	r24, 0xFE	; 254
 360:	89 bf       	out	0x39, r24	; 57
 362:	08 95       	ret
 364:	89 b7       	in	r24, 0x39	; 57
 366:	81 60       	ori	r24, 0x01	; 1
 368:	89 bf       	out	0x39, r24	; 57
 36a:	08 95       	ret

0000036c <Timer_Init>:
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ec 01       	movw	r28, r24
 372:	8a 81       	ldd	r24, Y+2	; 0x02
 374:	84 30       	cpi	r24, 0x04	; 4
 376:	20 f4       	brcc	.+8      	; 0x380 <Timer_Init+0x14>
 378:	0e 94 78 01 	call	0x2f0	; 0x2f0 <TIMER0_MODE_status>
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	01 c0       	rjmp	.+2      	; 0x382 <Timer_Init+0x16>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	98 81       	ld	r25, Y
 384:	92 30       	cpi	r25, 0x02	; 2
 386:	20 f4       	brcc	.+8      	; 0x390 <Timer_Init+0x24>
 388:	89 2f       	mov	r24, r25
 38a:	0e 94 a9 01 	call	0x352	; 0x352 <TIMER0_OVFI_status>
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	99 81       	ldd	r25, Y+1	; 0x01
 392:	92 30       	cpi	r25, 0x02	; 2
 394:	20 f4       	brcc	.+8      	; 0x39e <Timer_Init+0x32>
 396:	89 2f       	mov	r24, r25
 398:	0e 94 9c 01 	call	0x338	; 0x338 <TIMER0_OCIE_status>
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	9b 81       	ldd	r25, Y+3	; 0x03
 3a0:	98 30       	cpi	r25, 0x08	; 8
 3a2:	20 f4       	brcc	.+8      	; 0x3ac <Timer_Init+0x40>
 3a4:	83 b7       	in	r24, 0x33	; 51
 3a6:	98 2b       	or	r25, r24
 3a8:	93 bf       	out	0x33, r25	; 51
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	12 be       	out	0x32, r1	; 50
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <Timer_Stop>:
 3b4:	13 be       	out	0x33, r1	; 51
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	08 95       	ret

000003ba <Timer0_Set_Counter_Value>:

E_STATUS Timer0_Set_Counter_Value(uint8_t uint8_tVal){
	TCNT0 = uint8_tVal;
 3ba:	82 bf       	out	0x32, r24	; 50
	return E_OK;
}
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
