
ATM Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000372  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001620  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af4  00000000  00000000  00002432  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000505  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000066b  00000000  00000000  000035cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003c38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b7 01 	jmp	0x36e	; 0x36e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "MCAL/Keypad/Keypad.h"
#include <stdlib.h>


int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	62 97       	sbiw	r28, 0x12	; 18
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	/* Replace with your application code */
	//uint8_t key_pressed;
	ADC_Init();
  a6:	0e 94 8f 00 	call	0x11e	; 0x11e <ADC_Init>
	LCD_INIT();
  aa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_INIT>
	LCD_WRITE_STRING((uint8_t *)"Temp= ");
  ae:	80 e6       	ldi	r24, 0x60	; 96
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_WRITE_STRING>
	LCD_GOTO_XY(FIRST_ROW,8);
  b6:	68 e0       	ldi	r22, 0x08	; 8
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 18 01 	call	0x230	; 0x230 <LCD_GOTO_XY>
	LCD_WRITE_CHAR('C');
  be:	83 e4       	ldi	r24, 0x43	; 67
  c0:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WRITE_CHAR>
	uint16_t temp;
	//LCD_CUSTOM_CHARACTER();
	KEYPAD_INIT();
  c4:	0e 94 bb 00 	call	0x176	; 0x176 <KEYPAD_INIT>
	
	
	while (1)
	{
		ADC_Read(ADC_CHANNEL_0, &temp);
  c8:	be 01       	movw	r22, r28
  ca:	6f 5f       	subi	r22, 0xFF	; 255
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 97 00 	call	0x12e	; 0x12e <ADC_Read>
		temp = (temp * 150 / 308);
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	46 e9       	ldi	r20, 0x96	; 150
  da:	48 9f       	mul	r20, r24
  dc:	90 01       	movw	r18, r0
  de:	49 9f       	mul	r20, r25
  e0:	30 0d       	add	r19, r0
  e2:	11 24       	eor	r1, r1
  e4:	a9 e9       	ldi	r26, 0x99	; 153
  e6:	ba e1       	ldi	r27, 0x1A	; 26
  e8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__umulhisi3>
  ec:	96 95       	lsr	r25
  ee:	87 95       	ror	r24
  f0:	92 95       	swap	r25
  f2:	82 95       	swap	r24
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	89 27       	eor	r24, r25
  f8:	9f 70       	andi	r25, 0x0F	; 15
  fa:	89 27       	eor	r24, r25
  fc:	9a 83       	std	Y+2, r25	; 0x02
  fe:	89 83       	std	Y+1, r24	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 100:	4a e0       	ldi	r20, 0x0A	; 10
 102:	be 01       	movw	r22, r28
 104:	6d 5f       	subi	r22, 0xFD	; 253
 106:	7f 4f       	sbci	r23, 0xFF	; 255
 108:	0e 94 82 01 	call	0x304	; 0x304 <__itoa_ncheck>
		char buff[16];
		itoa(temp, buff,10);
		LCD_GOTO_XY(FIRST_ROW,6);
 10c:	66 e0       	ldi	r22, 0x06	; 6
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 18 01 	call	0x230	; 0x230 <LCD_GOTO_XY>
		LCD_WRITE_STRING((uint8_t *) buff);
 114:	ce 01       	movw	r24, r28
 116:	03 96       	adiw	r24, 0x03	; 3
 118:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_WRITE_STRING>
 11c:	d5 cf       	rjmp	.-86     	; 0xc8 <main+0x36>

0000011e <ADC_Init>:
*                         APIS IMPLEMENTATION											*
*******************************************************************************/
ADC_STATUS_t ADC_Init(void)
{
	/* Enable ADC, fr/128  */
	ADCSRA |= (ADC_ENABLE | ADC_PRESCALER_SELECTION);
 11e:	86 b1       	in	r24, 0x06	; 6
 120:	87 68       	ori	r24, 0x87	; 135
 122:	86 b9       	out	0x06, r24	; 6
	/* Vref: Avcc */
	ADMUX |= VOLTAGE_REFERENCE_SELECTION ;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 64       	ori	r24, 0x40	; 64
 128:	87 b9       	out	0x07, r24	; 7
	return ADC_SUCCESS;
}
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 95       	ret

0000012e <ADC_Read>:

ADC_STATUS_t ADC_Read(uint8_t u8_ADC_CH, uint16_t * u8_Data)
{
	/* Set input channel to read */
	if (u8_Data == NULL_PTR)
 12e:	61 15       	cp	r22, r1
 130:	71 05       	cpc	r23, r1
 132:	e9 f0       	breq	.+58     	; 0x16e <ADC_Read+0x40>
	{
		return ADC_NULL_PTR;
	}
	else if ((u8_ADC_CH > ADC_CHANNEL_7) || (u8_ADC_CH < ADC_CHANNEL_0))
 134:	88 30       	cpi	r24, 0x08	; 8
 136:	e8 f4       	brcc	.+58     	; 0x172 <ADC_Read+0x44>
	{
		return ADC_INVALID_CH;
	}
	/* Select the required ADC channel */
	
	ADMUX |= (u8_ADC_CH & 0x1F);
 138:	97 b1       	in	r25, 0x07	; 7
 13a:	8f 71       	andi	r24, 0x1F	; 31
 13c:	89 2b       	or	r24, r25
 13e:	87 b9       	out	0x07, r24	; 7
	/* Start conversion */
	
	ADCSRA |= ADC_START_CONVERSION;
 140:	86 b1       	in	r24, 0x06	; 6
 142:	80 64       	ori	r24, 0x40	; 64
 144:	86 b9       	out	0x06, r24	; 6
	/* Monitor end of conversion interrupt */
	while(! (ADCSRA&(1<<ADIF)));	
 146:	34 9b       	sbis	0x06, 4	; 6
 148:	fe cf       	rjmp	.-4      	; 0x146 <ADC_Read+0x18>
	/* clear interrupt flag */
	ADCSRA |= ADIF;
 14a:	86 b1       	in	r24, 0x06	; 6
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	86 b9       	out	0x06, r24	; 6
	*u8_Data = (ADCL);
 150:	84 b1       	in	r24, 0x04	; 4
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fb 01       	movw	r30, r22
 156:	91 83       	std	Z+1, r25	; 0x01
 158:	80 83       	st	Z, r24
	*u8_Data += (ADCH << 8);
 15a:	25 b1       	in	r18, 0x05	; 5
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	32 2f       	mov	r19, r18
 160:	22 27       	eor	r18, r18
 162:	82 0f       	add	r24, r18
 164:	93 1f       	adc	r25, r19
 166:	91 83       	std	Z+1, r25	; 0x01
 168:	80 83       	st	Z, r24
	return ADC_SUCCESS;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret
ADC_STATUS_t ADC_Read(uint8_t u8_ADC_CH, uint16_t * u8_Data)
{
	/* Set input channel to read */
	if (u8_Data == NULL_PTR)
	{
		return ADC_NULL_PTR;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 95       	ret
	}
	else if ((u8_ADC_CH > ADC_CHANNEL_7) || (u8_ADC_CH < ADC_CHANNEL_0))
	{
		return ADC_INVALID_CH;
 172:	81 e0       	ldi	r24, 0x01	; 1
	/* clear interrupt flag */
	ADCSRA |= ADIF;
	*u8_Data = (ADCL);
	*u8_Data += (ADCH << 8);
	return ADC_SUCCESS;
}
 174:	08 95       	ret

00000176 <KEYPAD_INIT>:

uint8_t Keypad_R[] = {R0, R1, R2, R3};
uint8_t Keypad_C[] = {C0, C1, C2};

void KEYPAD_INIT(){
	DataDir_KEYPAD_PORT &= ~((1<<R0) | (1<<R1) | (1<<R2) | (1<<R3));
 176:	8a b3       	in	r24, 0x1a	; 26
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	8a bb       	out	0x1a, r24	; 26
	DataDir_KEYPAD_PORT |= ((1<<C0) | (1<<C1) | (1<<C2));
 17c:	8a b3       	in	r24, 0x1a	; 26
 17e:	8e 60       	ori	r24, 0x0E	; 14
 180:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_PORT = 0xFF;
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	8b bb       	out	0x1b, r24	; 27
 186:	08 95       	ret

00000188 <LCD_KICK>:
	DataDir_LCD_PORT &= ~(0xff<<DATA_SHIFT) ;
	LCD_CTRL |= (1<<RW_SWITCH); // read
	LCD_CTRL &= ~ (1<<RS_SWITCH);
	LCD_KICK ();
	DataDir_LCD_PORT = 0xFF; //0xFF means 0b11111111
	LCD_CTRL &= ~ (1<<RW_SWITCH); //write
 188:	85 b3       	in	r24, 0x15	; 21
 18a:	8f 77       	andi	r24, 0x7F	; 127
 18c:	85 bb       	out	0x15, r24	; 21
 18e:	83 ed       	ldi	r24, 0xD3	; 211
 190:	90 e3       	ldi	r25, 0x30	; 48
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_KICK+0xa>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_KICK+0x10>
 198:	00 00       	nop
 19a:	85 b3       	in	r24, 0x15	; 21
 19c:	80 68       	ori	r24, 0x80	; 128
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	08 95       	ret

000001a2 <LCD_WRITE_COMMAND>:
}


void LCD_WRITE_COMMAND(uint8_t command)
{
 1a2:	cf 93       	push	r28
 1a4:	c8 2f       	mov	r28, r24
	LCD_KICK ();
	//LCD_PORT = 0;
	#endif
	#ifdef FOUR_BIT_MODE
	//LCD_isbusy();
	LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
 1a6:	82 b3       	in	r24, 0x12	; 18
 1a8:	8f 70       	andi	r24, 0x0F	; 15
 1aa:	9c 2f       	mov	r25, r28
 1ac:	90 7f       	andi	r25, 0xF0	; 240
 1ae:	89 2b       	or	r24, r25
 1b0:	82 bb       	out	0x12, r24	; 18
	//LCD_VoidLcd_waitIfBusy();
	//SET_DATA_DIRECTION_REGISTER(LCD_DATA_DIRECTION_PORT, PORT_OUTPUT_DIRECTION);
	//LCD_SET_REGISTER_SELECT(LCD_REGISTER_SELECT_DISABLE);
	//	LCD_SET_READ_WRITE(WRITE_TO_LCD);
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
 1b2:	85 b3       	in	r24, 0x15	; 21
 1b4:	8f 79       	andi	r24, 0x9F	; 159
 1b6:	85 bb       	out	0x15, r24	; 21
	//LCD_VoidLcd_referish();
	LCD_KICK ();
 1b8:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
 1bc:	22 b3       	in	r18, 0x12	; 18
 1be:	30 e1       	ldi	r19, 0x10	; 16
 1c0:	c3 9f       	mul	r28, r19
 1c2:	c0 01       	movw	r24, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	92 2f       	mov	r25, r18
 1c8:	9f 70       	andi	r25, 0x0F	; 15
 1ca:	89 2b       	or	r24, r25
 1cc:	82 bb       	out	0x12, r24	; 18
	//LCD_VoidLcd_waitIfBusy();
	LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
 1ce:	85 b3       	in	r24, 0x15	; 21
 1d0:	8f 79       	andi	r24, 0x9F	; 159
 1d2:	85 bb       	out	0x15, r24	; 21
	//LCD_VoidLcd_referish();
	LCD_KICK ();
 1d4:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_KICK>
	#endif

}
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <LCD_clear_screen>:

}

void LCD_clear_screen ()
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN); // clear the screen
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_WRITE_COMMAND>
 1e2:	08 95       	ret

000001e4 <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	87 e8       	ldi	r24, 0x87	; 135
 1e6:	93 e1       	ldi	r25, 0x13	; 19
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCD_INIT+0x4>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LCD_INIT+0xa>
 1ee:	00 00       	nop
*******************************************************************************/
void LCD_INIT(void)
{

	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RW_SWITCH | 1<<RS_SWITCH) ;
 1f0:	84 b3       	in	r24, 0x14	; 20
 1f2:	80 6e       	ori	r24, 0xE0	; 224
 1f4:	84 bb       	out	0x14, r24	; 20
	LCD_CTRL &= ~(1<<EN_SWITCH | 1<<RW_SWITCH | 1<<RS_SWITCH) ;
 1f6:	85 b3       	in	r24, 0x15	; 21
 1f8:	8f 71       	andi	r24, 0x1F	; 31
 1fa:	85 bb       	out	0x15, r24	; 21

	DataDir_LCD_PORT = 0xff ;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	81 bb       	out	0x11, r24	; 17
 200:	85 ea       	ldi	r24, 0xA5	; 165
 202:	9e e0       	ldi	r25, 0x0E	; 14
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_INIT+0x20>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_INIT+0x26>
 20a:	00 00       	nop
	_delay_ms(15);

	LCD_clear_screen ();
 20c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);

	#endif
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_WRITE_COMMAND>

	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_WRITE_COMMAND>

	#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_WRITE_COMMAND>
 22e:	08 95       	ret

00000230 <LCD_GOTO_XY>:
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN); // clear the screen
}

void LCD_GOTO_XY(uint8_t line, uint8_t position)
{
	if ((position < LCD_END) && (position >=LCD_BEGIN))
 230:	60 31       	cpi	r22, 0x10	; 16
 232:	68 f4       	brcc	.+26     	; 0x24e <LCD_GOTO_XY+0x1e>
	{
		if(line == FIRST_ROW)
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	29 f4       	brne	.+10     	; 0x242 <LCD_GOTO_XY+0x12>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 238:	80 e8       	ldi	r24, 0x80	; 128
 23a:	86 0f       	add	r24, r22
 23c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_WRITE_COMMAND>
 240:	08 95       	ret
		}
		else if(line == SECOND_ROW)
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	21 f4       	brne	.+8      	; 0x24e <LCD_GOTO_XY+0x1e>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 246:	80 ec       	ldi	r24, 0xC0	; 192
 248:	86 0f       	add	r24, r22
 24a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_WRITE_COMMAND>
 24e:	08 95       	ret

00000250 <LCD_WRITE_CHAR>:

}


void LCD_WRITE_CHAR(uint8_t data)
{
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
	LCD_KICK ();
	//LCD_PORT = 0;
	#endif

	#ifdef FOUR_BIT_MODE
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
 254:	82 b3       	in	r24, 0x12	; 18
 256:	8f 70       	andi	r24, 0x0F	; 15
 258:	9c 2f       	mov	r25, r28
 25a:	90 7f       	andi	r25, 0xF0	; 240
 25c:	89 2b       	or	r24, r25
 25e:	82 bb       	out	0x12, r24	; 18
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 260:	85 b3       	in	r24, 0x15	; 21
 262:	80 62       	ori	r24, 0x20	; 32
 264:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 266:	85 b3       	in	r24, 0x15	; 21
 268:	8f 7b       	andi	r24, 0xBF	; 191
 26a:	85 bb       	out	0x15, r24	; 21
	LCD_KICK ();
 26c:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (data << 4);
 270:	22 b3       	in	r18, 0x12	; 18
 272:	30 e1       	ldi	r19, 0x10	; 16
 274:	c3 9f       	mul	r28, r19
 276:	c0 01       	movw	r24, r0
 278:	11 24       	eor	r1, r1
 27a:	92 2f       	mov	r25, r18
 27c:	9f 70       	andi	r25, 0x0F	; 15
 27e:	89 2b       	or	r24, r25
 280:	82 bb       	out	0x12, r24	; 18
	LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
 282:	85 b3       	in	r24, 0x15	; 21
 284:	80 62       	ori	r24, 0x20	; 32
 286:	85 bb       	out	0x15, r24	; 21
	LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
 288:	85 b3       	in	r24, 0x15	; 21
 28a:	8f 7b       	andi	r24, 0xBF	; 191
 28c:	85 bb       	out	0x15, r24	; 21
	LCD_KICK ();
 28e:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_KICK>

	#endif


}
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(uint8_t *data)
{
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	8c 01       	movw	r16, r24

	/* To count how much uint8_t on the line (it should be 16 uint8_t only) */
	uint8_t count = LCD_BEGIN ;
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
	while(*data > LCD_BEGIN)
 2a2:	18 c0       	rjmp	.+48     	; 0x2d4 <LCD_WRITE_STRING+0x3e>
	{
		count++;
 2a4:	d1 e0       	ldi	r29, 0x01	; 1
 2a6:	dc 0f       	add	r29, r28
		LCD_WRITE_CHAR(*data++);
 2a8:	0f 5f       	subi	r16, 0xFF	; 255
 2aa:	1f 4f       	sbci	r17, 0xFF	; 255
 2ac:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WRITE_CHAR>
		if (count == FIRST_ROW_LIMIT) // go to the second line
 2b0:	d0 31       	cpi	r29, 0x10	; 16
 2b2:	29 f4       	brne	.+10     	; 0x2be <LCD_WRITE_STRING+0x28>
		{
			LCD_GOTO_XY(SECOND_ROW, LCD_BEGIN); //Second line position zero
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 18 01 	call	0x230	; 0x230 <LCD_GOTO_XY>
 2bc:	0a c0       	rjmp	.+20     	; 0x2d2 <LCD_WRITE_STRING+0x3c>
		}
		else if ((count == SECOND_ROW_LIMIT) || (count == SECOND_ROW_LIMIT + 1)) // clear screen and show again
 2be:	cf 51       	subi	r28, 0x1F	; 31
 2c0:	c2 30       	cpi	r28, 0x02	; 2
 2c2:	38 f4       	brcc	.+14     	; 0x2d2 <LCD_WRITE_STRING+0x3c>
		{
			LCD_clear_screen();
 2c4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_clear_screen>
			LCD_GOTO_XY(FIRST_ROW,LCD_BEGIN); //First Line position zero
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 18 01 	call	0x230	; 0x230 <LCD_GOTO_XY>
			count = LCD_BEGIN ;
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	cd 2f       	mov	r28, r29
void LCD_WRITE_STRING(uint8_t *data)
{

	/* To count how much uint8_t on the line (it should be 16 uint8_t only) */
	uint8_t count = LCD_BEGIN ;
	while(*data > LCD_BEGIN)
 2d4:	f8 01       	movw	r30, r16
 2d6:	80 81       	ld	r24, Z
 2d8:	81 11       	cpse	r24, r1
 2da:	e4 cf       	rjmp	.-56     	; 0x2a4 <LCD_WRITE_STRING+0xe>
			LCD_clear_screen();
			LCD_GOTO_XY(FIRST_ROW,LCD_BEGIN); //First Line position zero
			count = LCD_BEGIN ;
		}
	}
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <__umulhisi3>:
 2e6:	a2 9f       	mul	r26, r18
 2e8:	b0 01       	movw	r22, r0
 2ea:	b3 9f       	mul	r27, r19
 2ec:	c0 01       	movw	r24, r0
 2ee:	a3 9f       	mul	r26, r19
 2f0:	70 0d       	add	r23, r0
 2f2:	81 1d       	adc	r24, r1
 2f4:	11 24       	eor	r1, r1
 2f6:	91 1d       	adc	r25, r1
 2f8:	b2 9f       	mul	r27, r18
 2fa:	70 0d       	add	r23, r0
 2fc:	81 1d       	adc	r24, r1
 2fe:	11 24       	eor	r1, r1
 300:	91 1d       	adc	r25, r1
 302:	08 95       	ret

00000304 <__itoa_ncheck>:
 304:	bb 27       	eor	r27, r27
 306:	4a 30       	cpi	r20, 0x0A	; 10
 308:	31 f4       	brne	.+12     	; 0x316 <__itoa_ncheck+0x12>
 30a:	99 23       	and	r25, r25
 30c:	22 f4       	brpl	.+8      	; 0x316 <__itoa_ncheck+0x12>
 30e:	bd e2       	ldi	r27, 0x2D	; 45
 310:	90 95       	com	r25
 312:	81 95       	neg	r24
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__utoa_common>

0000031a <__utoa_ncheck>:
 31a:	bb 27       	eor	r27, r27

0000031c <__utoa_common>:
 31c:	fb 01       	movw	r30, r22
 31e:	55 27       	eor	r21, r21
 320:	aa 27       	eor	r26, r26
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	aa 1f       	adc	r26, r26
 328:	a4 17       	cp	r26, r20
 32a:	10 f0       	brcs	.+4      	; 0x330 <__utoa_common+0x14>
 32c:	a4 1b       	sub	r26, r20
 32e:	83 95       	inc	r24
 330:	50 51       	subi	r21, 0x10	; 16
 332:	b9 f7       	brne	.-18     	; 0x322 <__utoa_common+0x6>
 334:	a0 5d       	subi	r26, 0xD0	; 208
 336:	aa 33       	cpi	r26, 0x3A	; 58
 338:	08 f0       	brcs	.+2      	; 0x33c <__utoa_common+0x20>
 33a:	a9 5d       	subi	r26, 0xD9	; 217
 33c:	a1 93       	st	Z+, r26
 33e:	00 97       	sbiw	r24, 0x00	; 0
 340:	79 f7       	brne	.-34     	; 0x320 <__utoa_common+0x4>
 342:	b1 11       	cpse	r27, r1
 344:	b1 93       	st	Z+, r27
 346:	11 92       	st	Z+, r1
 348:	cb 01       	movw	r24, r22
 34a:	0c 94 a7 01 	jmp	0x34e	; 0x34e <strrev>

0000034e <strrev>:
 34e:	dc 01       	movw	r26, r24
 350:	fc 01       	movw	r30, r24
 352:	67 2f       	mov	r22, r23
 354:	71 91       	ld	r23, Z+
 356:	77 23       	and	r23, r23
 358:	e1 f7       	brne	.-8      	; 0x352 <strrev+0x4>
 35a:	32 97       	sbiw	r30, 0x02	; 2
 35c:	04 c0       	rjmp	.+8      	; 0x366 <strrev+0x18>
 35e:	7c 91       	ld	r23, X
 360:	6d 93       	st	X+, r22
 362:	70 83       	st	Z, r23
 364:	62 91       	ld	r22, -Z
 366:	ae 17       	cp	r26, r30
 368:	bf 07       	cpc	r27, r31
 36a:	c8 f3       	brcs	.-14     	; 0x35e <strrev+0x10>
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
